
KeyInput_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007bc  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  8e:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z8keyInputv>:
unsigned char keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};

//Scanning the keypad repeatedly to check whether a key is pressed
char keyInput(){
	
	KEY_DDR |= 0b00001111 ; //set the row pins to OUTPUT
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f 60       	ori	r24, 0x0F	; 15
  9a:	84 b9       	out	0x04, r24	; 4
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	85 b9       	out	0x05, r24	; 5
	for (int r=0; r<=3; r++){
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	64 30       	cpi	r22, 0x04	; 4
  a8:	71 05       	cpc	r23, r1
  aa:	0c f0       	brlt	.+2      	; 0xae <_Z8keyInputv+0x18>
  ac:	41 c0       	rjmp	.+130    	; 0x130 <_Z8keyInputv+0x9a>
		KEY_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
  ae:	25 b1       	in	r18, 0x05	; 5
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_Z8keyInputv+0x26>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <_Z8keyInputv+0x22>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	85 b9       	out	0x05, r24	; 5
		for (int c=0; c<=2; c++){
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	23 30       	cpi	r18, 0x03	; 3
  cc:	31 05       	cpc	r19, r1
  ce:	6c f5       	brge	.+90     	; 0x12a <_Z8keyInputv+0x94>
			KEY_PORT |= (0b00010000 << c); 
  d0:	45 b1       	in	r20, 0x05	; 5
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 2e       	mov	r0, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <_Z8keyInputv+0x48>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <_Z8keyInputv+0x44>
  e2:	48 2b       	or	r20, r24
  e4:	45 b9       	out	0x05, r20	; 5
			if (!(KEY_PIN & (0b00010000 << c))){ // check each column in the respective row for a pressed key	
  e6:	43 b1       	in	r20, 0x03	; 3
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	84 23       	and	r24, r20
  ec:	95 23       	and	r25, r21
  ee:	89 2b       	or	r24, r25
  f0:	c9 f4       	brne	.+50     	; 0x124 <_Z8keyInputv+0x8e>
				char pressed = keys[r][c]; // obtain the pressed key
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	68 0f       	add	r22, r24
  fa:	79 1f       	adc	r23, r25
  fc:	60 50       	subi	r22, 0x00	; 0
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
 100:	fb 01       	movw	r30, r22
 102:	e2 0f       	add	r30, r18
 104:	f3 1f       	adc	r31, r19
 106:	80 81       	ld	r24, Z
				if ((pressed!='*') & (pressed!='#')){
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	8a 32       	cpi	r24, 0x2A	; 42
 10c:	09 f4       	brne	.+2      	; 0x110 <_Z8keyInputv+0x7a>
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	99 23       	and	r25, r25
 112:	31 f0       	breq	.+12     	; 0x120 <_Z8keyInputv+0x8a>
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	83 32       	cpi	r24, 0x23	; 35
 118:	09 f4       	brne	.+2      	; 0x11c <_Z8keyInputv+0x86>
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	91 11       	cpse	r25, r1
 11e:	09 c0       	rjmp	.+18     	; 0x132 <_Z8keyInputv+0x9c>
					return pressed;
				}
				return 'X';
 120:	88 e5       	ldi	r24, 0x58	; 88
 122:	08 95       	ret
	
	KEY_DDR |= 0b00001111 ; //set the row pins to OUTPUT
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
	for (int r=0; r<=3; r++){
		KEY_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
		for (int c=0; c<=2; c++){
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	d0 cf       	rjmp	.-96     	; 0xca <_Z8keyInputv+0x34>
//Scanning the keypad repeatedly to check whether a key is pressed
char keyInput(){
	
	KEY_DDR |= 0b00001111 ; //set the row pins to OUTPUT
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
	for (int r=0; r<=3; r++){
 12a:	6f 5f       	subi	r22, 0xFF	; 255
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	bb cf       	rjmp	.-138    	; 0xa6 <_Z8keyInputv+0x10>
				}
				return 'X';
			}
		}
	}
	return 'X';
 130:	88 e5       	ldi	r24, 0x58	; 88
}
 132:	08 95       	ret

00000134 <_Z3Ledv>:


void Led(){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	28 97       	sbiw	r28, 0x08	; 8
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
	LED_DDR |= 0b00001111; // set the first 4 pins to Output
 148:	87 b1       	in	r24, 0x07	; 7
 14a:	8f 60       	ori	r24, 0x0F	; 15
 14c:	87 b9       	out	0x07, r24	; 7
	char key = keyInput(); // obtain the returned value of the function
 14e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8keyInputv>
	if (key == 'X'){ // when a key is not pressed or when '*' or '#' is pressed turn off the LEDs
 152:	88 35       	cpi	r24, 0x58	; 88
 154:	69 f4       	brne	.+26     	; 0x170 <_Z3Ledv+0x3c>
		LED_PORT = LED_PORT & (~(1<<0));  
 156:	88 b1       	in	r24, 0x08	; 8
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<1));
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<2));
 162:	88 b1       	in	r24, 0x08	; 8
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<3));
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	87 7f       	andi	r24, 0xF7	; 247
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	5a c0       	rjmp	.+180    	; 0x224 <_Z3Ledv+0xf0>
	}
	else{  // when a key is pressed
		int key_no = int(key) - int ('0'); // convert the key value from char to int
 170:	68 2f       	mov	r22, r24
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	60 53       	subi	r22, 0x30	; 48
 176:	71 09       	sbc	r23, r1
		int binary[4]={0,0,0,0};
 178:	fe 01       	movw	r30, r28
 17a:	31 96       	adiw	r30, 0x01	; 1
 17c:	88 e0       	ldi	r24, 0x08	; 8
 17e:	df 01       	movw	r26, r30
 180:	1d 92       	st	X+, r1
 182:	8a 95       	dec	r24
 184:	e9 f7       	brne	.-6      	; 0x180 <_Z3Ledv+0x4c>
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
 186:	a3 e0       	ldi	r26, 0x03	; 3
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	bb 23       	and	r27, r27
 18c:	0c f4       	brge	.+2      	; 0x190 <_Z3Ledv+0x5c>
 18e:	4a c0       	rjmp	.+148    	; 0x224 <_Z3Ledv+0xf0>
			binary[i]=key_no%2;
 190:	cb 01       	movw	r24, r22
 192:	81 70       	andi	r24, 0x01	; 1
 194:	90 78       	andi	r25, 0x80	; 128
 196:	99 23       	and	r25, r25
 198:	24 f4       	brge	.+8      	; 0x1a2 <_Z3Ledv+0x6e>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	8e 6f       	ori	r24, 0xFE	; 254
 19e:	9f 6f       	ori	r25, 0xFF	; 255
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	fd 01       	movw	r30, r26
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	2c 0f       	add	r18, r28
 1ae:	3d 1f       	adc	r19, r29
 1b0:	e2 0f       	add	r30, r18
 1b2:	f3 1f       	adc	r31, r19
 1b4:	91 83       	std	Z+1, r25	; 0x01
 1b6:	80 83       	st	Z, r24
			key_no=key_no/2;
 1b8:	cb 01       	movw	r24, r22
 1ba:	99 23       	and	r25, r25
 1bc:	0c f4       	brge	.+2      	; 0x1c0 <_Z3Ledv+0x8c>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	bc 01       	movw	r22, r24
 1c2:	75 95       	asr	r23
 1c4:	67 95       	ror	r22
		    for (int i=0; i<=3; i++){ // turn on or off the LEDs according to the binary value of the key
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	24 30       	cpi	r18, 0x04	; 4
 1cc:	31 05       	cpc	r19, r1
 1ce:	44 f5       	brge	.+80     	; 0x220 <_Z3Ledv+0xec>
			    if (binary[i]==1){ 
 1d0:	f9 01       	movw	r30, r18
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	8c 0f       	add	r24, r28
 1dc:	9d 1f       	adc	r25, r29
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	61 f4       	brne	.+24     	; 0x202 <_Z3Ledv+0xce>
					LED_PORT = LED_PORT | (1<<i); // 1 --> LED on
 1ea:	48 b1       	in	r20, 0x08	; 8
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 2e       	mov	r0, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_Z3Ledv+0xc4>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	0a 94       	dec	r0
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <_Z3Ledv+0xc0>
 1fc:	84 2b       	or	r24, r20
 1fe:	88 b9       	out	0x08, r24	; 8
 200:	0c c0       	rjmp	.+24     	; 0x21a <_Z3Ledv+0xe6>
			    }
			    else{
				    LED_PORT = LED_PORT & (~(1<<i)); // 0 --> LED off
 202:	98 b1       	in	r25, 0x08	; 8
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_Z3Ledv+0xdc>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <_Z3Ledv+0xd8>
 214:	40 95       	com	r20
 216:	49 23       	and	r20, r25
 218:	48 b9       	out	0x08, r20	; 8
		int key_no = int(key) - int ('0'); // convert the key value from char to int
		int binary[4]={0,0,0,0};
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
			binary[i]=key_no%2;
			key_no=key_no/2;
		    for (int i=0; i<=3; i++){ // turn on or off the LEDs according to the binary value of the key
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	d5 cf       	rjmp	.-86     	; 0x1ca <_Z3Ledv+0x96>
		LED_PORT = LED_PORT & (~(1<<3));
	}
	else{  // when a key is pressed
		int key_no = int(key) - int ('0'); // convert the key value from char to int
		int binary[4]={0,0,0,0};
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
 220:	11 97       	sbiw	r26, 0x01	; 1
 222:	b3 cf       	rjmp	.-154    	; 0x18a <_Z3Ledv+0x56>
				    LED_PORT = LED_PORT & (~(1<<i)); // 0 --> LED off
			    }
			    }
		    }		
   }
}
 224:	28 96       	adiw	r28, 0x08	; 8
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <main>:
 int main(void)
 {
	 while(1)
	 {
		 Led(); // calling the Led() function repeatedly
 236:	0e 94 9a 00 	call	0x134	; 0x134 <_Z3Ledv>
 23a:	fd cf       	rjmp	.-6      	; 0x236 <main>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
