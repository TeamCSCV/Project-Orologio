
KeyInput_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082f  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006de  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  0000128d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z8keyInputv>:

/* Replace with your library code */
//Scanning the keypad repeatedly to check whether a key is pressed
char keyInput(){
	
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	8f 60       	ori	r24, 0x0F	; 15
  9a:	8b b9       	out	0x0b, r24	; 11
	for (int r=0; r<=3; r++){
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	64 30       	cpi	r22, 0x04	; 4
  a2:	71 05       	cpc	r23, r1
  a4:	0c f0       	brlt	.+2      	; 0xa8 <_Z8keyInputv+0x12>
  a6:	48 c0       	rjmp	.+144    	; 0x138 <_Z8keyInputv+0xa2>
		KEY_DDR &= ~0b01111111; // clear previous bit values
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 78       	andi	r24, 0x80	; 128
  ac:	8a b9       	out	0x0a, r24	; 10
		KEY_DDR |= 0b00000001 << r ; // set the current pin as output
  ae:	2a b1       	in	r18, 0x0a	; 10
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	06 2e       	mov	r0, r22
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_Z8keyInputv+0x26>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <_Z8keyInputv+0x22>
  c0:	92 2f       	mov	r25, r18
  c2:	98 2b       	or	r25, r24
  c4:	9a b9       	out	0x0a, r25	; 10
		KEY_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	80 95       	com	r24
  ca:	89 23       	and	r24, r25
  cc:	8b b9       	out	0x0b, r24	; 11
		for (int c=0; c<=2; c++){
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	23 30       	cpi	r18, 0x03	; 3
  d4:	31 05       	cpc	r19, r1
  d6:	6c f5       	brge	.+90     	; 0x132 <_Z8keyInputv+0x9c>
			KEY_PORT |= (0b00010000 << c);
  d8:	4b b1       	in	r20, 0x0b	; 11
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 2e       	mov	r0, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <_Z8keyInputv+0x50>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <_Z8keyInputv+0x4c>
  ea:	48 2b       	or	r20, r24
  ec:	4b b9       	out	0x0b, r20	; 11
			if (!(KEY_PIN & (0b00010000 << c))){ // check each column in the respective row for a pressed key
  ee:	49 b1       	in	r20, 0x09	; 9
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	84 23       	and	r24, r20
  f4:	95 23       	and	r25, r21
  f6:	89 2b       	or	r24, r25
  f8:	c9 f4       	brne	.+50     	; 0x12c <_Z8keyInputv+0x96>
				char pressed = keys[r][c]; // obtain the pressed key
  fa:	cb 01       	movw	r24, r22
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	68 0f       	add	r22, r24
 102:	79 1f       	adc	r23, r25
 104:	60 50       	subi	r22, 0x00	; 0
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	fb 01       	movw	r30, r22
 10a:	e2 0f       	add	r30, r18
 10c:	f3 1f       	adc	r31, r19
 10e:	80 81       	ld	r24, Z
				if ((pressed!='*') & (pressed!='#')){
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	8a 32       	cpi	r24, 0x2A	; 42
 114:	09 f4       	brne	.+2      	; 0x118 <_Z8keyInputv+0x82>
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	99 23       	and	r25, r25
 11a:	31 f0       	breq	.+12     	; 0x128 <_Z8keyInputv+0x92>
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	83 32       	cpi	r24, 0x23	; 35
 120:	09 f4       	brne	.+2      	; 0x124 <_Z8keyInputv+0x8e>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	91 11       	cpse	r25, r1
 126:	09 c0       	rjmp	.+18     	; 0x13a <_Z8keyInputv+0xa4>
					return pressed;
				}
				return 'X';
 128:	88 e5       	ldi	r24, 0x58	; 88
 12a:	08 95       	ret
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
	for (int r=0; r<=3; r++){
		KEY_DDR &= ~0b01111111; // clear previous bit values
		KEY_DDR |= 0b00000001 << r ; // set the current pin as output
		KEY_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
		for (int c=0; c<=2; c++){
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	d0 cf       	rjmp	.-96     	; 0xd2 <_Z8keyInputv+0x3c>
/* Replace with your library code */
//Scanning the keypad repeatedly to check whether a key is pressed
char keyInput(){
	
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
	for (int r=0; r<=3; r++){
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	b4 cf       	rjmp	.-152    	; 0xa0 <_Z8keyInputv+0xa>
				}
				return 'X';
			}
		}
	}
	return 'X';
 138:	88 e5       	ldi	r24, 0x58	; 88
}
 13a:	08 95       	ret

0000013c <_Z3Ledv>:


void Led(){
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	28 97       	sbiw	r28, 0x08	; 8
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
	LED_DDR |= 0b00001111; // set the pins to Output
 150:	87 b1       	in	r24, 0x07	; 7
 152:	8f 60       	ori	r24, 0x0F	; 15
 154:	87 b9       	out	0x07, r24	; 7
	char key = keyInput(); // obtain the pressed key
 156:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8keyInputv>
	if (key == 'X'){ // when a key is not pressed or when '*' or '#' is pressed turn off the LEDs
 15a:	88 35       	cpi	r24, 0x58	; 88
 15c:	69 f4       	brne	.+26     	; 0x178 <_Z3Ledv+0x3c>
		LED_PORT = LED_PORT & (~(1<<0));
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<1));
 164:	88 b1       	in	r24, 0x08	; 8
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<2));
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<3));
 170:	88 b1       	in	r24, 0x08	; 8
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	88 b9       	out	0x08, r24	; 8
 176:	5a c0       	rjmp	.+180    	; 0x22c <_Z3Ledv+0xf0>
	}
	else{  // when a key is pressed
		int key_no = int(key) - int ('0'); // convert the key value from char to int
 178:	68 2f       	mov	r22, r24
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	60 53       	subi	r22, 0x30	; 48
 17e:	71 09       	sbc	r23, r1
		int binary[4]={0,0,0,0};
 180:	fe 01       	movw	r30, r28
 182:	31 96       	adiw	r30, 0x01	; 1
 184:	88 e0       	ldi	r24, 0x08	; 8
 186:	df 01       	movw	r26, r30
 188:	1d 92       	st	X+, r1
 18a:	8a 95       	dec	r24
 18c:	e9 f7       	brne	.-6      	; 0x188 <_Z3Ledv+0x4c>
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
 18e:	a3 e0       	ldi	r26, 0x03	; 3
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	bb 23       	and	r27, r27
 194:	0c f4       	brge	.+2      	; 0x198 <_Z3Ledv+0x5c>
 196:	4a c0       	rjmp	.+148    	; 0x22c <_Z3Ledv+0xf0>
			binary[i]=key_no % 2;
 198:	cb 01       	movw	r24, r22
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	90 78       	andi	r25, 0x80	; 128
 19e:	99 23       	and	r25, r25
 1a0:	24 f4       	brge	.+8      	; 0x1aa <_Z3Ledv+0x6e>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	8e 6f       	ori	r24, 0xFE	; 254
 1a6:	9f 6f       	ori	r25, 0xFF	; 255
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	fd 01       	movw	r30, r26
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	2c 0f       	add	r18, r28
 1b6:	3d 1f       	adc	r19, r29
 1b8:	e2 0f       	add	r30, r18
 1ba:	f3 1f       	adc	r31, r19
 1bc:	91 83       	std	Z+1, r25	; 0x01
 1be:	80 83       	st	Z, r24
			key_no=key_no / 2;
 1c0:	cb 01       	movw	r24, r22
 1c2:	99 23       	and	r25, r25
 1c4:	0c f4       	brge	.+2      	; 0x1c8 <_Z3Ledv+0x8c>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	bc 01       	movw	r22, r24
 1ca:	75 95       	asr	r23
 1cc:	67 95       	ror	r22
			for (int i=0; i<=3; i++){ // turn on or off the LEDs according to the binary value of the key
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	24 30       	cpi	r18, 0x04	; 4
 1d4:	31 05       	cpc	r19, r1
 1d6:	44 f5       	brge	.+80     	; 0x228 <_Z3Ledv+0xec>
				if (binary[i]==1){
 1d8:	f9 01       	movw	r30, r18
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	8c 0f       	add	r24, r28
 1e4:	9d 1f       	adc	r25, r29
 1e6:	e8 0f       	add	r30, r24
 1e8:	f9 1f       	adc	r31, r25
 1ea:	80 81       	ld	r24, Z
 1ec:	91 81       	ldd	r25, Z+1	; 0x01
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	61 f4       	brne	.+24     	; 0x20a <_Z3Ledv+0xce>
					LED_PORT = LED_PORT | (1<<i); // 1 >> LED on
 1f2:	48 b1       	in	r20, 0x08	; 8
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 2e       	mov	r0, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <_Z3Ledv+0xc4>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <_Z3Ledv+0xc0>
 204:	84 2b       	or	r24, r20
 206:	88 b9       	out	0x08, r24	; 8
 208:	0c c0       	rjmp	.+24     	; 0x222 <_Z3Ledv+0xe6>
				}
				else{
					LED_PORT = LED_PORT & (~(1<<i)); // 0 >> LED off
 20a:	98 b1       	in	r25, 0x08	; 8
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <_Z3Ledv+0xdc>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <_Z3Ledv+0xd8>
 21c:	40 95       	com	r20
 21e:	49 23       	and	r20, r25
 220:	48 b9       	out	0x08, r20	; 8
		int key_no = int(key) - int ('0'); // convert the key value from char to int
		int binary[4]={0,0,0,0};
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
			binary[i]=key_no % 2;
			key_no=key_no / 2;
			for (int i=0; i<=3; i++){ // turn on or off the LEDs according to the binary value of the key
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	d5 cf       	rjmp	.-86     	; 0x1d2 <_Z3Ledv+0x96>
		LED_PORT = LED_PORT & (~(1<<3));
	}
	else{  // when a key is pressed
		int key_no = int(key) - int ('0'); // convert the key value from char to int
		int binary[4]={0,0,0,0};
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
 228:	11 97       	sbiw	r26, 0x01	; 1
 22a:	b3 cf       	rjmp	.-154    	; 0x192 <_Z3Ledv+0x56>
					LED_PORT = LED_PORT & (~(1<<i)); // 0 >> LED off
				}
			}
		}
	}
}
 22c:	28 96       	adiw	r28, 0x08	; 8
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:
	
 int main(void)
 {
	 while (1)
	 {
		 Led(); // calling the Led() function repeatedly
 23e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z3Ledv>
 242:	fd cf       	rjmp	.-6      	; 0x23e <main>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
