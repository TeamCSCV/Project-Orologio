
KeyIn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000904  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ed  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046e  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000198  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  9e:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN7Key_Pad8keyInputEv>:
char keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	8b b9       	out	0x0b, r24	; 11
	for (int r=0; r<=3; r++){
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	64 30       	cpi	r22, 0x04	; 4
  b2:	71 05       	cpc	r23, r1
  b4:	0c f0       	brlt	.+2      	; 0xb8 <_ZN7Key_Pad8keyInputEv+0x12>
  b6:	48 c0       	rjmp	.+144    	; 0x148 <_ZN7Key_Pad8keyInputEv+0xa2>
		KEY_DDR &= ~0b01111111; //clearing previous bits
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	80 78       	andi	r24, 0x80	; 128
  bc:	8a b9       	out	0x0a, r24	; 10
		KEY_DDR |= 0b00000001 << r ; //set the current pin to output
  be:	2a b1       	in	r18, 0x0a	; 10
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	06 2e       	mov	r0, r22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_ZN7Key_Pad8keyInputEv+0x26>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_ZN7Key_Pad8keyInputEv+0x22>
  d0:	92 2f       	mov	r25, r18
  d2:	98 2b       	or	r25, r24
  d4:	9a b9       	out	0x0a, r25	; 10
		KEY_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	8b b9       	out	0x0b, r24	; 11
		for (int c=0; c<=2; c++){
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	23 30       	cpi	r18, 0x03	; 3
  e4:	31 05       	cpc	r19, r1
  e6:	6c f5       	brge	.+90     	; 0x142 <_ZN7Key_Pad8keyInputEv+0x9c>
			KEY_PORT |= (0b00010000 << c);
  e8:	4b b1       	in	r20, 0x0b	; 11
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <_ZN7Key_Pad8keyInputEv+0x50>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <_ZN7Key_Pad8keyInputEv+0x4c>
  fa:	48 2b       	or	r20, r24
  fc:	4b b9       	out	0x0b, r20	; 11
			if (!(KEY_PIN & (0b00010000 << c))){ // check each column in the respective row for a pressed key
  fe:	49 b1       	in	r20, 0x09	; 9
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	84 23       	and	r24, r20
 104:	95 23       	and	r25, r21
 106:	89 2b       	or	r24, r25
 108:	c9 f4       	brne	.+50     	; 0x13c <_ZN7Key_Pad8keyInputEv+0x96>
				char pressed = keys[r][c]; // obtain the pressed key
 10a:	cb 01       	movw	r24, r22
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	68 0f       	add	r22, r24
 112:	79 1f       	adc	r23, r25
 114:	60 50       	subi	r22, 0x00	; 0
 116:	7f 4f       	sbci	r23, 0xFF	; 255
 118:	fb 01       	movw	r30, r22
 11a:	e2 0f       	add	r30, r18
 11c:	f3 1f       	adc	r31, r19
 11e:	80 81       	ld	r24, Z
				if ((pressed!='*') & (pressed!='#')){
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	8a 32       	cpi	r24, 0x2A	; 42
 124:	09 f4       	brne	.+2      	; 0x128 <_ZN7Key_Pad8keyInputEv+0x82>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	99 23       	and	r25, r25
 12a:	31 f0       	breq	.+12     	; 0x138 <_ZN7Key_Pad8keyInputEv+0x92>
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	83 32       	cpi	r24, 0x23	; 35
 130:	09 f4       	brne	.+2      	; 0x134 <_ZN7Key_Pad8keyInputEv+0x8e>
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	91 11       	cpse	r25, r1
 136:	09 c0       	rjmp	.+18     	; 0x14a <_ZN7Key_Pad8keyInputEv+0xa4>
					return pressed;
				}
				return 'X';
 138:	88 e5       	ldi	r24, 0x58	; 88
 13a:	08 95       	ret
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
	for (int r=0; r<=3; r++){
		KEY_DDR &= ~0b01111111; //clearing previous bits
		KEY_DDR |= 0b00000001 << r ; //set the current pin to output
		KEY_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
		for (int c=0; c<=2; c++){
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	d0 cf       	rjmp	.-96     	; 0xe2 <_ZN7Key_Pad8keyInputEv+0x3c>

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	
	KEY_PORT |= 0b00001111; //set all row pins to HIGH
	for (int r=0; r<=3; r++){
 142:	6f 5f       	subi	r22, 0xFF	; 255
 144:	7f 4f       	sbci	r23, 0xFF	; 255
 146:	b4 cf       	rjmp	.-152    	; 0xb0 <_ZN7Key_Pad8keyInputEv+0xa>
				}
				return 'X';
			}
		}
	}
	return 'X';
 148:	88 e5       	ldi	r24, 0x58	; 88
}
 14a:	08 95       	ret

0000014c <_ZN7Key_Pad3LedEv>:


void Key_Pad :: Led(){
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	28 97       	sbiw	r28, 0x08	; 8
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	LED_DDR |= 0b00001111; // set the pins to Output
 160:	27 b1       	in	r18, 0x07	; 7
 162:	2f 60       	ori	r18, 0x0F	; 15
 164:	27 b9       	out	0x07, r18	; 7
	char key = keyInput(); // obtain the pressed key
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Key_Pad8keyInputEv>
	if (key == 'X'){ // when a key is not pressed or when '*' or '#' is pressed turn off the LEDs
 16a:	88 35       	cpi	r24, 0x58	; 88
 16c:	69 f4       	brne	.+26     	; 0x188 <_ZN7Key_Pad3LedEv+0x3c>
		LED_PORT = LED_PORT & (~(1<<0));
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<1));
 174:	88 b1       	in	r24, 0x08	; 8
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<2));
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	88 b9       	out	0x08, r24	; 8
		LED_PORT = LED_PORT & (~(1<<3));
 180:	88 b1       	in	r24, 0x08	; 8
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	88 b9       	out	0x08, r24	; 8
 186:	5a c0       	rjmp	.+180    	; 0x23c <_ZN7Key_Pad3LedEv+0xf0>
	}
	else{  // when a key is pressed
		int key_no = int(key) - int ('0'); // convert the key value from char to int
 188:	68 2f       	mov	r22, r24
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	60 53       	subi	r22, 0x30	; 48
 18e:	71 09       	sbc	r23, r1
		int binary[4]={0,0,0,0};
 190:	fe 01       	movw	r30, r28
 192:	31 96       	adiw	r30, 0x01	; 1
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	df 01       	movw	r26, r30
 198:	1d 92       	st	X+, r1
 19a:	8a 95       	dec	r24
 19c:	e9 f7       	brne	.-6      	; 0x198 <_ZN7Key_Pad3LedEv+0x4c>
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
 19e:	a3 e0       	ldi	r26, 0x03	; 3
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	bb 23       	and	r27, r27
 1a4:	0c f4       	brge	.+2      	; 0x1a8 <_ZN7Key_Pad3LedEv+0x5c>
 1a6:	4a c0       	rjmp	.+148    	; 0x23c <_ZN7Key_Pad3LedEv+0xf0>
			binary[i]=key_no % 2;
 1a8:	cb 01       	movw	r24, r22
 1aa:	81 70       	andi	r24, 0x01	; 1
 1ac:	90 78       	andi	r25, 0x80	; 128
 1ae:	99 23       	and	r25, r25
 1b0:	24 f4       	brge	.+8      	; 0x1ba <_ZN7Key_Pad3LedEv+0x6e>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	8e 6f       	ori	r24, 0xFE	; 254
 1b6:	9f 6f       	ori	r25, 0xFF	; 255
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	fd 01       	movw	r30, r26
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	2c 0f       	add	r18, r28
 1c6:	3d 1f       	adc	r19, r29
 1c8:	e2 0f       	add	r30, r18
 1ca:	f3 1f       	adc	r31, r19
 1cc:	91 83       	std	Z+1, r25	; 0x01
 1ce:	80 83       	st	Z, r24
			key_no=key_no / 2;
 1d0:	cb 01       	movw	r24, r22
 1d2:	99 23       	and	r25, r25
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <_ZN7Key_Pad3LedEv+0x8c>
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	bc 01       	movw	r22, r24
 1da:	75 95       	asr	r23
 1dc:	67 95       	ror	r22
			for (int i=0; i<=3; i++){ // turn on or off the LEDs according to the binary value of the key
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	24 30       	cpi	r18, 0x04	; 4
 1e4:	31 05       	cpc	r19, r1
 1e6:	44 f5       	brge	.+80     	; 0x238 <_ZN7Key_Pad3LedEv+0xec>
				if (binary[i]==1){
 1e8:	f9 01       	movw	r30, r18
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	8c 0f       	add	r24, r28
 1f4:	9d 1f       	adc	r25, r29
 1f6:	e8 0f       	add	r30, r24
 1f8:	f9 1f       	adc	r31, r25
 1fa:	80 81       	ld	r24, Z
 1fc:	91 81       	ldd	r25, Z+1	; 0x01
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	61 f4       	brne	.+24     	; 0x21a <_ZN7Key_Pad3LedEv+0xce>
					LED_PORT = LED_PORT | (1<<i); // 1 >> LED on
 202:	48 b1       	in	r20, 0x08	; 8
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_ZN7Key_Pad3LedEv+0xc4>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <_ZN7Key_Pad3LedEv+0xc0>
 214:	84 2b       	or	r24, r20
 216:	88 b9       	out	0x08, r24	; 8
 218:	0c c0       	rjmp	.+24     	; 0x232 <_ZN7Key_Pad3LedEv+0xe6>
				}
				else{
					LED_PORT = LED_PORT & (~(1<<i)); // 0 >> LED off
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <_ZN7Key_Pad3LedEv+0xdc>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <_ZN7Key_Pad3LedEv+0xd8>
 22c:	40 95       	com	r20
 22e:	49 23       	and	r20, r25
 230:	48 b9       	out	0x08, r20	; 8
		int key_no = int(key) - int ('0'); // convert the key value from char to int
		int binary[4]={0,0,0,0};
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
			binary[i]=key_no % 2;
			key_no=key_no / 2;
			for (int i=0; i<=3; i++){ // turn on or off the LEDs according to the binary value of the key
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	d5 cf       	rjmp	.-86     	; 0x1e2 <_ZN7Key_Pad3LedEv+0x96>
		LED_PORT = LED_PORT & (~(1<<3));
	}
	else{  // when a key is pressed
		int key_no = int(key) - int ('0'); // convert the key value from char to int
		int binary[4]={0,0,0,0};
		for (int i=3; i>=0 ;i--){ // obtain the binary number of the key
 238:	11 97       	sbiw	r26, 0x01	; 1
 23a:	b3 cf       	rjmp	.-154    	; 0x1a2 <_ZN7Key_Pad3LedEv+0x56>
					LED_PORT = LED_PORT & (~(1<<i)); // 0 >> LED off
				}
			}
		}
	}
}
 23c:	28 96       	adiw	r28, 0x08	; 8
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <main>:
 
 int main(void)
 {
	 while (1)
	 {
		 keyin.Led(); // calling the Led() function repeatedly
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN7Key_Pad3LedEv>
 256:	fb cf       	rjmp	.-10     	; 0x24e <main>

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
