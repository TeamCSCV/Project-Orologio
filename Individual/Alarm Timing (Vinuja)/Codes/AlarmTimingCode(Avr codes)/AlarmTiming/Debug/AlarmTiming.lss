
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080011a  0080011a  000009c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001930  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c35  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bca  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00003c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088e  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce2  00000000  00000000  000047ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 34       	cpi	r26, 0x4D	; 77
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 df 02 	call	0x5be	; 0x5be <main>
  9e:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z14ds1307_dec2bcdh>:
#define F_CPU 8000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  a6:	9d ec       	ldi	r25, 0xCD	; 205
  a8:	89 9f       	mul	r24, r25
  aa:	91 2d       	mov	r25, r1
  ac:	11 24       	eor	r1, r1
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	96 95       	lsr	r25
  b4:	29 2f       	mov	r18, r25
  b6:	22 0f       	add	r18, r18
  b8:	92 0f       	add	r25, r18
  ba:	29 2f       	mov	r18, r25
  bc:	22 0f       	add	r18, r18
}
  be:	82 0f       	add	r24, r18
  c0:	08 95       	ret

000000c2 <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	35 95       	asr	r19
  cc:	27 95       	ror	r18
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	92 2f       	mov	r25, r18
  d8:	99 0f       	add	r25, r25
  da:	29 0f       	add	r18, r25
  dc:	92 2f       	mov	r25, r18
  de:	99 0f       	add	r25, r25
}
  e0:	89 1b       	sub	r24, r25
  e2:	08 95       	ret

000000e4 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
  e4:	0e 94 12 01 	call	0x224	; 0x224 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z11ds1307_initv+0x6>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
  f2:	cf 92       	push	r12
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	c8 2f       	mov	r28, r24
 102:	d6 2f       	mov	r29, r22
 104:	14 2f       	mov	r17, r20
 106:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
 108:	80 ed       	ldi	r24, 0xD0	; 208
 10a:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14i2c_start_waith>
	i2c_write(0x00);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
 114:	8c 2d       	mov	r24, r12
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 11a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
 11e:	8e 2d       	mov	r24, r14
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 124:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
 128:	80 2f       	mov	r24, r16
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 12e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
 132:	8f 2d       	mov	r24, r15
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 138:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
 13c:	81 2f       	mov	r24, r17
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 142:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
 146:	8d 2f       	mov	r24, r29
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 14c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 156:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(0x00);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_stop();
 160:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z8i2c_stopv>
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	cf 90       	pop	r12
 172:	08 95       	ret

00000174 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 174:	6f 92       	push	r6
 176:	7f 92       	push	r7
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	3b 01       	movw	r6, r22
 194:	5a 01       	movw	r10, r20
 196:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
 198:	80 ed       	ldi	r24, 0xD0	; 208
 19a:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14i2c_start_waith>
	i2c_write(0x00);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_stop();
 1a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
 1a8:	81 ed       	ldi	r24, 0xD1	; 209
 1aa:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
 1ae:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1b8:	f6 01       	movw	r30, r12
 1ba:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
 1bc:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1c0:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1c4:	f7 01       	movw	r30, r14
 1c6:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
 1c8:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
 1d4:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1dc:	f4 01       	movw	r30, r8
 1de:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
 1e0:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1e4:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1e8:	f5 01       	movw	r30, r10
 1ea:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
 1ec:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1f4:	f3 01       	movw	r30, r6
 1f6:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
 1f8:	0e 94 8c 01 	call	0x318	; 0x318 <_Z11i2c_readNakv>
 1fc:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 200:	88 83       	st	Y, r24
	i2c_stop();
 202:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z8i2c_stopv>
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	af 90       	pop	r10
 21a:	9f 90       	pop	r9
 21c:	8f 90       	pop	r8
 21e:	7f 90       	pop	r7
 220:	6f 90       	pop	r6
 222:	08 95       	ret

00000224 <_Z8i2c_initv>:
 224:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 22e:	08 95       	ret

00000230 <_Z9i2c_starth>:
 230:	94 ea       	ldi	r25, 0xA4	; 164
 232:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 236:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	99 23       	and	r25, r25
 23c:	e4 f7       	brge	.-8      	; 0x236 <_Z9i2c_starth+0x6>
 23e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 242:	98 7f       	andi	r25, 0xF8	; 248
 244:	98 30       	cpi	r25, 0x08	; 8
 246:	11 f0       	breq	.+4      	; 0x24c <_Z9i2c_starth+0x1c>
 248:	90 31       	cpi	r25, 0x10	; 16
 24a:	91 f4       	brne	.+36     	; 0x270 <_Z9i2c_starth+0x40>
 24c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 256:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25a:	88 23       	and	r24, r24
 25c:	e4 f7       	brge	.-8      	; 0x256 <_Z9i2c_starth+0x26>
 25e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 262:	88 7f       	andi	r24, 0xF8	; 248
 264:	88 31       	cpi	r24, 0x18	; 24
 266:	31 f0       	breq	.+12     	; 0x274 <_Z9i2c_starth+0x44>
 268:	80 34       	cpi	r24, 0x40	; 64
 26a:	31 f4       	brne	.+12     	; 0x278 <_Z9i2c_starth+0x48>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	08 95       	ret

0000027c <_Z14i2c_start_waith>:
 27c:	94 ea       	ldi	r25, 0xA4	; 164
 27e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 282:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 286:	99 23       	and	r25, r25
 288:	e4 f7       	brge	.-8      	; 0x282 <_Z14i2c_start_waith+0x6>
 28a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 28e:	98 7f       	andi	r25, 0xF8	; 248
 290:	98 30       	cpi	r25, 0x08	; 8
 292:	11 f0       	breq	.+4      	; 0x298 <_Z14i2c_start_waith+0x1c>
 294:	90 31       	cpi	r25, 0x10	; 16
 296:	91 f7       	brne	.-28     	; 0x27c <_Z14i2c_start_waith>
 298:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 29c:	94 e8       	ldi	r25, 0x84	; 132
 29e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a6:	99 23       	and	r25, r25
 2a8:	e4 f7       	brge	.-8      	; 0x2a2 <_Z14i2c_start_waith+0x26>
 2aa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ae:	98 7f       	andi	r25, 0xF8	; 248
 2b0:	90 32       	cpi	r25, 0x20	; 32
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <_Z14i2c_start_waith+0x3c>
 2b4:	98 35       	cpi	r25, 0x58	; 88
 2b6:	41 f4       	brne	.+16     	; 0x2c8 <_Z14i2c_start_waith+0x4c>
 2b8:	94 e9       	ldi	r25, 0x94	; 148
 2ba:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2be:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c2:	94 fd       	sbrc	r25, 4
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <_Z14i2c_start_waith+0x42>
 2c6:	da cf       	rjmp	.-76     	; 0x27c <_Z14i2c_start_waith>
 2c8:	08 95       	ret

000002ca <_Z13i2c_rep_starth>:
 2ca:	0e 94 18 01 	call	0x230	; 0x230 <_Z9i2c_starth>
 2ce:	08 95       	ret

000002d0 <_Z8i2c_stopv>:
 2d0:	84 e9       	ldi	r24, 0x94	; 148
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2da:	84 fd       	sbrc	r24, 4
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <_Z8i2c_stopv+0x6>
 2de:	08 95       	ret

000002e0 <_Z9i2c_writeh>:
 2e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ee:	88 23       	and	r24, r24
 2f0:	e4 f7       	brge	.-8      	; 0x2ea <_Z9i2c_writeh+0xa>
 2f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2f6:	88 7f       	andi	r24, 0xF8	; 248
 2f8:	88 32       	cpi	r24, 0x28	; 40
 2fa:	11 f0       	breq	.+4      	; 0x300 <_Z9i2c_writeh+0x20>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	08 95       	ret
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret

00000304 <_Z11i2c_readAckv>:
 304:	84 ec       	ldi	r24, 0xC4	; 196
 306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 30a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 30e:	88 23       	and	r24, r24
 310:	e4 f7       	brge	.-8      	; 0x30a <_Z11i2c_readAckv+0x6>
 312:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 316:	08 95       	ret

00000318 <_Z11i2c_readNakv>:
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 31e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 322:	88 23       	and	r24, r24
 324:	e4 f7       	brge	.-8      	; 0x31e <_Z11i2c_readNakv+0x6>
 326:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 32a:	08 95       	ret

0000032c <_Z3LEDc>:
int temp = 0;
int alarmTime = 0;
int clockTime[6];

void LED(char P){
	PORTB|=1<<P;
 32c:	45 b1       	in	r20, 0x05	; 5
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <_Z3LEDc+0xe>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <_Z3LEDc+0xa>
 33e:	cb 01       	movw	r24, r22
 340:	46 2b       	or	r20, r22
 342:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	7f e9       	ldi	r23, 0x9F	; 159
 346:	26 e8       	ldi	r18, 0x86	; 134
 348:	31 e0       	ldi	r19, 0x01	; 1
 34a:	71 50       	subi	r23, 0x01	; 1
 34c:	20 40       	sbci	r18, 0x00	; 0
 34e:	30 40       	sbci	r19, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <_Z3LEDc+0x1e>
 352:	00 c0       	rjmp	.+0      	; 0x354 <_Z3LEDc+0x28>
 354:	00 00       	nop
	_delay_ms(500);
	PORTB&=~(1<<P);
 356:	95 b1       	in	r25, 0x05	; 5
 358:	80 95       	com	r24
 35a:	89 23       	and	r24, r25
 35c:	85 b9       	out	0x05, r24	; 5
 35e:	4f e9       	ldi	r20, 0x9F	; 159
 360:	66 e8       	ldi	r22, 0x86	; 134
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	41 50       	subi	r20, 0x01	; 1
 366:	60 40       	sbci	r22, 0x00	; 0
 368:	70 40       	sbci	r23, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <_Z3LEDc+0x38>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <_Z3LEDc+0x42>
 36e:	00 00       	nop
 370:	08 95       	ret

00000372 <_Z12getAlarmTimev>:
	_delay_ms(500);
}
void getAlarmTime(){
	if (btnPress(PIND1)){
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 31 03 	call	0x662	; 0x662 <_Z8btnPressh>
 378:	88 23       	and	r24, r24
 37a:	49 f1       	breq	.+82     	; 0x3ce <_Z12getAlarmTimev+0x5c>
		if(data==9){
 37c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <data>
 380:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <data+0x1>
 384:	09 97       	sbiw	r24, 0x09	; 9
 386:	71 f4       	brne	.+28     	; 0x3a4 <_Z12getAlarmTimev+0x32>
			data=0;
 388:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data+0x1>
 38c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <data>
 390:	2f e9       	ldi	r18, 0x9F	; 159
 392:	46 e8       	ldi	r20, 0x86	; 134
 394:	51 e0       	ldi	r21, 0x01	; 1
 396:	21 50       	subi	r18, 0x01	; 1
 398:	40 40       	sbci	r20, 0x00	; 0
 39a:	50 40       	sbci	r21, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <_Z12getAlarmTimev+0x24>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <_Z12getAlarmTimev+0x2e>
 3a0:	00 00       	nop
 3a2:	15 c0       	rjmp	.+42     	; 0x3ce <_Z12getAlarmTimev+0x5c>
			_delay_ms(500);
		}else{
			LED(PORTB1);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 96 01 	call	0x32c	; 0x32c <_Z3LEDc>
			data++;
 3aa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <data>
 3ae:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <data+0x1>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <data+0x1>
 3b8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <data>
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	96 e8       	ldi	r25, 0x86	; 134
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	20 40       	sbci	r18, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <_Z12getAlarmTimev+0x50>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_Z12getAlarmTimev+0x5a>
 3cc:	00 00       	nop
			_delay_ms(500);	
		}
		
	}
	if (btnPress(PIND3)){
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 31 03 	call	0x662	; 0x662 <_Z8btnPressh>
 3d4:	88 23       	and	r24, r24
 3d6:	b9 f1       	breq	.+110    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		LED(PORTB2);
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 96 01 	call	0x32c	; 0x32c <_Z3LEDc>
		alarmTime += data*powerOf(10,AlarmState);
 3de:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 1f 03 	call	0x63e	; 0x63e <_Z7powerOfii>
 3ee:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <data>
 3f2:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <data+0x1>
 3f6:	ac 01       	movw	r20, r24
 3f8:	42 9f       	mul	r20, r18
 3fa:	c0 01       	movw	r24, r0
 3fc:	43 9f       	mul	r20, r19
 3fe:	90 0d       	add	r25, r0
 400:	52 9f       	mul	r21, r18
 402:	90 0d       	add	r25, r0
 404:	11 24       	eor	r1, r1
 406:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <alarmTime>
 40a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <alarmTime+0x1>
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
 412:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <alarmTime+0x1>
 416:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <alarmTime>
		AlarmState--;
 41a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 428:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		data=0;
 42c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data+0x1>
 430:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <data>
 434:	5f e9       	ldi	r21, 0x9F	; 159
 436:	86 e8       	ldi	r24, 0x86	; 134
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	51 50       	subi	r21, 0x01	; 1
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
		_delay_ms(500);
	}
	if (AlarmState == -1){
 446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	e9 f4       	brne	.+58     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		setAlarm(alarmTime);
 452:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <alarmTime>
 456:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <alarmTime+0x1>
 45a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_Z8setAlarmi>
		AlarmState = 3;
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 466:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		alarmTime = 0;
 46a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <alarmTime+0x1>
 46e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <alarmTime>
		mode = 0;
 472:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <mode+0x1>
 476:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <mode>
 47a:	4f e9       	ldi	r20, 0x9F	; 159
 47c:	56 e8       	ldi	r21, 0x86	; 134
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	41 50       	subi	r20, 0x01	; 1
 482:	50 40       	sbci	r21, 0x00	; 0
 484:	80 40       	sbci	r24, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48a:	00 00       	nop
 48c:	08 95       	ret

0000048e <_Z12getClockTimev>:
		_delay_ms(500);
	}
}
void getClockTime(){
	if (btnPress(PIND1)){
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 31 03 	call	0x662	; 0x662 <_Z8btnPressh>
 494:	88 23       	and	r24, r24
 496:	49 f1       	breq	.+82     	; 0x4ea <_Z12getClockTimev+0x5c>
		if(data==9){
 498:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <data>
 49c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <data+0x1>
 4a0:	09 97       	sbiw	r24, 0x09	; 9
 4a2:	71 f4       	brne	.+28     	; 0x4c0 <_Z12getClockTimev+0x32>
			data=0;
 4a4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data+0x1>
 4a8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <data>
 4ac:	2f e9       	ldi	r18, 0x9F	; 159
 4ae:	86 e8       	ldi	r24, 0x86	; 134
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <_Z12getClockTimev+0x24>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <_Z12getClockTimev+0x2e>
 4bc:	00 00       	nop
 4be:	15 c0       	rjmp	.+42     	; 0x4ea <_Z12getClockTimev+0x5c>
			_delay_ms(500);
			}else{
			LED(PORTB1);
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 96 01 	call	0x32c	; 0x32c <_Z3LEDc>
			data++;
 4c6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <data>
 4ca:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <data+0x1>
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <data+0x1>
 4d4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <data>
 4d8:	2f e9       	ldi	r18, 0x9F	; 159
 4da:	86 e8       	ldi	r24, 0x86	; 134
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <_Z12getClockTimev+0x50>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_Z12getClockTimev+0x5a>
 4e8:	00 00       	nop
			_delay_ms(500);
		}
		
	}
	if (btnPress(PIND3)){
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	0e 94 31 03 	call	0x662	; 0x662 <_Z8btnPressh>
 4f0:	88 23       	and	r24, r24
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <_Z12getClockTimev+0x68>
 4f4:	48 c0       	rjmp	.+144    	; 0x586 <_Z12getClockTimev+0xf8>
		LED(PORTB2);
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	0e 94 96 01 	call	0x32c	; 0x32c <_Z3LEDc>
		if (temp == 0){
 4fc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <temp>
 500:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <temp+0x1>
 504:	89 2b       	or	r24, r25
 506:	d1 f4       	brne	.+52     	; 0x53c <_Z12getClockTimev+0xae>
			data*=10;
 508:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <data>
 50c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <data+0x1>
 510:	9c 01       	movw	r18, r24
 512:	22 0f       	add	r18, r18
 514:	33 1f       	adc	r19, r19
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	82 0f       	add	r24, r18
 524:	93 1f       	adc	r25, r19
 526:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <data+0x1>
 52a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <data>
			temp = 1;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <temp+0x1>
 536:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <temp>
 53a:	1c c0       	rjmp	.+56     	; 0x574 <_Z12getClockTimev+0xe6>
		}
		else{
			clockTime[ClockState] = data;
 53c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ClockState>
 540:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ClockState+0x1>
 544:	fc 01       	movw	r30, r24
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	e6 5e       	subi	r30, 0xE6	; 230
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <data>
 552:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <data+0x1>
 556:	31 83       	std	Z+1, r19	; 0x01
 558:	20 83       	st	Z, r18
			ClockState++;
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <ClockState+0x1>
 560:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <ClockState>
			data=0;
 564:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data+0x1>
 568:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <data>
			temp = 0;
 56c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <temp+0x1>
 570:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <temp>
 574:	2f e9       	ldi	r18, 0x9F	; 159
 576:	86 e8       	ldi	r24, 0x86	; 134
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <_Z12getClockTimev+0xec>
 582:	00 c0       	rjmp	.+0      	; 0x584 <_Z12getClockTimev+0xf6>
 584:	00 00       	nop
		}
		_delay_ms(500);
	}
	if (ClockState == 6){
 586:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ClockState>
 58a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ClockState+0x1>
 58e:	06 97       	sbiw	r24, 0x06	; 6
 590:	a9 f4       	brne	.+42     	; 0x5bc <_Z12getClockTimev+0x12e>
		setClockTime(clockTime);
 592:	8a e1       	ldi	r24, 0x1A	; 26
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 39 04 	call	0x872	; 0x872 <_Z12setClockTimePi>
		ClockState = 0;
 59a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ClockState+0x1>
 59e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ClockState>
		mode = 0;
 5a2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <mode+0x1>
 5a6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <mode>
 5aa:	2f e9       	ldi	r18, 0x9F	; 159
 5ac:	86 e8       	ldi	r24, 0x86	; 134
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <_Z12getClockTimev+0x122>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <_Z12getClockTimev+0x12c>
 5ba:	00 00       	nop
 5bc:	08 95       	ret

000005be <main>:
		_delay_ms(500);
	}
}
int main(void)
{
	ds1307_init();
 5be:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z11ds1307_initv>
	while (1)
	{
		checkAlarm();
 5c2:	0e 94 83 03 	call	0x706	; 0x706 <_Z10checkAlarmv>
		if (btnPress(PIND7)){
 5c6:	87 e0       	ldi	r24, 0x07	; 7
 5c8:	0e 94 31 03 	call	0x662	; 0x662 <_Z8btnPressh>
 5cc:	88 23       	and	r24, r24
 5ce:	31 f1       	breq	.+76     	; 0x61c <main+0x5e>
			if(mode==2){
 5d0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mode>
 5d4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode+0x1>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	91 05       	cpc	r25, r1
 5dc:	71 f4       	brne	.+28     	; 0x5fa <main+0x3c>
				mode=0;
 5de:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <mode+0x1>
 5e2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <mode>
 5e6:	2f e9       	ldi	r18, 0x9F	; 159
 5e8:	86 e8       	ldi	r24, 0x86	; 134
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	21 50       	subi	r18, 0x01	; 1
 5ee:	80 40       	sbci	r24, 0x00	; 0
 5f0:	90 40       	sbci	r25, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <main+0x2e>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <main+0x38>
 5f6:	00 00       	nop
 5f8:	11 c0       	rjmp	.+34     	; 0x61c <main+0x5e>
				_delay_ms(500);
			}else{
				mode++;
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <mode+0x1>
 600:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <mode>
				LED(PORTB3);
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0e 94 96 01 	call	0x32c	; 0x32c <_Z3LEDc>
 60a:	2f e9       	ldi	r18, 0x9F	; 159
 60c:	86 e8       	ldi	r24, 0x86	; 134
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	21 50       	subi	r18, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <main+0x52>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x5c>
 61a:	00 00       	nop
				_delay_ms(500);
			}
		}
		if (mode == 1){
 61c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mode>
 620:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode+0x1>
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	11 f4       	brne	.+4      	; 0x62c <main+0x6e>
			getAlarmTime();
 628:	0e 94 b9 01 	call	0x372	; 0x372 <_Z12getAlarmTimev>
		}
		if (mode == 2){
 62c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <mode>
 630:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode+0x1>
 634:	02 97       	sbiw	r24, 0x02	; 2
 636:	29 f6       	brne	.-118    	; 0x5c2 <main+0x4>
			getClockTime();
 638:	0e 94 47 02 	call	0x48e	; 0x48e <_Z12getClockTimev>
 63c:	c2 cf       	rjmp	.-124    	; 0x5c2 <main+0x4>

0000063e <_Z7powerOfii>:
uint8_t day = 0;
uint8_t dayofweek = 0;
uint8_t hour = 0;
uint8_t minute = 0;
uint8_t second = 0;
int powerOf(int base, int power){
 63e:	9c 01       	movw	r18, r24
	int result = 1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
	while(power!=0){
 644:	61 15       	cp	r22, r1
 646:	71 05       	cpc	r23, r1
 648:	59 f0       	breq	.+22     	; 0x660 <_Z7powerOfii+0x22>
		result*=base;
 64a:	ac 01       	movw	r20, r24
 64c:	42 9f       	mul	r20, r18
 64e:	c0 01       	movw	r24, r0
 650:	43 9f       	mul	r20, r19
 652:	90 0d       	add	r25, r0
 654:	52 9f       	mul	r21, r18
 656:	90 0d       	add	r25, r0
 658:	11 24       	eor	r1, r1
		power--;
 65a:	61 50       	subi	r22, 0x01	; 1
 65c:	71 09       	sbc	r23, r1
uint8_t hour = 0;
uint8_t minute = 0;
uint8_t second = 0;
int powerOf(int base, int power){
	int result = 1;
	while(power!=0){
 65e:	f2 cf       	rjmp	.-28     	; 0x644 <_Z7powerOfii+0x6>
		result*=base;
		power--;
	}
	return result;
	
}
 660:	08 95       	ret

00000662 <_Z8btnPressh>:
bool btnPress(uint8_t p){
	if (PIND == 1<< p){
 662:	49 b1       	in	r20, 0x09	; 9
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	21 e0       	ldi	r18, 0x01	; 1
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <_Z8btnPressh+0xe>
 66c:	22 0f       	add	r18, r18
 66e:	33 1f       	adc	r19, r19
 670:	8a 95       	dec	r24
 672:	e2 f7       	brpl	.-8      	; 0x66c <_Z8btnPressh+0xa>
 674:	42 17       	cp	r20, r18
 676:	53 07       	cpc	r21, r19
 678:	11 f4       	brne	.+4      	; 0x67e <_Z8btnPressh+0x1c>
		return true;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret
	}
	else{
		return false;
 67e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 680:	08 95       	ret

00000682 <_Z9ringAlarmv>:
void ringAlarm(){
	DDRB |= 1<<PORTB0;
 682:	84 b1       	in	r24, 0x04	; 4
 684:	81 60       	ori	r24, 0x01	; 1
 686:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<PORTB0;
 688:	85 b1       	in	r24, 0x05	; 5
 68a:	81 60       	ori	r24, 0x01	; 1
 68c:	85 b9       	out	0x05, r24	; 5
 68e:	2f ef       	ldi	r18, 0xFF	; 255
 690:	8a e1       	ldi	r24, 0x1A	; 26
 692:	97 eb       	ldi	r25, 0xB7	; 183
 694:	21 50       	subi	r18, 0x01	; 1
 696:	80 40       	sbci	r24, 0x00	; 0
 698:	90 40       	sbci	r25, 0x00	; 0
 69a:	e1 f7       	brne	.-8      	; 0x694 <_Z9ringAlarmv+0x12>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <_Z9ringAlarmv+0x1c>
 69e:	00 00       	nop
	_delay_ms(60000);
	PORTB = 0;
 6a0:	15 b8       	out	0x05, r1	; 5
 6a2:	08 95       	ret

000006a4 <_Z8setAlarmi>:
}
void setAlarm(int alarm_time){
	alarmArray[numberOfAlarms] = alarm_time;
 6a4:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <numberOfAlarms>
 6a8:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <numberOfAlarms+0x1>
 6ac:	f9 01       	movw	r30, r18
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	e9 5c       	subi	r30, 0xC9	; 201
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	91 83       	std	Z+1, r25	; 0x01
 6b8:	80 83       	st	Z, r24
	numberOfAlarms++;
 6ba:	2f 5f       	subi	r18, 0xFF	; 255
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	30 93 4c 01 	sts	0x014C, r19	; 0x80014c <numberOfAlarms+0x1>
 6c2:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <numberOfAlarms>
 6c6:	08 95       	ret

000006c8 <_Z16updateAlarmArrayi>:
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <numberOfAlarms>
 6d0:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <numberOfAlarms+0x1>
 6d4:	24 17       	cp	r18, r20
 6d6:	35 07       	cpc	r19, r21
 6d8:	ac f4       	brge	.+42     	; 0x704 <_Z16updateAlarmArrayi+0x3c>
		if (i<removeAlarm){
 6da:	28 17       	cp	r18, r24
 6dc:	39 07       	cpc	r19, r25
 6de:	7c f0       	brlt	.+30     	; 0x6fe <_Z16updateAlarmArrayi+0x36>
			alarmArray[i] = alarmArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
 6e0:	f9 01       	movw	r30, r18
 6e2:	31 96       	adiw	r30, 0x01	; 1
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	e9 5c       	subi	r30, 0xC9	; 201
 6ea:	fe 4f       	sbci	r31, 0xFE	; 254
 6ec:	40 81       	ld	r20, Z
 6ee:	51 81       	ldd	r21, Z+1	; 0x01
 6f0:	f9 01       	movw	r30, r18
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	e9 5c       	subi	r30, 0xC9	; 201
 6f8:	fe 4f       	sbci	r31, 0xFE	; 254
 6fa:	51 83       	std	Z+1, r21	; 0x01
 6fc:	40 83       	st	Z, r20
void setAlarm(int alarm_time){
	alarmArray[numberOfAlarms] = alarm_time;
	numberOfAlarms++;
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
 6fe:	2f 5f       	subi	r18, 0xFF	; 255
 700:	3f 4f       	sbci	r19, 0xFF	; 255
 702:	e4 cf       	rjmp	.-56     	; 0x6cc <_Z16updateAlarmArrayi+0x4>
 704:	08 95       	ret

00000706 <_Z10checkAlarmv>:
		else{
			alarmArray[i] = alarmArray[i+1];
		}
	}
}
void checkAlarm(){
 706:	cf 92       	push	r12
 708:	df 92       	push	r13
 70a:	ef 92       	push	r14
 70c:	ff 92       	push	r15
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
	if (numberOfAlarms != 0){
 716:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <numberOfAlarms>
 71a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <numberOfAlarms+0x1>
 71e:	89 2b       	or	r24, r25
 720:	09 f4       	brne	.+2      	; 0x724 <_Z10checkAlarmv+0x1e>
 722:	4e c0       	rjmp	.+156    	; 0x7c0 <_Z10checkAlarmv+0xba>
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
 724:	0f 2e       	mov	r0, r31
 726:	f0 e3       	ldi	r31, 0x30	; 48
 728:	cf 2e       	mov	r12, r31
 72a:	f1 e0       	ldi	r31, 0x01	; 1
 72c:	df 2e       	mov	r13, r31
 72e:	f0 2d       	mov	r31, r0
 730:	0f 2e       	mov	r0, r31
 732:	f1 e3       	ldi	r31, 0x31	; 49
 734:	ef 2e       	mov	r14, r31
 736:	f1 e0       	ldi	r31, 0x01	; 1
 738:	ff 2e       	mov	r15, r31
 73a:	f0 2d       	mov	r31, r0
 73c:	02 e3       	ldi	r16, 0x32	; 50
 73e:	11 e0       	ldi	r17, 0x01	; 1
 740:	23 e3       	ldi	r18, 0x33	; 51
 742:	31 e0       	ldi	r19, 0x01	; 1
 744:	44 e3       	ldi	r20, 0x34	; 52
 746:	51 e0       	ldi	r21, 0x01	; 1
 748:	65 e3       	ldi	r22, 0x35	; 53
 74a:	71 e0       	ldi	r23, 0x01	; 1
 74c:	86 e3       	ldi	r24, 0x36	; 54
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	0e 94 ba 00 	call	0x174	; 0x174 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
		for (int i = 0; i <= numberOfAlarms;i++){
 754:	c0 e0       	ldi	r28, 0x00	; 0
 756:	d0 e0       	ldi	r29, 0x00	; 0
 758:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <numberOfAlarms>
 75c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <numberOfAlarms+0x1>
 760:	8c 17       	cp	r24, r28
 762:	9d 07       	cpc	r25, r29
 764:	6c f1       	brlt	.+90     	; 0x7c0 <_Z10checkAlarmv+0xba>
			if (alarmArray[i]/100 == hour && alarmArray[i]%100 == minute){
 766:	fe 01       	movw	r30, r28
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	e9 5c       	subi	r30, 0xC9	; 201
 76e:	fe 4f       	sbci	r31, 0xFE	; 254
 770:	20 81       	ld	r18, Z
 772:	31 81       	ldd	r19, Z+1	; 0x01
 774:	c9 01       	movw	r24, r18
 776:	64 e6       	ldi	r22, 0x64	; 100
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	0e 94 5f 04 	call	0x8be	; 0x8be <__divmodhi4>
 77e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <hour>
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	68 17       	cp	r22, r24
 786:	79 07       	cpc	r23, r25
 788:	c9 f4       	brne	.+50     	; 0x7bc <_Z10checkAlarmv+0xb6>
 78a:	c9 01       	movw	r24, r18
 78c:	64 e6       	ldi	r22, 0x64	; 100
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	0e 94 5f 04 	call	0x8be	; 0x8be <__divmodhi4>
 794:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <minute>
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	82 17       	cp	r24, r18
 79c:	93 07       	cpc	r25, r19
 79e:	71 f4       	brne	.+28     	; 0x7bc <_Z10checkAlarmv+0xb6>
				ringAlarm();
 7a0:	0e 94 41 03 	call	0x682	; 0x682 <_Z9ringAlarmv>
				updateAlarmArray(i);
 7a4:	ce 01       	movw	r24, r28
 7a6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_Z16updateAlarmArrayi>
				numberOfAlarms--;
 7aa:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <numberOfAlarms>
 7ae:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <numberOfAlarms+0x1>
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <numberOfAlarms+0x1>
 7b8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <numberOfAlarms>
	}
}
void checkAlarm(){
	if (numberOfAlarms != 0){
		ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
		for (int i = 0; i <= numberOfAlarms;i++){
 7bc:	21 96       	adiw	r28, 0x01	; 1
 7be:	cc cf       	rjmp	.-104    	; 0x758 <_Z10checkAlarmv+0x52>
				numberOfAlarms--;
			}
		}
		
	}
}
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	08 95       	ret

000007d2 <_Z6getDayiii>:
	int h = clockTime[3];
	int M = clockTime[4];
	int s = clockTime[5];
	ds1307_setdate(y, m, d, D, h, M, s);
}
int getDay(int y, int m, int d){
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
 7d8:	21 e0       	ldi	r18, 0x01	; 1
 7da:	30 e0       	ldi	r19, 0x00	; 0
	int M = clockTime[4];
	int s = clockTime[5];
	ds1307_setdate(y, m, d, D, h, M, s);
}
int getDay(int y, int m, int d){
	int days = 0;
 7dc:	e0 e0       	ldi	r30, 0x00	; 0
 7de:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
 7e0:	c2 17       	cp	r28, r18
 7e2:	d3 07       	cpc	r29, r19
 7e4:	6c f0       	brlt	.+26     	; 0x800 <__DATA_REGION_LENGTH__>
		if (i%4 == 0){
 7e6:	c9 01       	movw	r24, r18
 7e8:	83 70       	andi	r24, 0x03	; 3
 7ea:	99 27       	eor	r25, r25
 7ec:	89 2b       	or	r24, r25
 7ee:	19 f4       	brne	.+6      	; 0x7f6 <_Z6getDayiii+0x24>
			days+= 366;
 7f0:	e2 59       	subi	r30, 0x92	; 146
 7f2:	fe 4f       	sbci	r31, 0xFE	; 254
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
 7f6:	e3 59       	subi	r30, 0x93	; 147
 7f8:	fe 4f       	sbci	r31, 0xFE	; 254
	int s = clockTime[5];
	ds1307_setdate(y, m, d, D, h, M, s);
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	f0 cf       	rjmp	.-32     	; 0x7e0 <_Z6getDayiii+0xe>
 800:	20 e0       	ldi	r18, 0x00	; 0
 802:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
 804:	db 01       	movw	r26, r22
 806:	11 97       	sbiw	r26, 0x01	; 1
 808:	2a 17       	cp	r18, r26
 80a:	3b 07       	cpc	r19, r27
 80c:	3c f5       	brge	.+78     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		if ((y%4==0) & (j == 1)){
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	de 01       	movw	r26, r28
 812:	a3 70       	andi	r26, 0x03	; 3
 814:	bb 27       	eor	r27, r27
 816:	ab 2b       	or	r26, r27
 818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	99 23       	and	r25, r25
 81e:	91 f0       	breq	.+36     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	21 30       	cpi	r18, 0x01	; 1
 824:	31 05       	cpc	r19, r1
 826:	09 f0       	breq	.+2      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	99 23       	and	r25, r25
 82c:	59 f0       	breq	.+22     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			days+=monthsDays[j];
 82e:	d9 01       	movw	r26, r18
 830:	aa 0f       	add	r26, r26
 832:	bb 1f       	adc	r27, r27
 834:	ae 5f       	subi	r26, 0xFE	; 254
 836:	be 4f       	sbci	r27, 0xFE	; 254
 838:	8d 91       	ld	r24, X+
 83a:	9c 91       	ld	r25, X
 83c:	e8 0f       	add	r30, r24
 83e:	f9 1f       	adc	r31, r25
			days+=1;
 840:	31 96       	adiw	r30, 0x01	; 1
 842:	09 c0       	rjmp	.+18     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
		}
		else{
			days +=monthsDays[j];
 844:	d9 01       	movw	r26, r18
 846:	aa 0f       	add	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	ae 5f       	subi	r26, 0xFE	; 254
 84c:	be 4f       	sbci	r27, 0xFE	; 254
 84e:	8d 91       	ld	r24, X+
 850:	9c 91       	ld	r25, X
 852:	e8 0f       	add	r30, r24
 854:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	d4 cf       	rjmp	.-88     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
 85c:	4e 0f       	add	r20, r30
 85e:	5f 1f       	adc	r21, r31
 860:	ca 01       	movw	r24, r20
 862:	05 96       	adiw	r24, 0x05	; 5
 864:	67 e0       	ldi	r22, 0x07	; 7
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	0e 94 5f 04 	call	0x8be	; 0x8be <__divmodhi4>
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	08 95       	ret

00000872 <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
 872:	cf 92       	push	r12
 874:	df 92       	push	r13
 876:	ef 92       	push	r14
 878:	ff 92       	push	r15
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	ec 01       	movw	r28, r24
	int y = clockTime[0];
 884:	18 81       	ld	r17, Y
	int m = clockTime[1];
 886:	fa 80       	ldd	r15, Y+2	; 0x02
 888:	7b 81       	ldd	r23, Y+3	; 0x03
	int d = clockTime[2];
 88a:	dc 80       	ldd	r13, Y+4	; 0x04
 88c:	5d 81       	ldd	r21, Y+5	; 0x05
	int D = getDay(y,m,d);
 88e:	4d 2d       	mov	r20, r13
 890:	6f 2d       	mov	r22, r15
 892:	81 2f       	mov	r24, r17
 894:	99 81       	ldd	r25, Y+1	; 0x01
 896:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z6getDayiii>
	int h = clockTime[3];
 89a:	0e 81       	ldd	r16, Y+6	; 0x06
	int M = clockTime[4];
 89c:	e8 84       	ldd	r14, Y+8	; 0x08
	int s = clockTime[5];
 89e:	ca 84       	ldd	r12, Y+10	; 0x0a
	ds1307_setdate(y, m, d, D, h, M, s);
 8a0:	28 2f       	mov	r18, r24
 8a2:	4d 2d       	mov	r20, r13
 8a4:	6f 2d       	mov	r22, r15
 8a6:	81 2f       	mov	r24, r17
 8a8:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z14ds1307_setdatehhhhhhh>
}
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	1f 91       	pop	r17
 8b2:	0f 91       	pop	r16
 8b4:	ff 90       	pop	r15
 8b6:	ef 90       	pop	r14
 8b8:	df 90       	pop	r13
 8ba:	cf 90       	pop	r12
 8bc:	08 95       	ret

000008be <__divmodhi4>:
 8be:	97 fb       	bst	r25, 7
 8c0:	07 2e       	mov	r0, r23
 8c2:	16 f4       	brtc	.+4      	; 0x8c8 <__divmodhi4+0xa>
 8c4:	00 94       	com	r0
 8c6:	07 d0       	rcall	.+14     	; 0x8d6 <__divmodhi4_neg1>
 8c8:	77 fd       	sbrc	r23, 7
 8ca:	09 d0       	rcall	.+18     	; 0x8de <__divmodhi4_neg2>
 8cc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__udivmodhi4>
 8d0:	07 fc       	sbrc	r0, 7
 8d2:	05 d0       	rcall	.+10     	; 0x8de <__divmodhi4_neg2>
 8d4:	3e f4       	brtc	.+14     	; 0x8e4 <__divmodhi4_exit>

000008d6 <__divmodhi4_neg1>:
 8d6:	90 95       	com	r25
 8d8:	81 95       	neg	r24
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	08 95       	ret

000008de <__divmodhi4_neg2>:
 8de:	70 95       	com	r23
 8e0:	61 95       	neg	r22
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255

000008e4 <__divmodhi4_exit>:
 8e4:	08 95       	ret

000008e6 <__udivmodhi4>:
 8e6:	aa 1b       	sub	r26, r26
 8e8:	bb 1b       	sub	r27, r27
 8ea:	51 e1       	ldi	r21, 0x11	; 17
 8ec:	07 c0       	rjmp	.+14     	; 0x8fc <__udivmodhi4_ep>

000008ee <__udivmodhi4_loop>:
 8ee:	aa 1f       	adc	r26, r26
 8f0:	bb 1f       	adc	r27, r27
 8f2:	a6 17       	cp	r26, r22
 8f4:	b7 07       	cpc	r27, r23
 8f6:	10 f0       	brcs	.+4      	; 0x8fc <__udivmodhi4_ep>
 8f8:	a6 1b       	sub	r26, r22
 8fa:	b7 0b       	sbc	r27, r23

000008fc <__udivmodhi4_ep>:
 8fc:	88 1f       	adc	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	5a 95       	dec	r21
 902:	a9 f7       	brne	.-22     	; 0x8ee <__udivmodhi4_loop>
 904:	80 95       	com	r24
 906:	90 95       	com	r25
 908:	bc 01       	movw	r22, r24
 90a:	cd 01       	movw	r24, r26
 90c:	08 95       	ret

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
