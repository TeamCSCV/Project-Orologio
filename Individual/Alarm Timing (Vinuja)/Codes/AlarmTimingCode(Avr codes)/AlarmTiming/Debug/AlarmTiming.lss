
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ff  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2a  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b11  00000000  00000000  000026b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000031cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000873  00000000  00000000  00003c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000449d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2a 02 	call	0x454	; 0x454 <main>
  9e:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZL14ds1307_bcd2dech>:
	i2c_write(ds1307_dec2bcd(year));
	i2c_write(0x00); //start oscillator
	i2c_stop();

	return 1;
}
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	35 95       	asr	r19
  ac:	27 95       	ror	r18
  ae:	35 95       	asr	r19
  b0:	27 95       	ror	r18
  b2:	35 95       	asr	r19
  b4:	27 95       	ror	r18
  b6:	35 95       	asr	r19
  b8:	27 95       	ror	r18
  ba:	92 2f       	mov	r25, r18
  bc:	99 0f       	add	r25, r25
  be:	29 0f       	add	r18, r25
  c0:	92 2f       	mov	r25, r18
  c2:	99 0f       	add	r25, r25
  c4:	89 1b       	sub	r24, r25
  c6:	08 95       	ret

000000c8 <_Z11ds1307_initv>:
  c8:	0e 94 bb 00 	call	0x176	; 0x176 <_Z8i2c_initv>
  cc:	8a e1       	ldi	r24, 0x1A	; 26
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <_Z11ds1307_initv+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_Z11ds1307_initv+0xc>
  d4:	08 95       	ret

000000d6 <_Z14ds1307_getdatePhS_S_S_S_S_>:

/*
 * get date
 */
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
  d6:	8f 92       	push	r8
  d8:	9f 92       	push	r9
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
  f0:	6b 01       	movw	r12, r22
  f2:	5a 01       	movw	r10, r20
  f4:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDR | I2C_WRITE);
  f6:	80 ed       	ldi	r24, 0xD0	; 208
  f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_Z14i2c_start_waith>
	i2c_write(0x00);//stop oscillator
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 19 01 	call	0x232	; 0x232 <_Z9i2c_writeh>
	i2c_stop();
 102:	0e 94 11 01 	call	0x222	; 0x222 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDR | I2C_READ);
 106:	81 ed       	ldi	r24, 0xD1	; 209
 108:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
 10c:	0e 94 2b 01 	call	0x256	; 0x256 <_Z11i2c_readAckv>
 110:	8f 77       	andi	r24, 0x7F	; 127
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL14ds1307_bcd2dech>
 116:	f7 01       	movw	r30, r14
 118:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
 11a:	0e 94 2b 01 	call	0x256	; 0x256 <_Z11i2c_readAckv>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL14ds1307_bcd2dech>
 122:	f8 01       	movw	r30, r16
 124:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
 126:	0e 94 2b 01 	call	0x256	; 0x256 <_Z11i2c_readAckv>
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL14ds1307_bcd2dech>
 12e:	f4 01       	movw	r30, r8
 130:	80 83       	st	Z, r24
	i2c_readAck();
 132:	0e 94 2b 01 	call	0x256	; 0x256 <_Z11i2c_readAckv>
	*day = ds1307_bcd2dec(i2c_readAck());
 136:	0e 94 2b 01 	call	0x256	; 0x256 <_Z11i2c_readAckv>
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL14ds1307_bcd2dech>
 13e:	f5 01       	movw	r30, r10
 140:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
 142:	0e 94 2b 01 	call	0x256	; 0x256 <_Z11i2c_readAckv>
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL14ds1307_bcd2dech>
 14a:	f6 01       	movw	r30, r12
 14c:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
 14e:	0e 94 35 01 	call	0x26a	; 0x26a <_Z11i2c_readNakv>
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZL14ds1307_bcd2dech>
 156:	88 83       	st	Y, r24
	i2c_stop();
 158:	0e 94 11 01 	call	0x222	; 0x222 <_Z8i2c_stopv>
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	df 90       	pop	r13
 16a:	cf 90       	pop	r12
 16c:	bf 90       	pop	r11
 16e:	af 90       	pop	r10
 170:	9f 90       	pop	r9
 172:	8f 90       	pop	r8
 174:	08 95       	ret

00000176 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 176:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 180:	08 95       	ret

00000182 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 182:	94 ea       	ldi	r25, 0xA4	; 164
 184:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 188:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	99 23       	and	r25, r25
 18e:	e4 f7       	brge	.-8      	; 0x188 <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 190:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 194:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 196:	98 30       	cpi	r25, 0x08	; 8
 198:	11 f0       	breq	.+4      	; 0x19e <_Z9i2c_starth+0x1c>
 19a:	90 31       	cpi	r25, 0x10	; 16
 19c:	91 f4       	brne	.+36     	; 0x1c2 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
 19e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 1a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b4:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 1b6:	88 31       	cpi	r24, 0x18	; 24
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <_Z9i2c_starth+0x44>
 1ba:	80 34       	cpi	r24, 0x40	; 64
 1bc:	31 f4       	brne	.+12     	; 0x1ca <_Z9i2c_starth+0x48>

	return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
 1cc:	08 95       	ret

000001ce <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1ce:	94 ea       	ldi	r25, 0xA4	; 164
 1d0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 1d4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d8:	99 23       	and	r25, r25
 1da:	e4 f7       	brge	.-8      	; 0x1d4 <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 1dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1e0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 1e2:	98 30       	cpi	r25, 0x08	; 8
 1e4:	11 f0       	breq	.+4      	; 0x1ea <_Z14i2c_start_waith+0x1c>
 1e6:	90 31       	cpi	r25, 0x10	; 16
 1e8:	91 f7       	brne	.-28     	; 0x1ce <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
 1ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
 1ee:	94 e8       	ldi	r25, 0x84	; 132
 1f0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 1f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f8:	99 23       	and	r25, r25
 1fa:	e4 f7       	brge	.-8      	; 0x1f4 <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 1fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 200:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 202:	90 32       	cpi	r25, 0x20	; 32
 204:	11 f0       	breq	.+4      	; 0x20a <_Z14i2c_start_waith+0x3c>
 206:	98 35       	cpi	r25, 0x58	; 88
 208:	41 f4       	brne	.+16     	; 0x21a <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	94 e9       	ldi	r25, 0x94	; 148
 20c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 210:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 214:	94 fd       	sbrc	r25, 4
 216:	fc cf       	rjmp	.-8      	; 0x210 <_Z14i2c_start_waith+0x42>
 218:	da cf       	rjmp	.-76     	; 0x1ce <_Z14i2c_start_waith>
 21a:	08 95       	ret

0000021c <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 21c:	0e 94 c1 00 	call	0x182	; 0x182 <_Z9i2c_starth>

}/* i2c_rep_start */
 220:	08 95       	ret

00000222 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 222:	84 e9       	ldi	r24, 0x94	; 148
 224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 228:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22c:	84 fd       	sbrc	r24, 4
 22e:	fc cf       	rjmp	.-8      	; 0x228 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
 230:	08 95       	ret

00000232 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 232:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 236:	84 e8       	ldi	r24, 0x84	; 132
 238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 23c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 240:	88 23       	and	r24, r24
 242:	e4 f7       	brge	.-8      	; 0x23c <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 248:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 24a:	88 32       	cpi	r24, 0x28	; 40
 24c:	11 f0       	breq	.+4      	; 0x252 <_Z9i2c_writeh+0x20>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret
	return 0;
 252:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 254:	08 95       	ret

00000256 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 256:	84 ec       	ldi	r24, 0xC4	; 196
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 25c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 260:	88 23       	and	r24, r24
 262:	e4 f7       	brge	.-8      	; 0x25c <_Z11i2c_readAckv+0x6>

    return TWDR;
 264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 268:	08 95       	ret

0000026a <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 26a:	84 e8       	ldi	r24, 0x84	; 132
 26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 270:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 274:	88 23       	and	r24, r24
 276:	e4 f7       	brge	.-8      	; 0x270 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
 278:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 27c:	08 95       	ret

0000027e <_Z3LEDc>:
	
}
void setAlarmTwo(){
	
}
void setAlarmThree(){
 27e:	45 b1       	in	r20, 0x05	; 5
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <_Z3LEDc+0xe>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	8a 95       	dec	r24
 28e:	e2 f7       	brpl	.-8      	; 0x288 <_Z3LEDc+0xa>
 290:	cb 01       	movw	r24, r22
 292:	46 2b       	or	r20, r22
 294:	45 b9       	out	0x05, r20	; 5
 296:	7f e3       	ldi	r23, 0x3F	; 63
 298:	2d e0       	ldi	r18, 0x0D	; 13
 29a:	33 e0       	ldi	r19, 0x03	; 3
 29c:	71 50       	subi	r23, 0x01	; 1
 29e:	20 40       	sbci	r18, 0x00	; 0
 2a0:	30 40       	sbci	r19, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <_Z3LEDc+0x1e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <_Z3LEDc+0x28>
 2a6:	00 00       	nop
 2a8:	95 b1       	in	r25, 0x05	; 5
 2aa:	80 95       	com	r24
 2ac:	89 23       	and	r24, r25
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	4f e3       	ldi	r20, 0x3F	; 63
 2b2:	6d e0       	ldi	r22, 0x0D	; 13
 2b4:	73 e0       	ldi	r23, 0x03	; 3
 2b6:	41 50       	subi	r20, 0x01	; 1
 2b8:	60 40       	sbci	r22, 0x00	; 0
 2ba:	70 40       	sbci	r23, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <_Z3LEDc+0x38>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <_Z3LEDc+0x42>
 2c0:	00 00       	nop
 2c2:	08 95       	ret

000002c4 <_Z7setYearv>:

}

void setYear(){
	//LED(PORTB0);
	if((PIND & (1<<PIND5))){
 2c4:	4d 9b       	sbis	0x09, 5	; 9
 2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <_Z7setYearv+0x1c>
		LED(PORTB3);
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		year++;
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e0:	08 95       	ret

000002e2 <_Z8setMonthv>:
	}
}

void setMonth(){
	//LED(PORTB0);
	if((PIND & (1<<PIND5))){
 2e2:	4d 9b       	sbis	0x09, 5	; 9
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <_Z8setMonthv+0x30>
		LED(PORTB4);
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(month==12){
 2ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <month>
 2f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <month+0x1>
 2f4:	8c 30       	cpi	r24, 0x0C	; 12
 2f6:	91 05       	cpc	r25, r1
 2f8:	39 f4       	brne	.+14     	; 0x308 <_Z8setMonthv+0x26>
			month=1;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <month+0x1>
 302:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <month>
 306:	08 95       	ret
		}else{
			month++;
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <month+0x1>
 30e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <month>
 312:	08 95       	ret

00000314 <_Z7setDatev>:
		}		
	}
}
void setDate(){
	if((PIND & (1<<PIND5))){
 314:	4d 9b       	sbis	0x09, 5	; 9
 316:	13 c0       	rjmp	.+38     	; 0x33e <_Z7setDatev+0x2a>
		if(date==31){
 318:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 31c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 320:	8f 31       	cpi	r24, 0x1F	; 31
 322:	91 05       	cpc	r25, r1
 324:	39 f4       	brne	.+14     	; 0x334 <_Z7setDatev+0x20>
			date=1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 32e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 332:	08 95       	ret
		}else{
			date++;
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 33a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 33e:	08 95       	ret

00000340 <_Z15setAlarmOneHourv>:
	
}


void setAlarmOneHour(){
	if((PIND & (1<<PIND5))){
 340:	4d 9b       	sbis	0x09, 5	; 9
 342:	14 c0       	rjmp	.+40     	; 0x36c <_Z15setAlarmOneHourv+0x2c>
		LED(PORTB5);
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(AlarmOneHour==23){
 34a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <AlarmOneHour>
 34e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <AlarmOneHour+0x1>
 352:	87 31       	cpi	r24, 0x17	; 23
 354:	91 05       	cpc	r25, r1
 356:	29 f4       	brne	.+10     	; 0x362 <_Z15setAlarmOneHourv+0x22>
			AlarmOneHour=0;
 358:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <AlarmOneHour+0x1>
 35c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <AlarmOneHour>
 360:	08 95       	ret
		}else{
			AlarmOneHour++;
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <AlarmOneHour+0x1>
 368:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <AlarmOneHour>
 36c:	08 95       	ret

0000036e <_Z14setAlarmOneMinv>:
		}
	}
}

void setAlarmOneMin(){
	if((PIND & (1<<PIND5))){
 36e:	4d 9b       	sbis	0x09, 5	; 9
 370:	14 c0       	rjmp	.+40     	; 0x39a <_Z14setAlarmOneMinv+0x2c>
		LED(PORTB5);
 372:	85 e0       	ldi	r24, 0x05	; 5
 374:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(AlarmOneMin==59){
 378:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <AlarmOneMin>
 37c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <AlarmOneMin+0x1>
 380:	8b 33       	cpi	r24, 0x3B	; 59
 382:	91 05       	cpc	r25, r1
 384:	29 f4       	brne	.+10     	; 0x390 <_Z14setAlarmOneMinv+0x22>
			AlarmOneMin=0;
 386:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <AlarmOneMin+0x1>
 38a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <AlarmOneMin>
 38e:	08 95       	ret
		}else{
			AlarmOneMin++;
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <AlarmOneMin+0x1>
 396:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <AlarmOneMin>
 39a:	08 95       	ret

0000039c <_Z15setAlarmTwoHourv>:
		}
	}
}

void setAlarmTwoHour(){
	if((PIND & (1<<PIND5))){
 39c:	4d 9b       	sbis	0x09, 5	; 9
 39e:	14 c0       	rjmp	.+40     	; 0x3c8 <_Z15setAlarmTwoHourv+0x2c>
		LED(PORTB5);
 3a0:	85 e0       	ldi	r24, 0x05	; 5
 3a2:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(AlarmTwoHour==23){
 3a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <AlarmTwoHour>
 3aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AlarmTwoHour+0x1>
 3ae:	87 31       	cpi	r24, 0x17	; 23
 3b0:	91 05       	cpc	r25, r1
 3b2:	29 f4       	brne	.+10     	; 0x3be <_Z15setAlarmTwoHourv+0x22>
			AlarmTwoHour=0;
 3b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <AlarmTwoHour+0x1>
 3b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <AlarmTwoHour>
 3bc:	08 95       	ret
			}else{
			AlarmTwoHour++;
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <AlarmTwoHour+0x1>
 3c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <AlarmTwoHour>
 3c8:	08 95       	ret

000003ca <_Z14setAlarmTwoMinv>:
		}
	}
}

void setAlarmTwoMin(){
	if((PIND & (1<<PIND5))){
 3ca:	4d 9b       	sbis	0x09, 5	; 9
 3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <_Z14setAlarmTwoMinv+0x2c>
		LED(PORTB5);
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(AlarmTwoMin==59){
 3d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <AlarmTwoMin>
 3d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <AlarmTwoMin+0x1>
 3dc:	8b 33       	cpi	r24, 0x3B	; 59
 3de:	91 05       	cpc	r25, r1
 3e0:	29 f4       	brne	.+10     	; 0x3ec <_Z14setAlarmTwoMinv+0x22>
			AlarmTwoMin=0;
 3e2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <AlarmTwoMin+0x1>
 3e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <AlarmTwoMin>
 3ea:	08 95       	ret
			}else{
			AlarmTwoMin++;
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <AlarmTwoMin+0x1>
 3f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <AlarmTwoMin>
 3f6:	08 95       	ret

000003f8 <_Z17setAlarmThreeHourv>:
		}
	}
}

void setAlarmThreeHour(){
	if((PIND & (1<<PIND5))){
 3f8:	4d 9b       	sbis	0x09, 5	; 9
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		LED(PORTB5);
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(AlarmThreeHour==23){
 402:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <AlarmThreeHour>
 406:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <AlarmThreeHour+0x1>
 40a:	87 31       	cpi	r24, 0x17	; 23
 40c:	91 05       	cpc	r25, r1
 40e:	29 f4       	brne	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			AlarmThreeHour=0;
 410:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <AlarmThreeHour+0x1>
 414:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <AlarmThreeHour>
 418:	08 95       	ret
			}else{
			AlarmThreeHour++;
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <AlarmThreeHour+0x1>
 420:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <AlarmThreeHour>
 424:	08 95       	ret

00000426 <_Z16setAlarmThreeMinv>:
		}
	}
}

void setAlarmThreeMin(){
	if((PIND & (1<<PIND5))){
 426:	4d 9b       	sbis	0x09, 5	; 9
 428:	14 c0       	rjmp	.+40     	; 0x452 <_Z16setAlarmThreeMinv+0x2c>
		LED(PORTB5);
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
		if(AlarmThreeMin==59){
 430:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <AlarmThreeMin>
 434:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <AlarmThreeMin+0x1>
 438:	8b 33       	cpi	r24, 0x3B	; 59
 43a:	91 05       	cpc	r25, r1
 43c:	29 f4       	brne	.+10     	; 0x448 <_Z16setAlarmThreeMinv+0x22>
			AlarmThreeMin=0;
 43e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <AlarmThreeMin+0x1>
 442:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <AlarmThreeMin>
 446:	08 95       	ret
			}else{
			AlarmThreeMin++;
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <AlarmThreeMin+0x1>
 44e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <AlarmThreeMin>
 452:	08 95       	ret

00000454 <main>:
			
		}
	}
}
int main(void) {
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	00 d0       	rcall	.+0      	; 0x45a <main+0x6>
 45a:	00 d0       	rcall	.+0      	; 0x45c <main+0x8>
 45c:	00 d0       	rcall	.+0      	; 0x45e <main+0xa>
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
	DDRB=0b01111111;
 462:	8f e7       	ldi	r24, 0x7F	; 127
 464:	84 b9       	out	0x04, r24	; 4
	DDRD=0b00000000;
 466:	1a b8       	out	0x0a, r1	; 10
	ds1307_init();
 468:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z11ds1307_initv>
	
	uint8_t year = 0;
 46c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t month = 0;
 46e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t day = 0;
 470:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t hour = 0;
 472:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t minute = 0;
 474:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t second = 0;
 476:	1e 82       	std	Y+6, r1	; 0x06
	//check set date
	//ds1307_setdate(21, 12, 31, 23, 59, 35);
	
	while(1) {
		//get date
		ds1307_getdate(&year, &month, &day, &hour, &minute, &second);
 478:	ce 01       	movw	r24, r28
 47a:	06 96       	adiw	r24, 0x06	; 6
 47c:	7c 01       	movw	r14, r24
 47e:	8e 01       	movw	r16, r28
 480:	0b 5f       	subi	r16, 0xFB	; 251
 482:	1f 4f       	sbci	r17, 0xFF	; 255
 484:	9e 01       	movw	r18, r28
 486:	2c 5f       	subi	r18, 0xFC	; 252
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	ae 01       	movw	r20, r28
 48c:	4d 5f       	subi	r20, 0xFD	; 253
 48e:	5f 4f       	sbci	r21, 0xFF	; 255
 490:	be 01       	movw	r22, r28
 492:	6e 5f       	subi	r22, 0xFE	; 254
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	05 97       	sbiw	r24, 0x05	; 5
 498:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z14ds1307_getdatePhS_S_S_S_S_>
		//blinking alarmLED
		if(AlarmOneHour==2){
 49c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <AlarmOneHour>
 4a0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <AlarmOneHour+0x1>
 4a4:	02 97       	sbiw	r24, 0x02	; 2
 4a6:	21 f4       	brne	.+8      	; 0x4b0 <main+0x5c>
			LED(PORTB0);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <main+0x62>
			
		}else{
			PORTB&=~(1<<PORTB0);
 4b0:	85 b1       	in	r24, 0x05	; 5
 4b2:	8e 7f       	andi	r24, 0xFE	; 254
 4b4:	85 b9       	out	0x05, r24	; 5
		}
		
		//changing the mode
		if(PIND & (1<<PIND7)){
 4b6:	4f 9b       	sbis	0x09, 7	; 9
 4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <main+0x8e>
			if(mode==4){
 4ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mode>
 4be:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mode+0x1>
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	91 05       	cpc	r25, r1
 4c6:	29 f4       	brne	.+10     	; 0x4d2 <main+0x7e>
				mode=0;
 4c8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mode+0x1>
 4cc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mode>
 4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <main+0x8e>
			}else{
				mode++;
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <mode+0x1>
 4d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mode>
				LED(PORTB1);
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
			}
		}
		
		//setting mode to functions
		if(mode==0){
 4e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mode>
 4e6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mode+0x1>
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	59 f1       	breq	.+86     	; 0x544 <main+0xf0>
			//LED(PORTB1);
		}
		//Changing the year,month,date
		else if(mode==1){
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	49 f5       	brne	.+82     	; 0x544 <main+0xf0>
			//LED(PORTB2);
			if((PIND & (1<<PIND3))){
 4f2:	4b 9b       	sbis	0x09, 3	; 9
 4f4:	14 c0       	rjmp	.+40     	; 0x51e <main+0xca>
				//LED(PORTB3);
				if(select==3){
 4f6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 4fa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 4fe:	83 30       	cpi	r24, 0x03	; 3
 500:	91 05       	cpc	r25, r1
 502:	29 f4       	brne	.+10     	; 0x50e <main+0xba>
					select=0;
 504:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <select+0x1>
 508:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <select>
 50c:	08 c0       	rjmp	.+16     	; 0x51e <main+0xca>
				}else{
					select++;
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <select+0x1>
 514:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <select>
					LED(PORTB2);
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
				}
			}
			
			if(select==0){
 51e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 522:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	69 f0       	breq	.+26     	; 0x544 <main+0xf0>
				//LED(PORTB4);
			}
			else if(select==1){
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	19 f4       	brne	.+6      	; 0x536 <main+0xe2>
				//LED(PORTB2);
				setYear();
 530:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z7setYearv>
 534:	07 c0       	rjmp	.+14     	; 0x544 <main+0xf0>
			}
			else if(select==2){
 536:	02 97       	sbiw	r24, 0x02	; 2
 538:	19 f4       	brne	.+6      	; 0x540 <main+0xec>
				//LED(PORTB3);
				setMonth();
 53a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z8setMonthv>
 53e:	02 c0       	rjmp	.+4      	; 0x544 <main+0xf0>
				
			}else{
				//LED(PORTB5);
				setDate();
 540:	0e 94 8a 01 	call	0x314	; 0x314 <_Z7setDatev>
			}
		
		}
		if(mode==2){
 544:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mode>
 548:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mode+0x1>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	91 05       	cpc	r25, r1
 550:	49 f5       	brne	.+82     	; 0x5a4 <main+0x150>
			//LED(PORTB3);
			if((PIND & (1<<PIND3))){
 552:	4b 9b       	sbis	0x09, 3	; 9
 554:	14 c0       	rjmp	.+40     	; 0x57e <main+0x12a>
				//LED(PORTB3);
				if(select==2){
 556:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 55a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	91 05       	cpc	r25, r1
 562:	29 f4       	brne	.+10     	; 0x56e <main+0x11a>
					select=0;
 564:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <select+0x1>
 568:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <select>
 56c:	08 c0       	rjmp	.+16     	; 0x57e <main+0x12a>
				}else{
					select++;
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <select+0x1>
 574:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <select>
					LED(PORTB2);
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
				}
			}
			if(select==0){
 57e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 582:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	09 f4       	brne	.+2      	; 0x58c <main+0x138>
 58a:	76 cf       	rjmp	.-276    	; 0x478 <main+0x24>
				//LED(PORTB4);
			}
			else if(select==1){
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	91 05       	cpc	r25, r1
 590:	19 f4       	brne	.+6      	; 0x598 <main+0x144>
				//LED(PORTB4);
				setAlarmOneHour();
 592:	0e 94 a0 01 	call	0x340	; 0x340 <_Z15setAlarmOneHourv>
 596:	70 cf       	rjmp	.-288    	; 0x478 <main+0x24>
			}
			else if(select==2){
 598:	02 97       	sbiw	r24, 0x02	; 2
 59a:	09 f0       	breq	.+2      	; 0x59e <main+0x14a>
 59c:	6d cf       	rjmp	.-294    	; 0x478 <main+0x24>
				//LED(PORTB3);
				setAlarmOneMin();
 59e:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z14setAlarmOneMinv>
 5a2:	6a cf       	rjmp	.-300    	; 0x478 <main+0x24>
				
				}
		}
		else if(mode==3){
 5a4:	03 97       	sbiw	r24, 0x03	; 3
 5a6:	49 f5       	brne	.+82     	; 0x5fa <main+0x1a6>
			//LED(PORTB5);
			if((PIND & (1<<PIND3))){
 5a8:	4b 9b       	sbis	0x09, 3	; 9
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <main+0x180>
				//LED(PORTB3);
				if(select==2){
 5ac:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 5b0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	91 05       	cpc	r25, r1
 5b8:	29 f4       	brne	.+10     	; 0x5c4 <main+0x170>
					select=0;
 5ba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <select+0x1>
 5be:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <select>
 5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <main+0x180>
					}else{
					select++;
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <select+0x1>
 5ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <select>
					LED(PORTB2);
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
				}
			}
			if(select==0){
 5d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 5d8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	09 f4       	brne	.+2      	; 0x5e2 <main+0x18e>
 5e0:	4b cf       	rjmp	.-362    	; 0x478 <main+0x24>
				//LED(PORTB4);
			}
			else if(select==1){
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	91 05       	cpc	r25, r1
 5e6:	19 f4       	brne	.+6      	; 0x5ee <main+0x19a>
				//LED(PORTB4);
				setAlarmTwoHour();
 5e8:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z15setAlarmTwoHourv>
 5ec:	45 cf       	rjmp	.-374    	; 0x478 <main+0x24>
			}
			else if(select==2){
 5ee:	02 97       	sbiw	r24, 0x02	; 2
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <main+0x1a0>
 5f2:	42 cf       	rjmp	.-380    	; 0x478 <main+0x24>
				//LED(PORTB3);
				setAlarmTwoMin();
 5f4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_Z14setAlarmTwoMinv>
 5f8:	3f cf       	rjmp	.-386    	; 0x478 <main+0x24>
				
			}
		}else{
			//LED(PORTB5);
			if((PIND & (1<<PIND3))){
 5fa:	4b 9b       	sbis	0x09, 3	; 9
 5fc:	14 c0       	rjmp	.+40     	; 0x626 <main+0x1d2>
				//LED(PORTB3);
				if(select==2){
 5fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 602:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	91 05       	cpc	r25, r1
 60a:	29 f4       	brne	.+10     	; 0x616 <main+0x1c2>
					select=0;
 60c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <select+0x1>
 610:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <select>
 614:	08 c0       	rjmp	.+16     	; 0x626 <main+0x1d2>
					}else{
					select++;
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <select+0x1>
 61c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <select>
					LED(PORTB2);
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z3LEDc>
				}
			}
			if(select==0){
 626:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <select>
 62a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <select+0x1>
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	09 f4       	brne	.+2      	; 0x634 <main+0x1e0>
 632:	22 cf       	rjmp	.-444    	; 0x478 <main+0x24>
				//LED(PORTB4);
			}
			else if(select==1){
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	91 05       	cpc	r25, r1
 638:	19 f4       	brne	.+6      	; 0x640 <main+0x1ec>
				//LED(PORTB4);
				setAlarmThreeHour();
 63a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z17setAlarmThreeHourv>
 63e:	1c cf       	rjmp	.-456    	; 0x478 <main+0x24>
			}
			else if(select==2){
 640:	02 97       	sbiw	r24, 0x02	; 2
 642:	09 f0       	breq	.+2      	; 0x646 <main+0x1f2>
 644:	19 cf       	rjmp	.-462    	; 0x478 <main+0x24>
				//LED(PORTB3);
				setAlarmThreeMin();
 646:	0e 94 13 02 	call	0x426	; 0x426 <_Z16setAlarmThreeMinv>
 64a:	16 cf       	rjmp	.-468    	; 0x478 <main+0x24>

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
