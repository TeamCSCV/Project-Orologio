
Screen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000040a  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800168  00800168  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a5  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059b  00000000  00000000  00002445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a48  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define ButtonDir DDRD
Screen scrn;                 

int main(void)
{
	ButtonDir = 0;
  a6:	1a b8       	out	0x0a, r1	; 10
    scrn.LCD_Init();         //initialize the LCD Display
  a8:	88 e6       	ldi	r24, 0x68	; 104
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN6Screen8LCD_InitEv>
	scrn.Time();            //at the beginning the time will be shown
  b0:	88 e6       	ldi	r24, 0x68	; 104
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_ZN6Screen4TimeEv>
	
	//in the following loop the program will always be looking for an input from buttons
	while (1)      
    {
		if (PIND == 1<<0){
  b8:	89 b1       	in	r24, 0x09	; 9
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	29 f4       	brne	.+10     	; 0xc8 <main+0x22>
			scrn.Select();      //call Select function when user press the select button
  be:	88 e6       	ldi	r24, 0x68	; 104
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN6Screen6SelectEv>
  c6:	f8 cf       	rjmp	.-16     	; 0xb8 <main+0x12>
		}
		else if (PIND == 1<<1){
  c8:	89 b1       	in	r24, 0x09	; 9
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	29 f4       	brne	.+10     	; 0xd8 <main+0x32>
			scrn.Left();       //call Left function when user press the Left button
  ce:	88 e6       	ldi	r24, 0x68	; 104
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN6Screen4LeftEv>
  d6:	f0 cf       	rjmp	.-32     	; 0xb8 <main+0x12>
		}
		else if (PIND == 1<<2){
  d8:	89 b1       	in	r24, 0x09	; 9
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	29 f4       	brne	.+10     	; 0xe8 <main+0x42>
			scrn.Down();       //call Down function when user press the Down button
  de:	88 e6       	ldi	r24, 0x68	; 104
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN6Screen4DownEv>
  e6:	e8 cf       	rjmp	.-48     	; 0xb8 <main+0x12>
		}
		else if (PIND == 1<<3){
  e8:	89 b1       	in	r24, 0x09	; 9
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	29 f4       	brne	.+10     	; 0xf8 <main+0x52>
			scrn.Up();         //call Up function when user press the Up button
  ee:	88 e6       	ldi	r24, 0x68	; 104
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN6Screen2UpEv>
  f6:	e0 cf       	rjmp	.-64     	; 0xb8 <main+0x12>
		}
		else if (PIND == 1<<4){
  f8:	89 b1       	in	r24, 0x09	; 9
  fa:	80 31       	cpi	r24, 0x10	; 16
  fc:	29 f4       	brne	.+10     	; 0x108 <main+0x62>
			scrn.Right();     //call Right function when user press the Right button
  fe:	88 e6       	ldi	r24, 0x68	; 104
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN6Screen5RightEv>
 106:	d8 cf       	rjmp	.-80     	; 0xb8 <main+0x12>
		}
		else if (PIND == 1<<5){
 108:	89 b1       	in	r24, 0x09	; 9
 10a:	80 32       	cpi	r24, 0x20	; 32
 10c:	a9 f6       	brne	.-86     	; 0xb8 <main+0x12>
			scrn.Back();     //call Back function when user press the Back button
 10e:	88 e6       	ldi	r24, 0x68	; 104
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN6Screen4BackEv>
 116:	d0 cf       	rjmp	.-96     	; 0xb8 <main+0x12>

00000118 <_ZN6Screen11LCD_CommandEh>:


//this command is use to send a command to the LCD as an unsigned char
void Screen::LCD_Command(unsigned char cmnd)      
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	96 2f       	mov	r25, r22
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	89 2b       	or	r24, r25
 122:	85 b9       	out	0x05, r24	; 5
	LCD_Port &= ~ (1<<RS);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	85 b9       	out	0x05, r24	; 5
 138:	82 e4       	ldi	r24, 0x42	; 66
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <_ZN6Screen11LCD_CommandEh+0x22>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_ZN6Screen11LCD_CommandEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	90 e1       	ldi	r25, 0x10	; 16
 144:	69 9f       	mul	r22, r25
 146:	b0 01       	movw	r22, r0
 148:	11 24       	eor	r1, r1
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	68 2b       	or	r22, r24
 14e:	65 b9       	out	0x05, r22	; 5
	LCD_Port |= (1<<EN);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	82 60       	ori	r24, 0x02	; 2
 154:	85 b9       	out	0x05, r24	; 5
 156:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	83 ef       	ldi	r24, 0xF3	; 243
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_ZN6Screen11LCD_CommandEh+0x4a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZN6Screen11LCD_CommandEh+0x50>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <_ZN6Screen8LCD_CharEh>:
	_delay_ms(2);
}

void Screen::LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	96 2f       	mov	r25, r22
 172:	90 7f       	andi	r25, 0xF0	; 240
 174:	89 2b       	or	r24, r25
 176:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<RS);		//RS = 1
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	85 b9       	out	0x05, r24	; 5
	LCD_Port|= (1<<EN);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	82 60       	ori	r24, 0x02	; 2
 182:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <_ZN6Screen8LCD_CharEh+0x22>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN6Screen8LCD_CharEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	90 e1       	ldi	r25, 0x10	; 16
 198:	69 9f       	mul	r22, r25
 19a:	b0 01       	movw	r22, r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	68 2b       	or	r22, r24
 1a2:	65 b9       	out	0x05, r22	; 5
	LCD_Port |= (1<<EN);
 1a4:	85 b1       	in	r24, 0x05	; 5
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <_ZN6Screen8LCD_CharEh+0x4a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_ZN6Screen8LCD_CharEh+0x50>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <_ZN6Screen10LCD_StringEPc>:
}


//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	7c 01       	movw	r14, r24
 1ce:	8b 01       	movw	r16, r22
	int i;
	for(i=0;str[i]!=0;i++)
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	f8 01       	movw	r30, r16
 1d6:	ec 0f       	add	r30, r28
 1d8:	fd 1f       	adc	r31, r29
 1da:	60 81       	ld	r22, Z
 1dc:	66 23       	and	r22, r22
 1de:	29 f0       	breq	.+10     	; 0x1ea <_ZN6Screen10LCD_StringEPc+0x2a>
	{
		LCD_Char (str[i]);
 1e0:	c7 01       	movw	r24, r14
 1e2:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN6Screen8LCD_CharEh>

//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <_ZN6Screen10LCD_StringEPc+0x14>
	{
		LCD_Char (str[i]);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <_ZN6Screen8LCD_InitEv>:
}


//function to initialize the LCD dispay
void Screen::LCD_Init(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;			//LCD data direction is output
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	84 b9       	out	0x04, r24	; 4
 202:	87 e8       	ldi	r24, 0x87	; 135
 204:	93 e1       	ldi	r25, 0x13	; 19
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <_ZN6Screen8LCD_InitEv+0xe>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN6Screen8LCD_InitEv+0x14>
 20c:	00 00       	nop
	_delay_ms(20);
	
	LCD_Command(0x02);
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	ce 01       	movw	r24, r28
 212:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x28);
 216:	68 e2       	ldi	r22, 0x28	; 40
 218:	ce 01       	movw	r24, r28
 21a:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
 21e:	6c e0       	ldi	r22, 0x0C	; 12
 220:	ce 01       	movw	r24, r28
 222:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x06);              //Command - shift cursor to right
 226:	66 e0       	ldi	r22, 0x06	; 6
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x01);              //Command - Clear display
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	ce 01       	movw	r24, r28
 232:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
	
	LCD_String("Welcome");
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	71 e0       	ldi	r23, 0x01	; 1
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 240:	9f e3       	ldi	r25, 0x3F	; 63
 242:	2d e0       	ldi	r18, 0x0D	; 13
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	91 50       	subi	r25, 0x01	; 1
 248:	20 40       	sbci	r18, 0x00	; 0
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <_ZN6Screen8LCD_InitEv+0x4e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <_ZN6Screen8LCD_InitEv+0x58>
 250:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
 252:	68 e0       	ldi	r22, 0x08	; 8
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	ce 01       	movw	r24, r28
 258:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 25c:	9f e3       	ldi	r25, 0x3F	; 63
 25e:	2d e0       	ldi	r18, 0x0D	; 13
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	91 50       	subi	r25, 0x01	; 1
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <_ZN6Screen8LCD_InitEv+0x6a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <_ZN6Screen8LCD_InitEv+0x74>
 26c:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
 26e:	68 e0       	ldi	r22, 0x08	; 8
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	ce 01       	movw	r24, r28
 274:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 278:	9f e3       	ldi	r25, 0x3F	; 63
 27a:	2d e0       	ldi	r18, 0x0D	; 13
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	91 50       	subi	r25, 0x01	; 1
 280:	20 40       	sbci	r18, 0x00	; 0
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <_ZN6Screen8LCD_InitEv+0x86>
 286:	00 c0       	rjmp	.+0      	; 0x288 <_ZN6Screen8LCD_InitEv+0x90>
 288:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
 28a:	68 e0       	ldi	r22, 0x08	; 8
 28c:	71 e0       	ldi	r23, 0x01	; 1
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 294:	9f e3       	ldi	r25, 0x3F	; 63
 296:	2d e0       	ldi	r18, 0x0D	; 13
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	91 50       	subi	r25, 0x01	; 1
 29c:	20 40       	sbci	r18, 0x00	; 0
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <_ZN6Screen8LCD_InitEv+0xa2>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <_ZN6Screen8LCD_InitEv+0xac>
 2a4:	00 00       	nop
	_delay_ms(1000);
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <_ZN6Screen9LCD_clearEv>:
}


//function to clear the display
void Screen::LCD_clear()
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
	LCD_Command (0x01);
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
 2b8:	83 ef       	ldi	r24, 0xF3	; 243
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <_ZN6Screen9LCD_clearEv+0x10>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_ZN6Screen9LCD_clearEv+0x16>
 2c2:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);
 2c4:	60 e8       	ldi	r22, 0x80	; 128
 2c6:	ce 01       	movw	r24, r28
 2c8:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN6Screen11LCD_CommandEh>
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <_ZN6Screen4TimeEv>:


/*demo function to display the time. Here I used only the string "Time"
But in the alarm clock we can use the time output comes from the RTC sub system. */
void Screen::Time()
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
	LCD_clear();
 2d8:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("~~~~ Time ~~~~");
 2dc:	6a e0       	ldi	r22, 0x0A	; 10
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 2e6:	2f e9       	ldi	r18, 0x9F	; 159
 2e8:	86 e8       	ldi	r24, 0x86	; 134
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <_ZN6Screen4TimeEv+0x1a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <_ZN6Screen4TimeEv+0x24>
 2f6:	00 00       	nop
	_delay_ms(500);
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <_ZN6Screen6SelectEv>:
But the code below contains only demo functions which can be modified to build the alarm menu
Will update them in my up coming commits.*/

//What to do when select button is pressed
void Screen::Select()
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	LCD_clear();
 304:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("Pressed Select");
 308:	69 e1       	ldi	r22, 0x19	; 25
 30a:	71 e0       	ldi	r23, 0x01	; 1
 30c:	ce 01       	movw	r24, r28
 30e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 312:	2f e9       	ldi	r18, 0x9F	; 159
 314:	86 e8       	ldi	r24, 0x86	; 134
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <_ZN6Screen6SelectEv+0x1a>
 320:	00 c0       	rjmp	.+0      	; 0x322 <_ZN6Screen6SelectEv+0x24>
 322:	00 00       	nop
	_delay_ms(500);
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <_ZN6Screen4BackEv>:

//What to do when Back button is pressed
void Screen::Back()
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ec 01       	movw	r28, r24
	LCD_clear();
 330:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("Pressed Back");
 334:	68 e2       	ldi	r22, 0x28	; 40
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 33e:	2f e9       	ldi	r18, 0x9F	; 159
 340:	86 e8       	ldi	r24, 0x86	; 134
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <_ZN6Screen4BackEv+0x1a>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <_ZN6Screen4BackEv+0x24>
 34e:	00 00       	nop
	_delay_ms(500);
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <_ZN6Screen2UpEv>:


//What to do when Up button is pressed
void Screen::Up()
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
	LCD_clear();
 35c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("Pressed Up");
 360:	65 e3       	ldi	r22, 0x35	; 53
 362:	71 e0       	ldi	r23, 0x01	; 1
 364:	ce 01       	movw	r24, r28
 366:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 36a:	2f e9       	ldi	r18, 0x9F	; 159
 36c:	86 e8       	ldi	r24, 0x86	; 134
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <_ZN6Screen2UpEv+0x1a>
 378:	00 c0       	rjmp	.+0      	; 0x37a <_ZN6Screen2UpEv+0x24>
 37a:	00 00       	nop
	_delay_ms(500);
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <_ZN6Screen4DownEv>:

//What to do when Down button is pressed
void Screen::Down()
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	ec 01       	movw	r28, r24
	LCD_clear();
 388:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("Pressed Down");
 38c:	60 e4       	ldi	r22, 0x40	; 64
 38e:	71 e0       	ldi	r23, 0x01	; 1
 390:	ce 01       	movw	r24, r28
 392:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 396:	2f e9       	ldi	r18, 0x9F	; 159
 398:	86 e8       	ldi	r24, 0x86	; 134
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <_ZN6Screen4DownEv+0x1a>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <_ZN6Screen4DownEv+0x24>
 3a6:	00 00       	nop
	_delay_ms(500);
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <_ZN6Screen4LeftEv>:

//What to do when Left button is pressed
void Screen::Left()
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	LCD_clear();
 3b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("Pressed Left");
 3b8:	6d e4       	ldi	r22, 0x4D	; 77
 3ba:	71 e0       	ldi	r23, 0x01	; 1
 3bc:	ce 01       	movw	r24, r28
 3be:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 3c2:	2f e9       	ldi	r18, 0x9F	; 159
 3c4:	86 e8       	ldi	r24, 0x86	; 134
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <_ZN6Screen4LeftEv+0x1a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <_ZN6Screen4LeftEv+0x24>
 3d2:	00 00       	nop
	_delay_ms(500);
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <_ZN6Screen5RightEv>:

//what to do when Right button is pressed
void Screen::Right()
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
	LCD_clear();
 3e0:	0e 94 56 01 	call	0x2ac	; 0x2ac <_ZN6Screen9LCD_clearEv>
	LCD_String("Pressed Right");
 3e4:	6a e5       	ldi	r22, 0x5A	; 90
 3e6:	71 e0       	ldi	r23, 0x01	; 1
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN6Screen10LCD_StringEPc>
 3ee:	2f e9       	ldi	r18, 0x9F	; 159
 3f0:	86 e8       	ldi	r24, 0x86	; 134
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <_ZN6Screen5RightEv+0x1a>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <_ZN6Screen5RightEv+0x24>
 3fe:	00 00       	nop
	_delay_ms(500);
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
