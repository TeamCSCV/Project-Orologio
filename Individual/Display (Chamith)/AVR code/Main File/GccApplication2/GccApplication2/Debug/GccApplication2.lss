
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000002fa  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e85  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d5  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f3  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000545  00000000  00000000  00002553  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  8e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z11LCD_Commandh>:
#define EN PB1 				  // Enable pin


void LCD_Command( unsigned char cmnd )     //function to initialize a command given as a hexadecimal number
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); 
  96:	95 b1       	in	r25, 0x05	; 5
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	95 b9       	out	0x05, r25	; 5
	LCD_Port &= ~ (1<<RS);		
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9e 7f       	andi	r25, 0xFE	; 254
  a6:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);		
  a8:	95 b1       	in	r25, 0x05	; 5
  aa:	92 60       	ori	r25, 0x02	; 2
  ac:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	9d 7f       	andi	r25, 0xFD	; 253
  b4:	95 b9       	out	0x05, r25	; 5
  b6:	32 e4       	ldi	r19, 0x42	; 66
  b8:	3a 95       	dec	r19
  ba:	f1 f7       	brne	.-4      	; 0xb8 <_Z11LCD_Commandh+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_Z11LCD_Commandh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4); 
  be:	25 b1       	in	r18, 0x05	; 5
  c0:	30 e1       	ldi	r19, 0x10	; 16
  c2:	83 9f       	mul	r24, r19
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	92 2f       	mov	r25, r18
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	89 2b       	or	r24, r25
  ce:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	83 ef       	ldi	r24, 0xF3	; 243
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z11LCD_Commandh+0x4c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_Z11LCD_Commandh+0x52>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <_Z8LCD_Charh>:



void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); 
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	28 2f       	mov	r18, r24
  f2:	20 7f       	andi	r18, 0xF0	; 240
  f4:	92 2b       	or	r25, r18
  f6:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<RS);		//RS = 1
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	91 60       	ori	r25, 0x01	; 1
  fc:	95 b9       	out	0x05, r25	; 5
	LCD_Port|= (1<<EN);
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	92 60       	ori	r25, 0x02	; 2
 102:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 106:	95 b1       	in	r25, 0x05	; 5
 108:	9d 7f       	andi	r25, 0xFD	; 253
 10a:	95 b9       	out	0x05, r25	; 5
 10c:	32 e4       	ldi	r19, 0x42	; 66
 10e:	3a 95       	dec	r19
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z8LCD_Charh+0x22>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z8LCD_Charh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); 
 114:	25 b1       	in	r18, 0x05	; 5
 116:	30 e1       	ldi	r19, 0x10	; 16
 118:	83 9f       	mul	r24, r19
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	92 2f       	mov	r25, r18
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	89 2b       	or	r24, r25
 124:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	85 b9       	out	0x05, r24	; 5
 12c:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	83 ef       	ldi	r24, 0xF3	; 243
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <_Z8LCD_Charh+0x4c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <_Z8LCD_Charh+0x52>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <_Z8LCD_Initv>:



void LCD_Init (void)			//Initialize the display
{
	LCD_Dir = 0xFF;			//LCD data direction is output
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	84 b9       	out	0x04, r24	; 4
 146:	87 e8       	ldi	r24, 0x87	; 135
 148:	93 e1       	ldi	r25, 0x13	; 19
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <_Z8LCD_Initv+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_Z8LCD_Initv+0xe>
 150:	00 00       	nop
	_delay_ms(20);			
	
	LCD_Command(0x02);		
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x28);              
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x06);              //Command - shift cursor to right
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x01);              //Command - Clear display
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <_Z8LCD_Initv+0x32>
 178:	00 c0       	rjmp	.+0      	; 0x17a <_Z8LCD_Initv+0x38>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <_Z10LCD_StringPc>:




void LCD_String (char *str)		//Writing a string on LCd display
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	f8 01       	movw	r30, r16
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	21 f0       	breq	.+8      	; 0x1a0 <_Z10LCD_StringPc+0x22>
	{
		LCD_Char (str[i]);
 198:	0e 94 76 00 	call	0xec	; 0xec <_Z8LCD_Charh>


void LCD_String (char *str)		//Writing a string on LCd display
{
	int i;
	for(i=0;str[i]!=0;i++)		
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	f6 cf       	rjmp	.-20     	; 0x18c <_Z10LCD_StringPc+0xe>
	{
		LCD_Char (str[i]);
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <_Z9LCD_Clearv>:



void LCD_Clear()             //Function to clear display and come back to home position
{
	LCD_Command (0x01);		
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
 1b0:	83 ef       	ldi	r24, 0xF3	; 243
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <_Z9LCD_Clearv+0xa>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_Z9LCD_Clearv+0x10>
 1ba:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
 1c2:	08 95       	ret

000001c4 <_Z4Timev>:
}


void Time()             //Function to write time to display(Here I have used the test "Time". (I have to link RTC code here)
{
	LCD_Clear();
 1c4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Time...");
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 1d0:	2f e9       	ldi	r18, 0x9F	; 159
 1d2:	86 e8       	ldi	r24, 0x86	; 134
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_Z4Timev+0x12>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_Z4Timev+0x1c>
 1e0:	00 00       	nop
 1e2:	08 95       	ret

000001e4 <_Z6Selectv>:
}


void Select()            //What to do when the user press the select button
{
	LCD_Clear();
 1e4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Pressed Select");
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 1f0:	2f e9       	ldi	r18, 0x9F	; 159
 1f2:	86 e8       	ldi	r24, 0x86	; 134
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <_Z6Selectv+0x12>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z6Selectv+0x1c>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <_Z4Leftv>:
	_delay_ms(500);
}

void Left()              //What to do when the user press the left arrow
{
	LCD_Clear();
 204:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Pressed Left");
 208:	87 e1       	ldi	r24, 0x17	; 23
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 210:	2f e9       	ldi	r18, 0x9F	; 159
 212:	86 e8       	ldi	r24, 0x86	; 134
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <_Z4Leftv+0x12>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_Z4Leftv+0x1c>
 220:	00 00       	nop
 222:	08 95       	ret

00000224 <_Z5Rightv>:
}

void Right()              //What to do when the user press the right arrow
{
	
	LCD_Clear();
 224:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Pressed Right");
 228:	84 e2       	ldi	r24, 0x24	; 36
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 230:	2f e9       	ldi	r18, 0x9F	; 159
 232:	86 e8       	ldi	r24, 0x86	; 134
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <_Z5Rightv+0x12>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <_Z5Rightv+0x1c>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <_Z2Upv>:
	_delay_ms(500);
}

void Up()                  //What to do when the user press the up arrow
{
	LCD_Clear();
 244:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Pressed Up");
 248:	82 e3       	ldi	r24, 0x32	; 50
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 250:	2f e9       	ldi	r18, 0x9F	; 159
 252:	86 e8       	ldi	r24, 0x86	; 134
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <_Z2Upv+0x12>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <_Z2Upv+0x1c>
 260:	00 00       	nop
 262:	08 95       	ret

00000264 <_Z4Downv>:
	_delay_ms(500);
}

void Down()              //What to do when the user press the down arrow
{
	LCD_Clear();
 264:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Pressed Down");
 268:	8d e3       	ldi	r24, 0x3D	; 61
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 270:	2f e9       	ldi	r18, 0x9F	; 159
 272:	86 e8       	ldi	r24, 0x86	; 134
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <_Z4Downv+0x12>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <_Z4Downv+0x1c>
 280:	00 00       	nop
 282:	08 95       	ret

00000284 <_Z4Backv>:
	_delay_ms(500);
}

void Back()             //What to do when the user press the back button
{
	LCD_Clear();
 284:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9LCD_Clearv>
	LCD_String("Pressed Back");
 288:	8a e4       	ldi	r24, 0x4A	; 74
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z10LCD_StringPc>
 290:	2f e9       	ldi	r18, 0x9F	; 159
 292:	86 e8       	ldi	r24, 0x86	; 134
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <_Z4Backv+0x12>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <_Z4Backv+0x1c>
 2a0:	00 00       	nop
 2a2:	08 95       	ret

000002a4 <main>:
	_delay_ms(500);
}

int main(void)           //main function continuously looks for a signal from the user
{
    DDRD = 0x00;
 2a4:	1a b8       	out	0x0a, r1	; 10
	LCD_Init();
 2a6:	0e 94 a1 00 	call	0x142	; 0x142 <_Z8LCD_Initv>
	Time();
 2aa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z4Timev>
    while (1) 
    {
		if (PIND == 0x01){
 2ae:	89 b1       	in	r24, 0x09	; 9
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	19 f4       	brne	.+6      	; 0x2ba <main+0x16>
			Select();
 2b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Z6Selectv>
 2b8:	fa cf       	rjmp	.-12     	; 0x2ae <main+0xa>
		}
		else if (PIND == 0x02){
 2ba:	89 b1       	in	r24, 0x09	; 9
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	19 f4       	brne	.+6      	; 0x2c6 <main+0x22>
			Left();
 2c0:	0e 94 02 01 	call	0x204	; 0x204 <_Z4Leftv>
 2c4:	f4 cf       	rjmp	.-24     	; 0x2ae <main+0xa>
		}
		else if (PIND == 0x04){
 2c6:	89 b1       	in	r24, 0x09	; 9
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	19 f4       	brne	.+6      	; 0x2d2 <main+0x2e>
			Down();
 2cc:	0e 94 32 01 	call	0x264	; 0x264 <_Z4Downv>
 2d0:	ee cf       	rjmp	.-36     	; 0x2ae <main+0xa>
		}
		else if (PIND == 0x08){
 2d2:	89 b1       	in	r24, 0x09	; 9
 2d4:	88 30       	cpi	r24, 0x08	; 8
 2d6:	19 f4       	brne	.+6      	; 0x2de <main+0x3a>
			Up();
 2d8:	0e 94 22 01 	call	0x244	; 0x244 <_Z2Upv>
 2dc:	e8 cf       	rjmp	.-48     	; 0x2ae <main+0xa>
		}
		else if (PIND == 0x10){
 2de:	89 b1       	in	r24, 0x09	; 9
 2e0:	80 31       	cpi	r24, 0x10	; 16
 2e2:	19 f4       	brne	.+6      	; 0x2ea <main+0x46>
			Right();
 2e4:	0e 94 12 01 	call	0x224	; 0x224 <_Z5Rightv>
 2e8:	e2 cf       	rjmp	.-60     	; 0x2ae <main+0xa>
		}
		else if(PIND == 0x20){
 2ea:	89 b1       	in	r24, 0x09	; 9
 2ec:	80 32       	cpi	r24, 0x20	; 32
 2ee:	f9 f6       	brne	.-66     	; 0x2ae <main+0xa>
			Back();
 2f0:	0e 94 42 01 	call	0x284	; 0x284 <_Z4Backv>
 2f4:	dc cf       	rjmp	.-72     	; 0x2ae <main+0xa>

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
