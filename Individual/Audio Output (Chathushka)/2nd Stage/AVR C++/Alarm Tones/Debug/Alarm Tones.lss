
Alarm Tones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000056e  00800100  000013d0  00001464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080066e  0080066e  000019d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d2  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  00002e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a91  00000000  00000000  00003692  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a2  00000000  00000000  000048eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00005f8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	16 e0       	ldi	r17, 0x06	; 6
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ed       	ldi	r30, 0xD0	; 208
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b6 e0       	ldi	r27, 0x06	; 6
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 37       	cpi	r26, 0x70	; 112
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 65 07 	call	0xeca	; 0xeca <main>
      9e:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z8playNoteff>:

int changing;


void playNote(float frequency, float duration)
{
      a6:	2f 92       	push	r2
      a8:	3f 92       	push	r3
      aa:	4f 92       	push	r4
      ac:	5f 92       	push	r5
      ae:	6f 92       	push	r6
      b0:	7f 92       	push	r7
      b2:	8f 92       	push	r8
      b4:	9f 92       	push	r9
      b6:	af 92       	push	r10
      b8:	bf 92       	push	r11
      ba:	cf 92       	push	r12
      bc:	df 92       	push	r13
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	61 97       	sbiw	r28, 0x11	; 17
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	f8 94       	cli
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	4b 01       	movw	r8, r22
      dc:	5c 01       	movw	r10, r24
      de:	ca 01       	movw	r24, r20
      e0:	b9 01       	movw	r22, r18
	duration*=0.5;
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	5f e3       	ldi	r21, 0x3F	; 63
      ea:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
      ee:	6b 01       	movw	r12, r22
      f0:	7c 01       	movw	r14, r24
	long int cycles;
	float half_period;
	float wavelength;
	
	SPEAKER_DDR |= (1 << SPEAKER_PIN);
      f2:	22 9a       	sbi	0x04, 2	; 4
	if (frequency==0){
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	a9 01       	movw	r20, r18
      fa:	c5 01       	movw	r24, r10
      fc:	b4 01       	movw	r22, r8
      fe:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     102:	81 11       	cpse	r24, r1
     104:	c9 c0       	rjmp	.+402    	; 0x298 <_Z8playNoteff+0x1f2>
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     106:	2a 98       	cbi	0x05, 2	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     108:	2b ea       	ldi	r18, 0xAB	; 171
     10a:	3a ea       	ldi	r19, 0xAA	; 170
     10c:	4a e2       	ldi	r20, 0x2A	; 42
     10e:	50 e4       	ldi	r21, 0x40	; 64
     110:	c7 01       	movw	r24, r14
     112:	b6 01       	movw	r22, r12
     114:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     118:	2b 01       	movw	r4, r22
     11a:	3c 01       	movw	r6, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     11c:	a7 01       	movw	r20, r14
     11e:	96 01       	movw	r18, r12
     120:	c7 01       	movw	r24, r14
     122:	b6 01       	movw	r22, r12
     124:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
     128:	4b 01       	movw	r8, r22
     12a:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e8       	ldi	r20, 0x80	; 128
     132:	5f e3       	ldi	r21, 0x3F	; 63
     134:	c3 01       	movw	r24, r6
     136:	b2 01       	movw	r22, r4
     138:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     13c:	88 23       	and	r24, r24
     13e:	0c f4       	brge	.+2      	; 0x142 <_Z8playNoteff+0x9c>
     140:	68 c0       	rjmp	.+208    	; 0x212 <_Z8playNoteff+0x16c>
		__ticks = 1;
	else if (__tmp2 > 65535)
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	3f ef       	ldi	r19, 0xFF	; 255
     146:	4f e7       	ldi	r20, 0x7F	; 127
     148:	57 e4       	ldi	r21, 0x47	; 71
     14a:	c5 01       	movw	r24, r10
     14c:	b4 01       	movw	r22, r8
     14e:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     152:	18 16       	cp	r1, r24
     154:	0c f0       	brlt	.+2      	; 0x158 <_Z8playNoteff+0xb2>
     156:	45 c0       	rjmp	.+138    	; 0x1e2 <_Z8playNoteff+0x13c>
	{
		_delay_ms(__us / 1000.0);
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	4a e7       	ldi	r20, 0x7A	; 122
     15e:	54 e4       	ldi	r21, 0x44	; 68
     160:	c7 01       	movw	r24, r14
     162:	b6 01       	movw	r22, r12
     164:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
     168:	2b 01       	movw	r4, r22
     16a:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	4a ef       	ldi	r20, 0xFA	; 250
     172:	54 e4       	ldi	r21, 0x44	; 68
     174:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     178:	6b 01       	movw	r12, r22
     17a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e8       	ldi	r20, 0x80	; 128
     182:	5f e3       	ldi	r21, 0x3F	; 63
     184:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     188:	88 23       	and	r24, r24
     18a:	2c f1       	brlt	.+74     	; 0x1d6 <_Z8playNoteff+0x130>
		__ticks = 1;
	else if (__tmp > 65535)
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	3f ef       	ldi	r19, 0xFF	; 255
     190:	4f e7       	ldi	r20, 0x7F	; 127
     192:	57 e4       	ldi	r21, 0x47	; 71
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     19c:	18 16       	cp	r1, r24
     19e:	b4 f4       	brge	.+44     	; 0x1cc <_Z8playNoteff+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e2       	ldi	r20, 0x20	; 32
     1a6:	51 e4       	ldi	r21, 0x41	; 65
     1a8:	c3 01       	movw	r24, r6
     1aa:	b2 01       	movw	r22, r4
     1ac:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     1b0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     1b4:	61 15       	cp	r22, r1
     1b6:	71 05       	cpc	r23, r1
     1b8:	71 f1       	breq	.+92     	; 0x216 <_Z8playNoteff+0x170>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     1ba:	28 ec       	ldi	r18, 0xC8	; 200
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	c9 01       	movw	r24, r18
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <_Z8playNoteff+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c4:	61 50       	subi	r22, 0x01	; 1
     1c6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1c8:	d1 f7       	brne	.-12     	; 0x1be <_Z8playNoteff+0x118>
     1ca:	25 c0       	rjmp	.+74     	; 0x216 <_Z8playNoteff+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1cc:	c7 01       	movw	r24, r14
     1ce:	b6 01       	movw	r22, r12
     1d0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <_Z8playNoteff+0x134>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	cb 01       	movw	r24, r22
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <_Z8playNoteff+0x136>
     1e0:	1a c0       	rjmp	.+52     	; 0x216 <_Z8playNoteff+0x170>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	4f e7       	ldi	r20, 0x7F	; 127
     1e8:	53 e4       	ldi	r21, 0x43	; 67
     1ea:	c3 01       	movw	r24, r6
     1ec:	b2 01       	movw	r22, r4
     1ee:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	44 f4       	brge	.+16     	; 0x206 <_Z8playNoteff+0x160>
     1f6:	c5 01       	movw	r24, r10
     1f8:	b4 01       	movw	r22, r8
     1fa:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     1fe:	cb 01       	movw	r24, r22
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <_Z8playNoteff+0x15a>
     204:	0b c0       	rjmp	.+22     	; 0x21c <_Z8playNoteff+0x176>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     206:	c3 01       	movw	r24, r6
     208:	b2 01       	movw	r22, r4
     20a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     20e:	69 83       	std	Y+1, r22	; 0x01
     210:	02 c0       	rjmp	.+4      	; 0x216 <_Z8playNoteff+0x170>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	29 83       	std	Y+1, r18	; 0x01
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     216:	39 81       	ldd	r19, Y+1	; 0x01
     218:	3a 95       	dec	r19
     21a:	f1 f7       	brne	.-4      	; 0x218 <_Z8playNoteff+0x172>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4a ef       	ldi	r20, 0xFA	; 250
     222:	54 e4       	ldi	r21, 0x44	; 68
     224:	c5 01       	movw	r24, r10
     226:	b4 01       	movw	r22, r8
     228:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     22c:	6b 01       	movw	r12, r22
     22e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e3       	ldi	r21, 0x3F	; 63
     238:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     23c:	88 23       	and	r24, r24
     23e:	34 f1       	brlt	.+76     	; 0x28c <_Z8playNoteff+0x1e6>
		__ticks = 1;
	else if (__tmp > 65535)
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	3f ef       	ldi	r19, 0xFF	; 255
     244:	4f e7       	ldi	r20, 0x7F	; 127
     246:	57 e4       	ldi	r21, 0x47	; 71
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     250:	18 16       	cp	r1, r24
     252:	bc f4       	brge	.+46     	; 0x282 <_Z8playNoteff+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e2       	ldi	r20, 0x20	; 32
     25a:	51 e4       	ldi	r21, 0x41	; 65
     25c:	c5 01       	movw	r24, r10
     25e:	b4 01       	movw	r22, r8
     260:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     264:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     268:	61 15       	cp	r22, r1
     26a:	71 05       	cpc	r23, r1
     26c:	09 f4       	brne	.+2      	; 0x270 <_Z8playNoteff+0x1ca>
     26e:	75 c1       	rjmp	.+746    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     270:	28 ec       	ldi	r18, 0xC8	; 200
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	c9 01       	movw	r24, r18
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <_Z8playNoteff+0x1d0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     27a:	61 50       	subi	r22, 0x01	; 1
     27c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     27e:	d1 f7       	brne	.-12     	; 0x274 <_Z8playNoteff+0x1ce>
     280:	6c c1       	rjmp	.+728    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     282:	c7 01       	movw	r24, r14
     284:	b6 01       	movw	r22, r12
     286:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     28a:	02 c0       	rjmp	.+4      	; 0x290 <_Z8playNoteff+0x1ea>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	cb 01       	movw	r24, r22
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <_Z8playNoteff+0x1ec>
     296:	61 c1       	rjmp	.+706    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
			_delay_ms (pauseBetweenNotes);
	}
	
	
	else{
		wavelength=(1/frequency)*1000;
     298:	a5 01       	movw	r20, r10
     29a:	94 01       	movw	r18, r8
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	9f e3       	ldi	r25, 0x3F	; 63
     2a4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	4a e7       	ldi	r20, 0x7A	; 122
     2ae:	54 e4       	ldi	r21, 0x44	; 68
     2b0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     2b4:	4b 01       	movw	r8, r22
     2b6:	5c 01       	movw	r10, r24
		cycles=2*duration/wavelength;
     2b8:	a7 01       	movw	r20, r14
     2ba:	96 01       	movw	r18, r12
     2bc:	c7 01       	movw	r24, r14
     2be:	b6 01       	movw	r22, r12
     2c0:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
     2c4:	a5 01       	movw	r20, r10
     2c6:	94 01       	movw	r18, r8
     2c8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
     2cc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fixsfsi>
     2d0:	2b 01       	movw	r4, r22
     2d2:	3c 01       	movw	r6, r24
		half_period = wavelength/2;
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	5f e3       	ldi	r21, 0x3F	; 63
     2dc:	c5 01       	movw	r24, r10
     2de:	b4 01       	movw	r22, r8
     2e0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>

		
		
		for (int i=0;i<cycles;i++)
     2e4:	14 14       	cp	r1, r4
     2e6:	15 04       	cpc	r1, r5
     2e8:	16 04       	cpc	r1, r6
     2ea:	17 04       	cpc	r1, r7
     2ec:	0c f0       	brlt	.+2      	; 0x2f0 <_Z8playNoteff+0x24a>
     2ee:	35 c1       	rjmp	.+618    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
		{
			_delay_us(half_period*1000);
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	4a e7       	ldi	r20, 0x7A	; 122
     2f6:	54 e4       	ldi	r21, 0x44	; 68
     2f8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     2fc:	69 87       	std	Y+9, r22	; 0x09
     2fe:	7a 87       	std	Y+10, r23	; 0x0a
     300:	8b 87       	std	Y+11, r24	; 0x0b
     302:	9c 87       	std	Y+12, r25	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     304:	2b ea       	ldi	r18, 0xAB	; 171
     306:	3a ea       	ldi	r19, 0xAA	; 170
     308:	4a e2       	ldi	r20, 0x2A	; 42
     30a:	50 e4       	ldi	r21, 0x40	; 64
     30c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     310:	6b 01       	movw	r12, r22
     312:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     314:	29 85       	ldd	r18, Y+9	; 0x09
     316:	3a 85       	ldd	r19, Y+10	; 0x0a
     318:	4b 85       	ldd	r20, Y+11	; 0x0b
     31a:	5c 85       	ldd	r21, Y+12	; 0x0c
     31c:	ca 01       	movw	r24, r20
     31e:	b9 01       	movw	r22, r18
     320:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
     324:	6d 83       	std	Y+5, r22	; 0x05
     326:	7e 83       	std	Y+6, r23	; 0x06
     328:	8f 83       	std	Y+7, r24	; 0x07
     32a:	98 87       	std	Y+8, r25	; 0x08
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     32c:	c7 01       	movw	r24, r14
     32e:	b6 01       	movw	r22, r12
     330:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     334:	b6 2e       	mov	r11, r22
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     336:	6d 81       	ldd	r22, Y+5	; 0x05
     338:	7e 81       	ldd	r23, Y+6	; 0x06
     33a:	8f 81       	ldd	r24, Y+7	; 0x07
     33c:	98 85       	ldd	r25, Y+8	; 0x08
     33e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     342:	7e 87       	std	Y+14, r23	; 0x0e
     344:	6d 87       	std	Y+13, r22	; 0x0d
     346:	1a 82       	std	Y+2, r1	; 0x02
     348:	19 82       	std	Y+1, r1	; 0x01
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     34a:	bf 86       	std	Y+15, r11	; 0x0f
     34c:	0f 2e       	mov	r0, r31
     34e:	f8 ec       	ldi	r31, 0xC8	; 200
     350:	2f 2e       	mov	r2, r31
     352:	31 2c       	mov	r3, r1
     354:	f0 2d       	mov	r31, r0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	99 8b       	std	Y+17, r25	; 0x11
     35c:	88 8b       	std	Y+16, r24	; 0x10
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e8       	ldi	r20, 0x80	; 128
     364:	5f e3       	ldi	r21, 0x3F	; 63
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     36e:	88 23       	and	r24, r24
     370:	0c f4       	brge	.+2      	; 0x374 <_Z8playNoteff+0x2ce>
     372:	65 c0       	rjmp	.+202    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		__ticks = 1;
	else if (__tmp2 > 65535)
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	3f ef       	ldi	r19, 0xFF	; 255
     378:	4f e7       	ldi	r20, 0x7F	; 127
     37a:	57 e4       	ldi	r21, 0x47	; 71
     37c:	6d 81       	ldd	r22, Y+5	; 0x05
     37e:	7e 81       	ldd	r23, Y+6	; 0x06
     380:	8f 81       	ldd	r24, Y+7	; 0x07
     382:	98 85       	ldd	r25, Y+8	; 0x08
     384:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     388:	18 16       	cp	r1, r24
     38a:	0c f0       	brlt	.+2      	; 0x38e <_Z8playNoteff+0x2e8>
     38c:	49 c0       	rjmp	.+146    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		_delay_ms(__us / 1000.0);
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	4a e7       	ldi	r20, 0x7A	; 122
     394:	54 e4       	ldi	r21, 0x44	; 68
     396:	69 85       	ldd	r22, Y+9	; 0x09
     398:	7a 85       	ldd	r23, Y+10	; 0x0a
     39a:	8b 85       	ldd	r24, Y+11	; 0x0b
     39c:	9c 85       	ldd	r25, Y+12	; 0x0c
     39e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
     3a2:	69 83       	std	Y+1, r22	; 0x01
     3a4:	7a 83       	std	Y+2, r23	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	4a ef       	ldi	r20, 0xFA	; 250
     3b0:	54 e4       	ldi	r21, 0x44	; 68
     3b2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     3b6:	4b 01       	movw	r8, r22
     3b8:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e8       	ldi	r20, 0x80	; 128
     3c0:	5f e3       	ldi	r21, 0x3F	; 63
     3c2:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     3c6:	88 23       	and	r24, r24
     3c8:	2c f1       	brlt	.+74     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		__ticks = 1;
	else if (__tmp > 65535)
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	3f ef       	ldi	r19, 0xFF	; 255
     3ce:	4f e7       	ldi	r20, 0x7F	; 127
     3d0:	57 e4       	ldi	r21, 0x47	; 71
     3d2:	c5 01       	movw	r24, r10
     3d4:	b4 01       	movw	r22, r8
     3d6:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     3da:	18 16       	cp	r1, r24
     3dc:	b4 f4       	brge	.+44     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e2       	ldi	r20, 0x20	; 32
     3e4:	51 e4       	ldi	r21, 0x41	; 65
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	9c 81       	ldd	r25, Y+4	; 0x04
     3ee:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     3f2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     3f6:	61 15       	cp	r22, r1
     3f8:	71 05       	cpc	r23, r1
     3fa:	21 f1       	breq	.+72     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3fc:	c1 01       	movw	r24, r2
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <_Z8playNoteff+0x358>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     402:	61 50       	subi	r22, 0x01	; 1
     404:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     406:	d1 f7       	brne	.-12     	; 0x3fc <_Z8playNoteff+0x356>
     408:	1d c0       	rjmp	.+58     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     40a:	c5 01       	movw	r24, r10
     40c:	b4 01       	movw	r22, r8
     40e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	cb 01       	movw	r24, r22
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41e:	12 c0       	rjmp	.+36     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	4f e7       	ldi	r20, 0x7F	; 127
     426:	53 e4       	ldi	r21, 0x43	; 67
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     430:	18 16       	cp	r1, r24
     432:	3c f4       	brge	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     434:	8d 85       	ldd	r24, Y+13	; 0x0d
     436:	9e 85       	ldd	r25, Y+14	; 0x0e
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43c:	06 c0       	rjmp	.+12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     43e:	11 e0       	ldi	r17, 0x01	; 1
     440:	01 c0       	rjmp	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     442:	1f 85       	ldd	r17, Y+15	; 0x0f
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     444:	81 2f       	mov	r24, r17
     446:	8a 95       	dec	r24
     448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
     44a:	2a 9a       	sbi	0x05, 2	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e8       	ldi	r20, 0x80	; 128
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     45c:	88 23       	and	r24, r24
     45e:	0c f4       	brge	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	65 c0       	rjmp	.+202    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		__ticks = 1;
	else if (__tmp2 > 65535)
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	3f ef       	ldi	r19, 0xFF	; 255
     466:	4f e7       	ldi	r20, 0x7F	; 127
     468:	57 e4       	ldi	r21, 0x47	; 71
     46a:	6d 81       	ldd	r22, Y+5	; 0x05
     46c:	7e 81       	ldd	r23, Y+6	; 0x06
     46e:	8f 81       	ldd	r24, Y+7	; 0x07
     470:	98 85       	ldd	r25, Y+8	; 0x08
     472:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     476:	18 16       	cp	r1, r24
     478:	0c f0       	brlt	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	49 c0       	rjmp	.+146    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
	{
		_delay_ms(__us / 1000.0);
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	4a e7       	ldi	r20, 0x7A	; 122
     482:	54 e4       	ldi	r21, 0x44	; 68
     484:	69 85       	ldd	r22, Y+9	; 0x09
     486:	7a 85       	ldd	r23, Y+10	; 0x0a
     488:	8b 85       	ldd	r24, Y+11	; 0x0b
     48a:	9c 85       	ldd	r25, Y+12	; 0x0c
     48c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divsf3>
     490:	69 83       	std	Y+1, r22	; 0x01
     492:	7a 83       	std	Y+2, r23	; 0x02
     494:	8b 83       	std	Y+3, r24	; 0x03
     496:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	4a ef       	ldi	r20, 0xFA	; 250
     49e:	54 e4       	ldi	r21, 0x44	; 68
     4a0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     4a4:	4b 01       	movw	r8, r22
     4a6:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e8       	ldi	r20, 0x80	; 128
     4ae:	5f e3       	ldi	r21, 0x3F	; 63
     4b0:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     4b4:	88 23       	and	r24, r24
     4b6:	2c f1       	brlt	.+74     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		__ticks = 1;
	else if (__tmp > 65535)
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	3f ef       	ldi	r19, 0xFF	; 255
     4bc:	4f e7       	ldi	r20, 0x7F	; 127
     4be:	57 e4       	ldi	r21, 0x47	; 71
     4c0:	c5 01       	movw	r24, r10
     4c2:	b4 01       	movw	r22, r8
     4c4:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     4c8:	18 16       	cp	r1, r24
     4ca:	b4 f4       	brge	.+44     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e2       	ldi	r20, 0x20	; 32
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	69 81       	ldd	r22, Y+1	; 0x01
     4d6:	7a 81       	ldd	r23, Y+2	; 0x02
     4d8:	8b 81       	ldd	r24, Y+3	; 0x03
     4da:	9c 81       	ldd	r25, Y+4	; 0x04
     4dc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     4e0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     4e4:	61 15       	cp	r22, r1
     4e6:	71 05       	cpc	r23, r1
     4e8:	21 f1       	breq	.+72     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     4ea:	c1 01       	movw	r24, r2
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f0:	61 50       	subi	r22, 0x01	; 1
     4f2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f4:	d1 f7       	brne	.-12     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4f6:	1d c0       	rjmp	.+58     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4f8:	c5 01       	movw	r24, r10
     4fa:	b4 01       	movw	r22, r8
     4fc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     500:	02 c0       	rjmp	.+4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	cb 01       	movw	r24, r22
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     50c:	12 c0       	rjmp	.+36     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	4f e7       	ldi	r20, 0x7F	; 127
     514:	53 e4       	ldi	r21, 0x43	; 67
     516:	c7 01       	movw	r24, r14
     518:	b6 01       	movw	r22, r12
     51a:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     51e:	18 16       	cp	r1, r24
     520:	3c f4       	brge	.+14     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     522:	8d 85       	ldd	r24, Y+13	; 0x0d
     524:	9e 85       	ldd	r25, Y+14	; 0x0e
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     52a:	06 c0       	rjmp	.+12     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     52c:	01 e0       	ldi	r16, 0x01	; 1
     52e:	01 c0       	rjmp	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     530:	0f 85       	ldd	r16, Y+15	; 0x0f
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     532:	80 2f       	mov	r24, r16
     534:	8a 95       	dec	r24
     536:	f1 f7       	brne	.-4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     538:	2a 98       	cbi	0x05, 2	; 5
		cycles=2*duration/wavelength;
		half_period = wavelength/2;

		
		
		for (int i=0;i<cycles;i++)
     53a:	28 89       	ldd	r18, Y+16	; 0x10
     53c:	39 89       	ldd	r19, Y+17	; 0x11
     53e:	2f 5f       	subi	r18, 0xFF	; 255
     540:	3f 4f       	sbci	r19, 0xFF	; 255
     542:	39 8b       	std	Y+17, r19	; 0x11
     544:	28 8b       	std	Y+16, r18	; 0x10
     546:	c9 01       	movw	r24, r18
     548:	33 0f       	add	r19, r19
     54a:	aa 0b       	sbc	r26, r26
     54c:	bb 0b       	sbc	r27, r27
     54e:	84 15       	cp	r24, r4
     550:	95 05       	cpc	r25, r5
     552:	a6 05       	cpc	r26, r6
     554:	b7 05       	cpc	r27, r7
     556:	0c f4       	brge	.+2      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     558:	02 cf       	rjmp	.-508    	; 0x35e <_Z8playNoteff+0x2b8>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		}
	}
}
     55a:	61 96       	adiw	r28, 0x11	; 17
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	7f 90       	pop	r7
     580:	6f 90       	pop	r6
     582:	5f 90       	pop	r5
     584:	4f 90       	pop	r4
     586:	3f 90       	pop	r3
     588:	2f 90       	pop	r2
     58a:	08 95       	ret

0000058c <_Z7melody1v>:



void melody1()
{
     58c:	2f 92       	push	r2
     58e:	3f 92       	push	r3
     590:	4f 92       	push	r4
     592:	5f 92       	push	r5
     594:	6f 92       	push	r6
     596:	7f 92       	push	r7
     598:	8f 92       	push	r8
     59a:	9f 92       	push	r9
     59c:	af 92       	push	r10
     59e:	bf 92       	push	r11
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	66 97       	sbiw	r28, 0x16	; 22
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
	int melody[] = {
		NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,0
	};
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	e0 e0       	ldi	r30, 0x00	; 0
     5c4:	f1 e0       	ldi	r31, 0x01	; 1
     5c6:	de 01       	movw	r26, r28
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	01 90       	ld	r0, Z+
     5cc:	0d 92       	st	X+, r0
     5ce:	8a 95       	dec	r24
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <_Z7melody1v+0x3e>

	int noteDurations[] = {
		4,4,4,4,1
	};
     5d2:	8a e0       	ldi	r24, 0x0A	; 10
     5d4:	ea e0       	ldi	r30, 0x0A	; 10
     5d6:	f1 e0       	ldi	r31, 0x01	; 1
     5d8:	de 01       	movw	r26, r28
     5da:	1b 96       	adiw	r26, 0x0b	; 11
     5dc:	01 90       	ld	r0, Z+
     5de:	0d 92       	st	X+, r0
     5e0:	8a 95       	dec	r24
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <_Z7melody1v+0x50>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
     5e4:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     5e8:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <__data_end>
     5ec:	1e 01       	movw	r2, r28
     5ee:	85 e1       	ldi	r24, 0x15	; 21
     5f0:	28 0e       	add	r2, r24
     5f2:	31 1c       	adc	r3, r1
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}

			float noteDuration = 200 / noteDurations[currentNote];
     5f4:	08 ec       	ldi	r16, 0xC8	; 200
     5f6:	10 e0       	ldi	r17, 0x00	; 0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	9d 8b       	std	Y+21, r25	; 0x15
     5fc:	1e 8a       	std	Y+22, r1	; 0x16
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
     5fe:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__data_end>
     602:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <__data_end+0x1>
     606:	89 2b       	or	r24, r25
     608:	09 f0       	breq	.+2      	; 0x60c <_Z7melody1v+0x80>
     60a:	75 c0       	rjmp	.+234    	; 0x6f6 <_Z7melody1v+0x16a>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     60c:	19 9b       	sbis	0x03, 1	; 3
     60e:	09 c0       	rjmp	.+18     	; 0x622 <_Z7melody1v+0x96>
     610:	02 c0       	rjmp	.+4      	; 0x616 <_Z7melody1v+0x8a>
     612:	19 9b       	sbis	0x03, 1	; 3
     614:	0d c0       	rjmp	.+26     	; 0x630 <_Z7melody1v+0xa4>
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	e0 93 6e 06 	sts	0x066E, r30	; 0x80066e <__data_end>
     61c:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     620:	ee cf       	rjmp	.-36     	; 0x5fe <_Z7melody1v+0x72>
     622:	7e 01       	movw	r14, r28
     624:	fb e0       	ldi	r31, 0x0B	; 11
     626:	ef 0e       	add	r14, r31
     628:	f1 1c       	adc	r15, r1
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	6c 01       	movw	r12, r24

			float noteDuration = 200 / noteDurations[currentNote];
     630:	f7 01       	movw	r30, r14
     632:	61 91       	ld	r22, Z+
     634:	71 91       	ld	r23, Z+
     636:	7f 01       	movw	r14, r30
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 be 09 	call	0x137c	; 0x137c <__divmodhi4>
     63e:	07 2e       	mov	r0, r23
     640:	00 0c       	add	r0, r0
     642:	88 0b       	sbc	r24, r24
     644:	99 0b       	sbc	r25, r25
     646:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     64a:	4b 01       	movw	r8, r22
     64c:	5c 01       	movw	r10, r24
			playNote(melody[currentNote],noteDuration);
     64e:	f6 01       	movw	r30, r12
     650:	61 91       	ld	r22, Z+
     652:	71 91       	ld	r23, Z+
     654:	6f 01       	movw	r12, r30
     656:	07 2e       	mov	r0, r23
     658:	00 0c       	add	r0, r0
     65a:	88 0b       	sbc	r24, r24
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     662:	a5 01       	movw	r20, r10
     664:	94 01       	movw	r18, r8
     666:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8playNoteff>
			float pauseBetweenNotes= noteDuration*2;
     66a:	a5 01       	movw	r20, r10
     66c:	94 01       	movw	r18, r8
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
     676:	2b 01       	movw	r4, r22
     678:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	4a ef       	ldi	r20, 0xFA	; 250
     680:	54 e4       	ldi	r21, 0x44	; 68
     682:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     686:	4b 01       	movw	r8, r22
     688:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e8       	ldi	r20, 0x80	; 128
     690:	5f e3       	ldi	r21, 0x3F	; 63
     692:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     696:	88 23       	and	r24, r24
     698:	1c f1       	brlt	.+70     	; 0x6e0 <_Z7melody1v+0x154>
		__ticks = 1;
	else if (__tmp > 65535)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	3f ef       	ldi	r19, 0xFF	; 255
     69e:	4f e7       	ldi	r20, 0x7F	; 127
     6a0:	57 e4       	ldi	r21, 0x47	; 71
     6a2:	c5 01       	movw	r24, r10
     6a4:	b4 01       	movw	r22, r8
     6a6:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     6aa:	18 16       	cp	r1, r24
     6ac:	a4 f4       	brge	.+40     	; 0x6d6 <_Z7melody1v+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e2       	ldi	r20, 0x20	; 32
     6b4:	51 e4       	ldi	r21, 0x41	; 65
     6b6:	c3 01       	movw	r24, r6
     6b8:	b2 01       	movw	r22, r4
     6ba:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     6be:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     6c2:	61 15       	cp	r22, r1
     6c4:	71 05       	cpc	r23, r1
     6c6:	89 f0       	breq	.+34     	; 0x6ea <_Z7melody1v+0x15e>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     6c8:	c8 01       	movw	r24, r16
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <_Z7melody1v+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ce:	61 50       	subi	r22, 0x01	; 1
     6d0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d2:	d1 f7       	brne	.-12     	; 0x6c8 <_Z7melody1v+0x13c>
     6d4:	0a c0       	rjmp	.+20     	; 0x6ea <_Z7melody1v+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d6:	c5 01       	movw	r24, r10
     6d8:	b4 01       	movw	r22, r8
     6da:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_Z7melody1v+0x158>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6e0:	6d 89       	ldd	r22, Y+21	; 0x15
     6e2:	7e 89       	ldd	r23, Y+22	; 0x16
     6e4:	cb 01       	movw	r24, r22
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <_Z7melody1v+0x15a>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     6ea:	15 b8       	out	0x05, r1	; 5

	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     6ec:	e2 14       	cp	r14, r2
     6ee:	f3 04       	cpc	r15, r3
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <_Z7melody1v+0x168>
     6f2:	8f cf       	rjmp	.-226    	; 0x612 <_Z7melody1v+0x86>
     6f4:	84 cf       	rjmp	.-248    	; 0x5fe <_Z7melody1v+0x72>
     6f6:	80 ea       	ldi	r24, 0xA0	; 160
     6f8:	9f e0       	ldi	r25, 0x0F	; 15
     6fa:	28 ec       	ldi	r18, 0xC8	; 200
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	f9 01       	movw	r30, r18
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <_Z7melody1v+0x174>
     704:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     706:	d9 f7       	brne	.-10     	; 0x6fe <_Z7melody1v+0x172>
		}

	}

	_delay_ms(400);
}
     708:	66 96       	adiw	r28, 0x16	; 22
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	8f 90       	pop	r8
     72c:	7f 90       	pop	r7
     72e:	6f 90       	pop	r6
     730:	5f 90       	pop	r5
     732:	4f 90       	pop	r4
     734:	3f 90       	pop	r3
     736:	2f 90       	pop	r2
     738:	08 95       	ret

0000073a <_Z7melody2v>:


void melody2()
{
     73a:	2f 92       	push	r2
     73c:	3f 92       	push	r3
     73e:	4f 92       	push	r4
     740:	5f 92       	push	r5
     742:	6f 92       	push	r6
     744:	7f 92       	push	r7
     746:	8f 92       	push	r8
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	c0 58       	subi	r28, 0x80	; 128
     764:	d1 40       	sbci	r29, 0x01	; 1
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
		NOTE_C5, 0, NOTE_AS4, NOTE_A4,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5
	};
     770:	80 ec       	ldi	r24, 0xC0	; 192
     772:	e4 e1       	ldi	r30, 0x14	; 20
     774:	f1 e0       	ldi	r31, 0x01	; 1
     776:	de 01       	movw	r26, r28
     778:	11 96       	adiw	r26, 0x01	; 1
     77a:	01 90       	ld	r0, Z+
     77c:	0d 92       	st	X+, r0
     77e:	8a 95       	dec	r24
     780:	e1 f7       	brne	.-8      	; 0x77a <_Z7melody2v+0x40>
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
	};
     782:	80 ec       	ldi	r24, 0xC0	; 192
     784:	e4 ed       	ldi	r30, 0xD4	; 212
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	de 01       	movw	r26, r28
     78a:	af 53       	subi	r26, 0x3F	; 63
     78c:	bf 4f       	sbci	r27, 0xFF	; 255
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	8a 95       	dec	r24
     794:	e1 f7       	brne	.-8      	; 0x78e <_Z7melody2v+0x54>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
     796:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     79a:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <__data_end>
     79e:	1e 01       	movw	r2, r28
     7a0:	8f e7       	ldi	r24, 0x7F	; 127
     7a2:	28 1a       	sub	r2, r24
     7a4:	8e ef       	ldi	r24, 0xFE	; 254
     7a6:	38 0a       	sbc	r3, r24
     7a8:	08 ec       	ldi	r16, 0xC8	; 200
     7aa:	10 e0       	ldi	r17, 0x00	; 0
     7ac:	07 c0       	rjmp	.+14     	; 0x7bc <_Z7melody2v+0x82>
	while (changing==0)
     7ae:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__data_end>
     7b2:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <__data_end+0x1>
     7b6:	89 2b       	or	r24, r25
     7b8:	09 f0       	breq	.+2      	; 0x7bc <_Z7melody2v+0x82>
     7ba:	7f c0       	rjmp	.+254    	; 0x8ba <_Z7melody2v+0x180>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     7bc:	19 9b       	sbis	0x03, 1	; 3
     7be:	09 c0       	rjmp	.+18     	; 0x7d2 <_Z7melody2v+0x98>
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <_Z7melody2v+0x8c>
     7c2:	19 9b       	sbis	0x03, 1	; 3
     7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <_Z7melody2v+0xa6>
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <__data_end>
     7cc:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     7d0:	6c c0       	rjmp	.+216    	; 0x8aa <_Z7melody2v+0x170>
     7d2:	5e 01       	movw	r10, r28
     7d4:	e1 ec       	ldi	r30, 0xC1	; 193
     7d6:	ae 0e       	add	r10, r30
     7d8:	b1 1c       	adc	r11, r1
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	4c 01       	movw	r8, r24

			float noteDuration = 375 / noteDurations[currentNote];
     7e0:	f5 01       	movw	r30, r10
     7e2:	61 91       	ld	r22, Z+
     7e4:	71 91       	ld	r23, Z+
     7e6:	5f 01       	movw	r10, r30
     7e8:	87 e7       	ldi	r24, 0x77	; 119
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 be 09 	call	0x137c	; 0x137c <__divmodhi4>
     7f0:	07 2e       	mov	r0, r23
     7f2:	00 0c       	add	r0, r0
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     7fc:	6b 01       	movw	r12, r22
     7fe:	7c 01       	movw	r14, r24
			playNote(melody[currentNote],noteDuration);
     800:	f4 01       	movw	r30, r8
     802:	61 91       	ld	r22, Z+
     804:	71 91       	ld	r23, Z+
     806:	4f 01       	movw	r8, r30
     808:	07 2e       	mov	r0, r23
     80a:	00 0c       	add	r0, r0
     80c:	88 0b       	sbc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     814:	a7 01       	movw	r20, r14
     816:	96 01       	movw	r18, r12
     818:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8playNoteff>
			float pauseBetweenNotes= noteDuration*1.30;
     81c:	26 e6       	ldi	r18, 0x66	; 102
     81e:	36 e6       	ldi	r19, 0x66	; 102
     820:	46 ea       	ldi	r20, 0xA6	; 166
     822:	5f e3       	ldi	r21, 0x3F	; 63
     824:	c7 01       	movw	r24, r14
     826:	b6 01       	movw	r22, r12
     828:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     82c:	2b 01       	movw	r4, r22
     82e:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4a ef       	ldi	r20, 0xFA	; 250
     836:	54 e4       	ldi	r21, 0x44	; 68
     838:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e8       	ldi	r20, 0x80	; 128
     846:	5f e3       	ldi	r21, 0x3F	; 63
     848:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     84c:	88 23       	and	r24, r24
     84e:	1c f1       	brlt	.+70     	; 0x896 <_Z7melody2v+0x15c>
		__ticks = 1;
	else if (__tmp > 65535)
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	3f ef       	ldi	r19, 0xFF	; 255
     854:	4f e7       	ldi	r20, 0x7F	; 127
     856:	57 e4       	ldi	r21, 0x47	; 71
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     860:	18 16       	cp	r1, r24
     862:	a4 f4       	brge	.+40     	; 0x88c <_Z7melody2v+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e2       	ldi	r20, 0x20	; 32
     86a:	51 e4       	ldi	r21, 0x41	; 65
     86c:	c3 01       	movw	r24, r6
     86e:	b2 01       	movw	r22, r4
     870:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     874:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     878:	61 15       	cp	r22, r1
     87a:	71 05       	cpc	r23, r1
     87c:	89 f0       	breq	.+34     	; 0x8a0 <_Z7melody2v+0x166>
     87e:	c8 01       	movw	r24, r16
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <_Z7melody2v+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     884:	61 50       	subi	r22, 0x01	; 1
     886:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     888:	d1 f7       	brne	.-12     	; 0x87e <_Z7melody2v+0x144>
     88a:	0a c0       	rjmp	.+20     	; 0x8a0 <_Z7melody2v+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88c:	c7 01       	movw	r24, r14
     88e:	b6 01       	movw	r22, r12
     890:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     894:	02 c0       	rjmp	.+4      	; 0x89a <_Z7melody2v+0x160>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	cb 01       	movw	r24, r22
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <_Z7melody2v+0x162>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     8a0:	15 b8       	out	0x05, r1	; 5
	
	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     8a2:	a2 14       	cp	r10, r2
     8a4:	b3 04       	cpc	r11, r3
     8a6:	09 f0       	breq	.+2      	; 0x8aa <_Z7melody2v+0x170>
     8a8:	8c cf       	rjmp	.-232    	; 0x7c2 <_Z7melody2v+0x88>
     8aa:	80 ea       	ldi	r24, 0xA0	; 160
     8ac:	9f e0       	ldi	r25, 0x0F	; 15
     8ae:	f8 01       	movw	r30, r16
     8b0:	31 97       	sbiw	r30, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <_Z7melody2v+0x176>
     8b4:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b6:	d9 f7       	brne	.-10     	; 0x8ae <_Z7melody2v+0x174>
     8b8:	7a cf       	rjmp	.-268    	; 0x7ae <_Z7melody2v+0x74>
		}
		_delay_ms(400);
		
	}

}
     8ba:	c0 58       	subi	r28, 0x80	; 128
     8bc:	de 4f       	sbci	r29, 0xFE	; 254
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	af 90       	pop	r10
     8dc:	9f 90       	pop	r9
     8de:	8f 90       	pop	r8
     8e0:	7f 90       	pop	r7
     8e2:	6f 90       	pop	r6
     8e4:	5f 90       	pop	r5
     8e6:	4f 90       	pop	r4
     8e8:	3f 90       	pop	r3
     8ea:	2f 90       	pop	r2
     8ec:	08 95       	ret

000008ee <_Z7melody3v>:

void melody3()
{
     8ee:	2f 92       	push	r2
     8f0:	3f 92       	push	r3
     8f2:	4f 92       	push	r4
     8f4:	5f 92       	push	r5
     8f6:	6f 92       	push	r6
     8f8:	7f 92       	push	r7
     8fa:	8f 92       	push	r8
     8fc:	9f 92       	push	r9
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	c4 52       	subi	r28, 0x24	; 36
     918:	d1 40       	sbci	r29, 0x01	; 1
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
		NOTE_E5, NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_B4, NOTE_C5, NOTE_C5, 0,
		NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_C5, NOTE_B4, NOTE_B4, 0,
		NOTE_C5, NOTE_A4, NOTE_B4,
	};
     924:	82 e9       	ldi	r24, 0x92	; 146
     926:	e4 e9       	ldi	r30, 0x94	; 148
     928:	f2 e0       	ldi	r31, 0x02	; 2
     92a:	de 01       	movw	r26, r28
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	01 90       	ld	r0, Z+
     930:	0d 92       	st	X+, r0
     932:	8a 95       	dec	r24
     934:	e1 f7       	brne	.-8      	; 0x92e <__stack+0x2f>
		8, 8, 8, 4, 8,
		8, 8, 4, 8, 8,
		4, 8, 4, 8,
		8, 8, 4, 8, 8,
		8, 8, 2
	};
     936:	82 e9       	ldi	r24, 0x92	; 146
     938:	e6 e2       	ldi	r30, 0x26	; 38
     93a:	f3 e0       	ldi	r31, 0x03	; 3
     93c:	de 01       	movw	r26, r28
     93e:	ad 56       	subi	r26, 0x6D	; 109
     940:	bf 4f       	sbci	r27, 0xFF	; 255
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
     948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0x43>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	changing=0;
     94a:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     94e:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <__data_end>
     952:	1e 01       	movw	r2, r28
     954:	8b ed       	ldi	r24, 0xDB	; 219
     956:	28 1a       	sub	r2, r24
     958:	8e ef       	ldi	r24, 0xFE	; 254
     95a:	38 0a       	sbc	r3, r24
     95c:	08 ec       	ldi	r16, 0xC8	; 200
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x71>
	while (changing==0)
     962:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__data_end>
     966:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <__data_end+0x1>
     96a:	89 2b       	or	r24, r25
     96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
     96e:	7f c0       	rjmp	.+254    	; 0xa6e <__stack+0x16f>
	{
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     970:	19 9b       	sbis	0x03, 1	; 3
     972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
     974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
     976:	19 9b       	sbis	0x03, 1	; 3
     978:	0d c0       	rjmp	.+26     	; 0x994 <__stack+0x95>
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <__data_end>
     980:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     984:	6c c0       	rjmp	.+216    	; 0xa5e <__stack+0x15f>
     986:	5e 01       	movw	r10, r28
     988:	e3 e9       	ldi	r30, 0x93	; 147
     98a:	ae 0e       	add	r10, r30
     98c:	b1 1c       	adc	r11, r1
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	4c 01       	movw	r8, r24

			float noteDuration = 375 / noteDurations[currentNote];
     994:	f5 01       	movw	r30, r10
     996:	61 91       	ld	r22, Z+
     998:	71 91       	ld	r23, Z+
     99a:	5f 01       	movw	r10, r30
     99c:	87 e7       	ldi	r24, 0x77	; 119
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 be 09 	call	0x137c	; 0x137c <__divmodhi4>
     9a4:	07 2e       	mov	r0, r23
     9a6:	00 0c       	add	r0, r0
     9a8:	88 0b       	sbc	r24, r24
     9aa:	99 0b       	sbc	r25, r25
     9ac:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
			playNote(melody[currentNote],noteDuration);
     9b4:	f4 01       	movw	r30, r8
     9b6:	61 91       	ld	r22, Z+
     9b8:	71 91       	ld	r23, Z+
     9ba:	4f 01       	movw	r8, r30
     9bc:	07 2e       	mov	r0, r23
     9be:	00 0c       	add	r0, r0
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     9c8:	a7 01       	movw	r20, r14
     9ca:	96 01       	movw	r18, r12
     9cc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8playNoteff>
			float pauseBetweenNotes= noteDuration*1.30;
     9d0:	26 e6       	ldi	r18, 0x66	; 102
     9d2:	36 e6       	ldi	r19, 0x66	; 102
     9d4:	46 ea       	ldi	r20, 0xA6	; 166
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	c7 01       	movw	r24, r14
     9da:	b6 01       	movw	r22, r12
     9dc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     9e0:	2b 01       	movw	r4, r22
     9e2:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4a ef       	ldi	r20, 0xFA	; 250
     9ea:	54 e4       	ldi	r21, 0x44	; 68
     9ec:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     9f0:	6b 01       	movw	r12, r22
     9f2:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e8       	ldi	r20, 0x80	; 128
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     a00:	88 23       	and	r24, r24
     a02:	1c f1       	brlt	.+70     	; 0xa4a <__stack+0x14b>
		__ticks = 1;
	else if (__tmp > 65535)
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	3f ef       	ldi	r19, 0xFF	; 255
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	57 e4       	ldi	r21, 0x47	; 71
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     a14:	18 16       	cp	r1, r24
     a16:	a4 f4       	brge	.+40     	; 0xa40 <__stack+0x141>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e2       	ldi	r20, 0x20	; 32
     a1e:	51 e4       	ldi	r21, 0x41	; 65
     a20:	c3 01       	movw	r24, r6
     a22:	b2 01       	movw	r22, r4
     a24:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     a28:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     a2c:	61 15       	cp	r22, r1
     a2e:	71 05       	cpc	r23, r1
     a30:	89 f0       	breq	.+34     	; 0xa54 <__stack+0x155>
     a32:	c8 01       	movw	r24, r16
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <__stack+0x135>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a38:	61 50       	subi	r22, 0x01	; 1
     a3a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	d1 f7       	brne	.-12     	; 0xa32 <__stack+0x133>
     a3e:	0a c0       	rjmp	.+20     	; 0xa54 <__stack+0x155>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a40:	c7 01       	movw	r24, r14
     a42:	b6 01       	movw	r22, r12
     a44:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <__stack+0x14f>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	cb 01       	movw	r24, r22
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <__stack+0x151>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     a54:	15 b8       	out	0x05, r1	; 5
	

	changing=0;
	while (changing==0)
	{
		for (int currentNote=0; currentNote<length;currentNote++)
     a56:	a2 14       	cp	r10, r2
     a58:	b3 04       	cpc	r11, r3
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	8c cf       	rjmp	.-232    	; 0x976 <__stack+0x77>
     a5e:	80 ea       	ldi	r24, 0xA0	; 160
     a60:	9f e0       	ldi	r25, 0x0F	; 15
     a62:	f8 01       	movw	r30, r16
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <__stack+0x165>
     a68:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <__stack+0x163>
     a6c:	7a cf       	rjmp	.-268    	; 0x962 <__stack+0x63>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
		}
		_delay_ms(400);
	}
}
     a6e:	cc 5d       	subi	r28, 0xDC	; 220
     a70:	de 4f       	sbci	r29, 0xFE	; 254
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	bf 90       	pop	r11
     a8e:	af 90       	pop	r10
     a90:	9f 90       	pop	r9
     a92:	8f 90       	pop	r8
     a94:	7f 90       	pop	r7
     a96:	6f 90       	pop	r6
     a98:	5f 90       	pop	r5
     a9a:	4f 90       	pop	r4
     a9c:	3f 90       	pop	r3
     a9e:	2f 90       	pop	r2
     aa0:	08 95       	ret

00000aa2 <_Z7melody4v>:

void melody4()
{
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	ce 58       	subi	r28, 0x8E	; 142
     acc:	d1 40       	sbci	r29, 0x01	; 1
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
		NOTE_F4,NOTE_AS3,NOTE_DS4,NOTE_D4,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3
	};
     ad8:	84 ef       	ldi	r24, 0xF4	; 244
     ada:	e8 eb       	ldi	r30, 0xB8	; 184
     adc:	f3 e0       	ldi	r31, 0x03	; 3
     ade:	de 01       	movw	r26, r28
     ae0:	11 96       	adiw	r26, 0x01	; 1
     ae2:	01 90       	ld	r0, Z+
     ae4:	0d 92       	st	X+, r0
     ae6:	8a 95       	dec	r24
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <_Z7melody4v+0x40>
		6,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12
	};
     aea:	8a e9       	ldi	r24, 0x9A	; 154
     aec:	ec ea       	ldi	r30, 0xAC	; 172
     aee:	f4 e0       	ldi	r31, 0x04	; 4
     af0:	de 01       	movw	r26, r28
     af2:	ab 50       	subi	r26, 0x0B	; 11
     af4:	bf 4f       	sbci	r27, 0xFF	; 255
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	8a 95       	dec	r24
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <_Z7melody4v+0x54>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
     afe:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     b02:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <__data_end>
     b06:	1e 01       	movw	r2, r28
     b08:	81 e7       	ldi	r24, 0x71	; 113
     b0a:	28 1a       	sub	r2, r24
     b0c:	8e ef       	ldi	r24, 0xFE	; 254
     b0e:	38 0a       	sbc	r3, r24
     b10:	08 ec       	ldi	r16, 0xC8	; 200
     b12:	10 e0       	ldi	r17, 0x00	; 0
     b14:	07 c0       	rjmp	.+14     	; 0xb24 <_Z7melody4v+0x82>
	while (changing==0)
     b16:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__data_end>
     b1a:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <__data_end+0x1>
     b1e:	89 2b       	or	r24, r25
     b20:	09 f0       	breq	.+2      	; 0xb24 <_Z7melody4v+0x82>
     b22:	7f c0       	rjmp	.+254    	; 0xc22 <_Z7melody4v+0x180>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     b24:	19 9b       	sbis	0x03, 1	; 3
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <_Z7melody4v+0x98>
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_Z7melody4v+0x8c>
     b2a:	19 9b       	sbis	0x03, 1	; 3
     b2c:	0d c0       	rjmp	.+26     	; 0xb48 <_Z7melody4v+0xa6>
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <__data_end>
     b34:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     b38:	6c c0       	rjmp	.+216    	; 0xc12 <_Z7melody4v+0x170>
     b3a:	5e 01       	movw	r10, r28
     b3c:	e5 ef       	ldi	r30, 0xF5	; 245
     b3e:	ae 0e       	add	r10, r30
     b40:	b1 1c       	adc	r11, r1
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	4c 01       	movw	r8, r24


			float noteDuration = 1375 / noteDurations[currentNote];
     b48:	f5 01       	movw	r30, r10
     b4a:	61 91       	ld	r22, Z+
     b4c:	71 91       	ld	r23, Z+
     b4e:	5f 01       	movw	r10, r30
     b50:	8f e5       	ldi	r24, 0x5F	; 95
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	0e 94 be 09 	call	0x137c	; 0x137c <__divmodhi4>
     b58:	07 2e       	mov	r0, r23
     b5a:	00 0c       	add	r0, r0
     b5c:	88 0b       	sbc	r24, r24
     b5e:	99 0b       	sbc	r25, r25
     b60:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     b64:	6b 01       	movw	r12, r22
     b66:	7c 01       	movw	r14, r24
			playNote(melody[currentNote],noteDuration);
     b68:	f4 01       	movw	r30, r8
     b6a:	61 91       	ld	r22, Z+
     b6c:	71 91       	ld	r23, Z+
     b6e:	4f 01       	movw	r8, r30
     b70:	07 2e       	mov	r0, r23
     b72:	00 0c       	add	r0, r0
     b74:	88 0b       	sbc	r24, r24
     b76:	99 0b       	sbc	r25, r25
     b78:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     b7c:	a7 01       	movw	r20, r14
     b7e:	96 01       	movw	r18, r12
     b80:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8playNoteff>
			float pauseBetweenNotes= noteDuration*1.30;
     b84:	26 e6       	ldi	r18, 0x66	; 102
     b86:	36 e6       	ldi	r19, 0x66	; 102
     b88:	46 ea       	ldi	r20, 0xA6	; 166
     b8a:	5f e3       	ldi	r21, 0x3F	; 63
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     b94:	2b 01       	movw	r4, r22
     b96:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	4a ef       	ldi	r20, 0xFA	; 250
     b9e:	54 e4       	ldi	r21, 0x44	; 68
     ba0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	1c f1       	brlt	.+70     	; 0xbfe <_Z7melody4v+0x15c>
		__ticks = 1;
	else if (__tmp > 65535)
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     bc8:	18 16       	cp	r1, r24
     bca:	a4 f4       	brge	.+40     	; 0xbf4 <_Z7melody4v+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e2       	ldi	r20, 0x20	; 32
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	c3 01       	movw	r24, r6
     bd6:	b2 01       	movw	r22, r4
     bd8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     bdc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     be0:	61 15       	cp	r22, r1
     be2:	71 05       	cpc	r23, r1
     be4:	89 f0       	breq	.+34     	; 0xc08 <_Z7melody4v+0x166>
     be6:	c8 01       	movw	r24, r16
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <_Z7melody4v+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bec:	61 50       	subi	r22, 0x01	; 1
     bee:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <_Z7melody4v+0x144>
     bf2:	0a c0       	rjmp	.+20     	; 0xc08 <_Z7melody4v+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf4:	c7 01       	movw	r24, r14
     bf6:	b6 01       	movw	r22, r12
     bf8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <_Z7melody4v+0x160>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	cb 01       	movw	r24, r22
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <_Z7melody4v+0x162>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     c08:	15 b8       	out	0x05, r1	; 5
	
	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     c0a:	a2 14       	cp	r10, r2
     c0c:	b3 04       	cpc	r11, r3
     c0e:	09 f0       	breq	.+2      	; 0xc12 <_Z7melody4v+0x170>
     c10:	8c cf       	rjmp	.-232    	; 0xb2a <_Z7melody4v+0x88>
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	97 e2       	ldi	r25, 0x27	; 39
     c16:	f8 01       	movw	r30, r16
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <_Z7melody4v+0x176>
     c1c:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1e:	d9 f7       	brne	.-10     	; 0xc16 <_Z7melody4v+0x174>
     c20:	7a cf       	rjmp	.-268    	; 0xb16 <_Z7melody4v+0x74>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
		}
		_delay_ms(1000);
	}
}
     c22:	c2 57       	subi	r28, 0x72	; 114
     c24:	de 4f       	sbci	r29, 0xFE	; 254
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	9f 90       	pop	r9
     c46:	8f 90       	pop	r8
     c48:	7f 90       	pop	r7
     c4a:	6f 90       	pop	r6
     c4c:	5f 90       	pop	r5
     c4e:	4f 90       	pop	r4
     c50:	3f 90       	pop	r3
     c52:	2f 90       	pop	r2
     c54:	08 95       	ret

00000c56 <_Z7melody5v>:


void melody5()
{
     c56:	2f 92       	push	r2
     c58:	3f 92       	push	r3
     c5a:	4f 92       	push	r4
     c5c:	5f 92       	push	r5
     c5e:	6f 92       	push	r6
     c60:	7f 92       	push	r7
     c62:	8f 92       	push	r8
     c64:	9f 92       	push	r9
     c66:	af 92       	push	r10
     c68:	bf 92       	push	r11
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	cc 52       	subi	r28, 0x2C	; 44
     c80:	d1 40       	sbci	r29, 0x01	; 1
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
		0,NOTE_C5,NOTE_D5,NOTE_DS5,
		NOTE_DS5,NOTE_F5,NOTE_D5,NOTE_D5,
		NOTE_DS5,NOTE_C5,NOTE_C5,NOTE_D5,
		NOTE_B4,NOTE_GS4,NOTE_G4,NOTE_C5
		
	};
     c8c:	84 e9       	ldi	r24, 0x94	; 148
     c8e:	e6 e4       	ldi	r30, 0x46	; 70
     c90:	f5 e0       	ldi	r31, 0x05	; 5
     c92:	de 01       	movw	r26, r28
     c94:	11 96       	adiw	r26, 0x01	; 1
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	8a 95       	dec	r24
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <_Z7melody5v+0x40>
		12,12,6,6,
		12,24,24,12,
		24,24,12,24,
		24,12,24,24,
		12,24,24,3
	};
     c9e:	84 e9       	ldi	r24, 0x94	; 148
     ca0:	ea ed       	ldi	r30, 0xDA	; 218
     ca2:	f5 e0       	ldi	r31, 0x05	; 5
     ca4:	de 01       	movw	r26, r28
     ca6:	ab 56       	subi	r26, 0x6B	; 107
     ca8:	bf 4f       	sbci	r27, 0xFF	; 255
     caa:	01 90       	ld	r0, Z+
     cac:	0d 92       	st	X+, r0
     cae:	8a 95       	dec	r24
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <_Z7melody5v+0x54>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
     cb2:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     cb6:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <__data_end>
     cba:	6e 01       	movw	r12, r28
     cbc:	87 ed       	ldi	r24, 0xD7	; 215
     cbe:	c8 1a       	sub	r12, r24
     cc0:	8e ef       	ldi	r24, 0xFE	; 254
     cc2:	d8 0a       	sbc	r13, r24
     cc4:	0f 2e       	mov	r0, r31
     cc6:	f8 ec       	ldi	r31, 0xC8	; 200
     cc8:	2f 2e       	mov	r2, r31
     cca:	31 2c       	mov	r3, r1
     ccc:	f0 2d       	mov	r31, r0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	c7 5d       	subi	r28, 0xD7	; 215
     cd2:	de 4f       	sbci	r29, 0xFE	; 254
     cd4:	98 83       	st	Y, r25
     cd6:	c9 52       	subi	r28, 0x29	; 41
     cd8:	d1 40       	sbci	r29, 0x01	; 1
     cda:	c6 5d       	subi	r28, 0xD6	; 214
     cdc:	de 4f       	sbci	r29, 0xFE	; 254
     cde:	18 82       	st	Y, r1
     ce0:	ca 52       	subi	r28, 0x2A	; 42
     ce2:	d1 40       	sbci	r29, 0x01	; 1
     ce4:	07 c0       	rjmp	.+14     	; 0xcf4 <_Z7melody5v+0x9e>
	while (changing==0)
     ce6:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <__data_end>
     cea:	90 91 6f 06 	lds	r25, 0x066F	; 0x80066f <__data_end+0x1>
     cee:	89 2b       	or	r24, r25
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <_Z7melody5v+0x9e>
     cf2:	b2 c0       	rjmp	.+356    	; 0xe58 <_Z7melody5v+0x202>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     cf4:	19 99       	sbic	0x03, 1	; 3
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <_Z7melody5v+0xbe>
     cf8:	ea e4       	ldi	r30, 0x4A	; 74
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	c5 5d       	subi	r28, 0xD5	; 213
     cfe:	de 4f       	sbci	r29, 0xFE	; 254
     d00:	f9 83       	std	Y+1, r31	; 0x01
     d02:	e8 83       	st	Y, r30
     d04:	cb 52       	subi	r28, 0x2B	; 43
     d06:	d1 40       	sbci	r29, 0x01	; 1
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <_Z7melody5v+0xb8>
     d0a:	19 99       	sbic	0x03, 1	; 3
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <_Z7melody5v+0xbe>

			for (int currentNote=0; currentNote<length;currentNote++)
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
				if( wantChange) {changing=1;break;}
     d0e:	19 9b       	sbis	0x03, 1	; 3
     d10:	18 c0       	rjmp	.+48     	; 0xd42 <_Z7melody5v+0xec>
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <_Z7melody5v+0xce>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	f0 93 6e 06 	sts	0x066E, r31	; 0x80066e <__data_end>
     d1a:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <__data_end+0x1>
     d1e:	94 c0       	rjmp	.+296    	; 0xe48 <_Z7melody5v+0x1f2>

			for (int currentNote=0; currentNote<length;currentNote++)
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
				if( wantChange) {changing=1;break;}
     d20:	19 9b       	sbis	0x03, 1	; 3
     d22:	15 c0       	rjmp	.+42     	; 0xd4e <_Z7melody5v+0xf8>
     d24:	c7 5d       	subi	r28, 0xD7	; 215
     d26:	de 4f       	sbci	r29, 0xFE	; 254
     d28:	88 81       	ld	r24, Y
     d2a:	c9 52       	subi	r28, 0x29	; 41
     d2c:	d1 40       	sbci	r29, 0x01	; 1
     d2e:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <__data_end>
     d32:	c6 5d       	subi	r28, 0xD6	; 214
     d34:	de 4f       	sbci	r29, 0xFE	; 254
     d36:	98 81       	ld	r25, Y
     d38:	ca 52       	subi	r28, 0x2A	; 42
     d3a:	d1 40       	sbci	r29, 0x01	; 1
     d3c:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <__data_end+0x1>
     d40:	73 c0       	rjmp	.+230    	; 0xe28 <_Z7melody5v+0x1d2>
     d42:	8e 01       	movw	r16, r28
     d44:	0b 56       	subi	r16, 0x6B	; 107
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	fe 01       	movw	r30, r28
     d4a:	31 96       	adiw	r30, 0x01	; 1
     d4c:	7f 01       	movw	r14, r30

				
				float noteDuration = 375*3 / noteDurations[currentNote];
     d4e:	f8 01       	movw	r30, r16
     d50:	61 91       	ld	r22, Z+
     d52:	71 91       	ld	r23, Z+
     d54:	8f 01       	movw	r16, r30
     d56:	85 e6       	ldi	r24, 0x65	; 101
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	0e 94 be 09 	call	0x137c	; 0x137c <__divmodhi4>
     d5e:	07 2e       	mov	r0, r23
     d60:	00 0c       	add	r0, r0
     d62:	88 0b       	sbc	r24, r24
     d64:	99 0b       	sbc	r25, r25
     d66:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     d6a:	2b 01       	movw	r4, r22
     d6c:	3c 01       	movw	r6, r24
				playNote(melody[currentNote],noteDuration);
     d6e:	f7 01       	movw	r30, r14
     d70:	61 91       	ld	r22, Z+
     d72:	71 91       	ld	r23, Z+
     d74:	7f 01       	movw	r14, r30
     d76:	07 2e       	mov	r0, r23
     d78:	00 0c       	add	r0, r0
     d7a:	88 0b       	sbc	r24, r24
     d7c:	99 0b       	sbc	r25, r25
     d7e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatsisf>
     d82:	a3 01       	movw	r20, r6
     d84:	92 01       	movw	r18, r4
     d86:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8playNoteff>
				float pauseBetweenNotes= noteDuration*1.30;
     d8a:	26 e6       	ldi	r18, 0x66	; 102
     d8c:	36 e6       	ldi	r19, 0x66	; 102
     d8e:	46 ea       	ldi	r20, 0xA6	; 166
     d90:	5f e3       	ldi	r21, 0x3F	; 63
     d92:	c3 01       	movw	r24, r6
     d94:	b2 01       	movw	r22, r4
     d96:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     d9a:	4b 01       	movw	r8, r22
     d9c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4a ef       	ldi	r20, 0xFA	; 250
     da4:	54 e4       	ldi	r21, 0x44	; 68
     da6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     daa:	2b 01       	movw	r4, r22
     dac:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e8       	ldi	r20, 0x80	; 128
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 ed 07 	call	0xfda	; 0xfda <__cmpsf2>
     dba:	88 23       	and	r24, r24
     dbc:	1c f1       	brlt	.+70     	; 0xe04 <_Z7melody5v+0x1ae>
		__ticks = 1;
	else if (__tmp > 65535)
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	3f ef       	ldi	r19, 0xFF	; 255
     dc2:	4f e7       	ldi	r20, 0x7F	; 127
     dc4:	57 e4       	ldi	r21, 0x47	; 71
     dc6:	c3 01       	movw	r24, r6
     dc8:	b2 01       	movw	r22, r4
     dca:	0e 94 4c 09 	call	0x1298	; 0x1298 <__gesf2>
     dce:	18 16       	cp	r1, r24
     dd0:	a4 f4       	brge	.+40     	; 0xdfa <_Z7melody5v+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e2       	ldi	r20, 0x20	; 32
     dd8:	51 e4       	ldi	r21, 0x41	; 65
     dda:	c5 01       	movw	r24, r10
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulsf3>
     de2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
		while(__ticks)
     de6:	61 15       	cp	r22, r1
     de8:	71 05       	cpc	r23, r1
     dea:	c9 f0       	breq	.+50     	; 0xe1e <_Z7melody5v+0x1c8>
     dec:	c1 01       	movw	r24, r2
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <_Z7melody5v+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df2:	61 50       	subi	r22, 0x01	; 1
     df4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	d1 f7       	brne	.-12     	; 0xdec <_Z7melody5v+0x196>
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <_Z7melody5v+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfa:	c3 01       	movw	r24, r6
     dfc:	b2 01       	movw	r22, r4
     dfe:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
     e02:	0a c0       	rjmp	.+20     	; 0xe18 <_Z7melody5v+0x1c2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     e04:	c7 5d       	subi	r28, 0xD7	; 215
     e06:	de 4f       	sbci	r29, 0xFE	; 254
     e08:	68 81       	ld	r22, Y
     e0a:	c9 52       	subi	r28, 0x29	; 41
     e0c:	d1 40       	sbci	r29, 0x01	; 1
     e0e:	c6 5d       	subi	r28, 0xD6	; 214
     e10:	de 4f       	sbci	r29, 0xFE	; 254
     e12:	78 81       	ld	r23, Y
     e14:	ca 52       	subi	r28, 0x2A	; 42
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	cb 01       	movw	r24, r22
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <_Z7melody5v+0x1c4>
				_delay_ms (pauseBetweenNotes);
				SPEAKER_PORT=0;
     e1e:	15 b8       	out	0x05, r1	; 5
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}

			for (int currentNote=0; currentNote<length;currentNote++)
     e20:	0c 15       	cp	r16, r12
     e22:	1d 05       	cpc	r17, r13
     e24:	09 f0       	breq	.+2      	; 0xe28 <_Z7melody5v+0x1d2>
     e26:	7c cf       	rjmp	.-264    	; 0xd20 <_Z7melody5v+0xca>
     e28:	c5 5d       	subi	r28, 0xD5	; 213
     e2a:	de 4f       	sbci	r29, 0xFE	; 254
     e2c:	88 81       	ld	r24, Y
     e2e:	99 81       	ldd	r25, Y+1	; 0x01
     e30:	cb 52       	subi	r28, 0x2B	; 43
     e32:	d1 40       	sbci	r29, 0x01	; 1
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	c5 5d       	subi	r28, 0xD5	; 213
     e38:	de 4f       	sbci	r29, 0xFE	; 254
     e3a:	99 83       	std	Y+1, r25	; 0x01
     e3c:	88 83       	st	Y, r24
     e3e:	cb 52       	subi	r28, 0x2B	; 43
     e40:	d1 40       	sbci	r29, 0x01	; 1

	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     e42:	89 2b       	or	r24, r25
     e44:	09 f0       	breq	.+2      	; 0xe48 <_Z7melody5v+0x1f2>
     e46:	61 cf       	rjmp	.-318    	; 0xd0a <_Z7melody5v+0xb4>
     e48:	80 ea       	ldi	r24, 0xA0	; 160
     e4a:	9f e0       	ldi	r25, 0x0F	; 15
     e4c:	f1 01       	movw	r30, r2
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <_Z7melody5v+0x1f8>
     e52:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e54:	d9 f7       	brne	.-10     	; 0xe4c <_Z7melody5v+0x1f6>
     e56:	47 cf       	rjmp	.-370    	; 0xce6 <_Z7melody5v+0x90>
				SPEAKER_PORT=0;
			}
		}
		_delay_ms(400);
	}
}
     e58:	c4 5d       	subi	r28, 0xD4	; 212
     e5a:	de 4f       	sbci	r29, 0xFE	; 254
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	7f 90       	pop	r7
     e80:	6f 90       	pop	r6
     e82:	5f 90       	pop	r5
     e84:	4f 90       	pop	r4
     e86:	3f 90       	pop	r3
     e88:	2f 90       	pop	r2
     e8a:	08 95       	ret

00000e8c <_Z10playMelodyi>:

void playMelody(int number){

	switch (number) {
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	99 f0       	breq	.+38     	; 0xeb8 <_Z10playMelodyi+0x2c>
     e92:	34 f4       	brge	.+12     	; 0xea0 <_Z10playMelodyi+0x14>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	49 f0       	breq	.+18     	; 0xeac <_Z10playMelodyi+0x20>
     e9a:	02 97       	sbiw	r24, 0x02	; 2
     e9c:	51 f0       	breq	.+20     	; 0xeb2 <_Z10playMelodyi+0x26>
     e9e:	08 95       	ret
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	91 05       	cpc	r25, r1
     ea4:	61 f0       	breq	.+24     	; 0xebe <_Z10playMelodyi+0x32>
     ea6:	05 97       	sbiw	r24, 0x05	; 5
     ea8:	69 f0       	breq	.+26     	; 0xec4 <_Z10playMelodyi+0x38>
     eaa:	08 95       	ret
		case 1:
		melody1();
     eac:	0e 94 c6 02 	call	0x58c	; 0x58c <_Z7melody1v>
		break;
     eb0:	08 95       	ret
		case 2:
		melody2();
     eb2:	0e 94 9d 03 	call	0x73a	; 0x73a <_Z7melody2v>
		break;
     eb6:	08 95       	ret
		case 3:
		melody3();
     eb8:	0e 94 77 04 	call	0x8ee	; 0x8ee <_Z7melody3v>
		break;
     ebc:	08 95       	ret
		case 4:
		melody4();
     ebe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Z7melody4v>
		break;
     ec2:	08 95       	ret
		case 5:
		melody5();
     ec4:	0e 94 2b 06 	call	0xc56	; 0xc56 <_Z7melody5v>
     ec8:	08 95       	ret

00000eca <main>:

}


int main(void)
{_delay_ms(1000);
     eca:	80 e1       	ldi	r24, 0x10	; 16
     ecc:	97 e2       	ldi	r25, 0x27	; 39
     ece:	28 ec       	ldi	r18, 0xC8	; 200
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	f9 01       	movw	r30, r18
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <main+0xa>
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	d9 f7       	brne	.-10     	; 0xed2 <main+0x8>
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <main+0x28>
	
	
	int i=0;
	while(1){
		
		playMelody(i);
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z10playMelodyi>
		i++;
     ee4:	21 96       	adiw	r28, 0x01	; 1
		if (i>5){i=1;}
     ee6:	c6 30       	cpi	r28, 0x06	; 6
     ee8:	d1 05       	cpc	r29, r1
     eea:	cc f3       	brlt	.-14     	; 0xede <main+0x14>
     eec:	c1 e0       	ldi	r28, 0x01	; 1
     eee:	d0 e0       	ldi	r29, 0x00	; 0
     ef0:	f6 cf       	rjmp	.-20     	; 0xede <main+0x14>
	
	
	int i=0;
	while(1){
		
		playMelody(i);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z10playMelodyi>
		i++;
     efa:	c1 e0       	ldi	r28, 0x01	; 1
     efc:	d0 e0       	ldi	r29, 0x00	; 0
     efe:	ef cf       	rjmp	.-34     	; 0xede <main+0x14>

00000f00 <__subsf3>:
     f00:	50 58       	subi	r21, 0x80	; 128

00000f02 <__addsf3>:
     f02:	bb 27       	eor	r27, r27
     f04:	aa 27       	eor	r26, r26
     f06:	0e 94 98 07 	call	0xf30	; 0xf30 <__addsf3x>
     f0a:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_round>
     f0e:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_pscA>
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__addsf3+0x20>
     f14:	0e 94 0b 09 	call	0x1216	; 0x1216 <__fp_pscB>
     f18:	20 f0       	brcs	.+8      	; 0xf22 <__addsf3+0x20>
     f1a:	39 f4       	brne	.+14     	; 0xf2a <__addsf3+0x28>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	19 f4       	brne	.+6      	; 0xf26 <__addsf3+0x24>
     f20:	26 f4       	brtc	.+8      	; 0xf2a <__addsf3+0x28>
     f22:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_nan>
     f26:	0e f4       	brtc	.+2      	; 0xf2a <__addsf3+0x28>
     f28:	e0 95       	com	r30
     f2a:	e7 fb       	bst	r30, 7
     f2c:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_inf>

00000f30 <__addsf3x>:
     f30:	e9 2f       	mov	r30, r25
     f32:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_split3>
     f36:	58 f3       	brcs	.-42     	; 0xf0e <__addsf3+0xc>
     f38:	ba 17       	cp	r27, r26
     f3a:	62 07       	cpc	r22, r18
     f3c:	73 07       	cpc	r23, r19
     f3e:	84 07       	cpc	r24, r20
     f40:	95 07       	cpc	r25, r21
     f42:	20 f0       	brcs	.+8      	; 0xf4c <__addsf3x+0x1c>
     f44:	79 f4       	brne	.+30     	; 0xf64 <__addsf3x+0x34>
     f46:	a6 f5       	brtc	.+104    	; 0xfb0 <__addsf3x+0x80>
     f48:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_zero>
     f4c:	0e f4       	brtc	.+2      	; 0xf50 <__addsf3x+0x20>
     f4e:	e0 95       	com	r30
     f50:	0b 2e       	mov	r0, r27
     f52:	ba 2f       	mov	r27, r26
     f54:	a0 2d       	mov	r26, r0
     f56:	0b 01       	movw	r0, r22
     f58:	b9 01       	movw	r22, r18
     f5a:	90 01       	movw	r18, r0
     f5c:	0c 01       	movw	r0, r24
     f5e:	ca 01       	movw	r24, r20
     f60:	a0 01       	movw	r20, r0
     f62:	11 24       	eor	r1, r1
     f64:	ff 27       	eor	r31, r31
     f66:	59 1b       	sub	r21, r25
     f68:	99 f0       	breq	.+38     	; 0xf90 <__addsf3x+0x60>
     f6a:	59 3f       	cpi	r21, 0xF9	; 249
     f6c:	50 f4       	brcc	.+20     	; 0xf82 <__addsf3x+0x52>
     f6e:	50 3e       	cpi	r21, 0xE0	; 224
     f70:	68 f1       	brcs	.+90     	; 0xfcc <__addsf3x+0x9c>
     f72:	1a 16       	cp	r1, r26
     f74:	f0 40       	sbci	r31, 0x00	; 0
     f76:	a2 2f       	mov	r26, r18
     f78:	23 2f       	mov	r18, r19
     f7a:	34 2f       	mov	r19, r20
     f7c:	44 27       	eor	r20, r20
     f7e:	58 5f       	subi	r21, 0xF8	; 248
     f80:	f3 cf       	rjmp	.-26     	; 0xf68 <__addsf3x+0x38>
     f82:	46 95       	lsr	r20
     f84:	37 95       	ror	r19
     f86:	27 95       	ror	r18
     f88:	a7 95       	ror	r26
     f8a:	f0 40       	sbci	r31, 0x00	; 0
     f8c:	53 95       	inc	r21
     f8e:	c9 f7       	brne	.-14     	; 0xf82 <__addsf3x+0x52>
     f90:	7e f4       	brtc	.+30     	; 0xfb0 <__addsf3x+0x80>
     f92:	1f 16       	cp	r1, r31
     f94:	ba 0b       	sbc	r27, r26
     f96:	62 0b       	sbc	r22, r18
     f98:	73 0b       	sbc	r23, r19
     f9a:	84 0b       	sbc	r24, r20
     f9c:	ba f0       	brmi	.+46     	; 0xfcc <__addsf3x+0x9c>
     f9e:	91 50       	subi	r25, 0x01	; 1
     fa0:	a1 f0       	breq	.+40     	; 0xfca <__addsf3x+0x9a>
     fa2:	ff 0f       	add	r31, r31
     fa4:	bb 1f       	adc	r27, r27
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	c2 f7       	brpl	.-16     	; 0xf9e <__addsf3x+0x6e>
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <__addsf3x+0x9c>
     fb0:	ba 0f       	add	r27, r26
     fb2:	62 1f       	adc	r22, r18
     fb4:	73 1f       	adc	r23, r19
     fb6:	84 1f       	adc	r24, r20
     fb8:	48 f4       	brcc	.+18     	; 0xfcc <__addsf3x+0x9c>
     fba:	87 95       	ror	r24
     fbc:	77 95       	ror	r23
     fbe:	67 95       	ror	r22
     fc0:	b7 95       	ror	r27
     fc2:	f7 95       	ror	r31
     fc4:	9e 3f       	cpi	r25, 0xFE	; 254
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__addsf3x+0x9a>
     fc8:	b0 cf       	rjmp	.-160    	; 0xf2a <__addsf3+0x28>
     fca:	93 95       	inc	r25
     fcc:	88 0f       	add	r24, r24
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <__addsf3x+0xa2>
     fd0:	99 27       	eor	r25, r25
     fd2:	ee 0f       	add	r30, r30
     fd4:	97 95       	ror	r25
     fd6:	87 95       	ror	r24
     fd8:	08 95       	ret

00000fda <__cmpsf2>:
     fda:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_cmp>
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <__cmpsf2+0x8>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	08 95       	ret

00000fe4 <__divsf3>:
     fe4:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3x>
     fe8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_round>
     fec:	0e 94 0b 09 	call	0x1216	; 0x1216 <__fp_pscB>
     ff0:	58 f0       	brcs	.+22     	; 0x1008 <__divsf3+0x24>
     ff2:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_pscA>
     ff6:	40 f0       	brcs	.+16     	; 0x1008 <__divsf3+0x24>
     ff8:	29 f4       	brne	.+10     	; 0x1004 <__divsf3+0x20>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	29 f0       	breq	.+10     	; 0x1008 <__divsf3+0x24>
     ffe:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_inf>
    1002:	51 11       	cpse	r21, r1
    1004:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_szero>
    1008:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_nan>

0000100c <__divsf3x>:
    100c:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_split3>
    1010:	68 f3       	brcs	.-38     	; 0xfec <__divsf3+0x8>

00001012 <__divsf3_pse>:
    1012:	99 23       	and	r25, r25
    1014:	b1 f3       	breq	.-20     	; 0x1002 <__divsf3+0x1e>
    1016:	55 23       	and	r21, r21
    1018:	91 f3       	breq	.-28     	; 0xffe <__divsf3+0x1a>
    101a:	95 1b       	sub	r25, r21
    101c:	55 0b       	sbc	r21, r21
    101e:	bb 27       	eor	r27, r27
    1020:	aa 27       	eor	r26, r26
    1022:	62 17       	cp	r22, r18
    1024:	73 07       	cpc	r23, r19
    1026:	84 07       	cpc	r24, r20
    1028:	38 f0       	brcs	.+14     	; 0x1038 <__divsf3_pse+0x26>
    102a:	9f 5f       	subi	r25, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	44 1f       	adc	r20, r20
    1034:	aa 1f       	adc	r26, r26
    1036:	a9 f3       	breq	.-22     	; 0x1022 <__divsf3_pse+0x10>
    1038:	35 d0       	rcall	.+106    	; 0x10a4 <__divsf3_pse+0x92>
    103a:	0e 2e       	mov	r0, r30
    103c:	3a f0       	brmi	.+14     	; 0x104c <__divsf3_pse+0x3a>
    103e:	e0 e8       	ldi	r30, 0x80	; 128
    1040:	32 d0       	rcall	.+100    	; 0x10a6 <__divsf3_pse+0x94>
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	e6 95       	lsr	r30
    1048:	00 1c       	adc	r0, r0
    104a:	ca f7       	brpl	.-14     	; 0x103e <__divsf3_pse+0x2c>
    104c:	2b d0       	rcall	.+86     	; 0x10a4 <__divsf3_pse+0x92>
    104e:	fe 2f       	mov	r31, r30
    1050:	29 d0       	rcall	.+82     	; 0x10a4 <__divsf3_pse+0x92>
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	bb 1f       	adc	r27, r27
    105a:	26 17       	cp	r18, r22
    105c:	37 07       	cpc	r19, r23
    105e:	48 07       	cpc	r20, r24
    1060:	ab 07       	cpc	r26, r27
    1062:	b0 e8       	ldi	r27, 0x80	; 128
    1064:	09 f0       	breq	.+2      	; 0x1068 <__divsf3_pse+0x56>
    1066:	bb 0b       	sbc	r27, r27
    1068:	80 2d       	mov	r24, r0
    106a:	bf 01       	movw	r22, r30
    106c:	ff 27       	eor	r31, r31
    106e:	93 58       	subi	r25, 0x83	; 131
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	3a f0       	brmi	.+14     	; 0x1082 <__divsf3_pse+0x70>
    1074:	9e 3f       	cpi	r25, 0xFE	; 254
    1076:	51 05       	cpc	r21, r1
    1078:	78 f0       	brcs	.+30     	; 0x1098 <__divsf3_pse+0x86>
    107a:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_inf>
    107e:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_szero>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	e4 f3       	brlt	.-8      	; 0x107e <__divsf3_pse+0x6c>
    1086:	98 3e       	cpi	r25, 0xE8	; 232
    1088:	d4 f3       	brlt	.-12     	; 0x107e <__divsf3_pse+0x6c>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b7 95       	ror	r27
    1092:	f7 95       	ror	r31
    1094:	9f 5f       	subi	r25, 0xFF	; 255
    1096:	c9 f7       	brne	.-14     	; 0x108a <__divsf3_pse+0x78>
    1098:	88 0f       	add	r24, r24
    109a:	91 1d       	adc	r25, r1
    109c:	96 95       	lsr	r25
    109e:	87 95       	ror	r24
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	66 0f       	add	r22, r22
    10a8:	77 1f       	adc	r23, r23
    10aa:	88 1f       	adc	r24, r24
    10ac:	bb 1f       	adc	r27, r27
    10ae:	62 17       	cp	r22, r18
    10b0:	73 07       	cpc	r23, r19
    10b2:	84 07       	cpc	r24, r20
    10b4:	ba 07       	cpc	r27, r26
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__divsf3_pse+0xae>
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba 0b       	sbc	r27, r26
    10c0:	ee 1f       	adc	r30, r30
    10c2:	88 f7       	brcc	.-30     	; 0x10a6 <__divsf3_pse+0x94>
    10c4:	e0 95       	com	r30
    10c6:	08 95       	ret

000010c8 <__fixsfsi>:
    10c8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__fixunssfsi>
    10cc:	68 94       	set
    10ce:	b1 11       	cpse	r27, r1
    10d0:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_szero>
    10d4:	08 95       	ret

000010d6 <__fixunssfsi>:
    10d6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__fp_splitA>
    10da:	88 f0       	brcs	.+34     	; 0x10fe <__fixunssfsi+0x28>
    10dc:	9f 57       	subi	r25, 0x7F	; 127
    10de:	98 f0       	brcs	.+38     	; 0x1106 <__fixunssfsi+0x30>
    10e0:	b9 2f       	mov	r27, r25
    10e2:	99 27       	eor	r25, r25
    10e4:	b7 51       	subi	r27, 0x17	; 23
    10e6:	b0 f0       	brcs	.+44     	; 0x1114 <__fixunssfsi+0x3e>
    10e8:	e1 f0       	breq	.+56     	; 0x1122 <__fixunssfsi+0x4c>
    10ea:	66 0f       	add	r22, r22
    10ec:	77 1f       	adc	r23, r23
    10ee:	88 1f       	adc	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	1a f0       	brmi	.+6      	; 0x10fa <__fixunssfsi+0x24>
    10f4:	ba 95       	dec	r27
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__fixunssfsi+0x14>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <__fixunssfsi+0x4c>
    10fa:	b1 30       	cpi	r27, 0x01	; 1
    10fc:	91 f0       	breq	.+36     	; 0x1122 <__fixunssfsi+0x4c>
    10fe:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_zero>
    1102:	b1 e0       	ldi	r27, 0x01	; 1
    1104:	08 95       	ret
    1106:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_zero>
    110a:	67 2f       	mov	r22, r23
    110c:	78 2f       	mov	r23, r24
    110e:	88 27       	eor	r24, r24
    1110:	b8 5f       	subi	r27, 0xF8	; 248
    1112:	39 f0       	breq	.+14     	; 0x1122 <__fixunssfsi+0x4c>
    1114:	b9 3f       	cpi	r27, 0xF9	; 249
    1116:	cc f3       	brlt	.-14     	; 0x110a <__fixunssfsi+0x34>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b3 95       	inc	r27
    1120:	d9 f7       	brne	.-10     	; 0x1118 <__fixunssfsi+0x42>
    1122:	3e f4       	brtc	.+14     	; 0x1132 <__fixunssfsi+0x5c>
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	61 95       	neg	r22
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	08 95       	ret

00001134 <__floatunsisf>:
    1134:	e8 94       	clt
    1136:	09 c0       	rjmp	.+18     	; 0x114a <__floatsisf+0x12>

00001138 <__floatsisf>:
    1138:	97 fb       	bst	r25, 7
    113a:	3e f4       	brtc	.+14     	; 0x114a <__floatsisf+0x12>
    113c:	90 95       	com	r25
    113e:	80 95       	com	r24
    1140:	70 95       	com	r23
    1142:	61 95       	neg	r22
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	99 23       	and	r25, r25
    114c:	a9 f0       	breq	.+42     	; 0x1178 <__floatsisf+0x40>
    114e:	f9 2f       	mov	r31, r25
    1150:	96 e9       	ldi	r25, 0x96	; 150
    1152:	bb 27       	eor	r27, r27
    1154:	93 95       	inc	r25
    1156:	f6 95       	lsr	r31
    1158:	87 95       	ror	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f1 11       	cpse	r31, r1
    1162:	f8 cf       	rjmp	.-16     	; 0x1154 <__floatsisf+0x1c>
    1164:	fa f4       	brpl	.+62     	; 0x11a4 <__floatsisf+0x6c>
    1166:	bb 0f       	add	r27, r27
    1168:	11 f4       	brne	.+4      	; 0x116e <__floatsisf+0x36>
    116a:	60 ff       	sbrs	r22, 0
    116c:	1b c0       	rjmp	.+54     	; 0x11a4 <__floatsisf+0x6c>
    116e:	6f 5f       	subi	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	16 c0       	rjmp	.+44     	; 0x11a4 <__floatsisf+0x6c>
    1178:	88 23       	and	r24, r24
    117a:	11 f0       	breq	.+4      	; 0x1180 <__floatsisf+0x48>
    117c:	96 e9       	ldi	r25, 0x96	; 150
    117e:	11 c0       	rjmp	.+34     	; 0x11a2 <__floatsisf+0x6a>
    1180:	77 23       	and	r23, r23
    1182:	21 f0       	breq	.+8      	; 0x118c <__floatsisf+0x54>
    1184:	9e e8       	ldi	r25, 0x8E	; 142
    1186:	87 2f       	mov	r24, r23
    1188:	76 2f       	mov	r23, r22
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <__floatsisf+0x5e>
    118c:	66 23       	and	r22, r22
    118e:	71 f0       	breq	.+28     	; 0x11ac <__floatsisf+0x74>
    1190:	96 e8       	ldi	r25, 0x86	; 134
    1192:	86 2f       	mov	r24, r22
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	2a f0       	brmi	.+10     	; 0x11a4 <__floatsisf+0x6c>
    119a:	9a 95       	dec	r25
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	da f7       	brpl	.-10     	; 0x119a <__floatsisf+0x62>
    11a4:	88 0f       	add	r24, r24
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	97 f9       	bld	r25, 7
    11ac:	08 95       	ret

000011ae <__fp_cmp>:
    11ae:	99 0f       	add	r25, r25
    11b0:	00 08       	sbc	r0, r0
    11b2:	55 0f       	add	r21, r21
    11b4:	aa 0b       	sbc	r26, r26
    11b6:	e0 e8       	ldi	r30, 0x80	; 128
    11b8:	fe ef       	ldi	r31, 0xFE	; 254
    11ba:	16 16       	cp	r1, r22
    11bc:	17 06       	cpc	r1, r23
    11be:	e8 07       	cpc	r30, r24
    11c0:	f9 07       	cpc	r31, r25
    11c2:	c0 f0       	brcs	.+48     	; 0x11f4 <__fp_cmp+0x46>
    11c4:	12 16       	cp	r1, r18
    11c6:	13 06       	cpc	r1, r19
    11c8:	e4 07       	cpc	r30, r20
    11ca:	f5 07       	cpc	r31, r21
    11cc:	98 f0       	brcs	.+38     	; 0x11f4 <__fp_cmp+0x46>
    11ce:	62 1b       	sub	r22, r18
    11d0:	73 0b       	sbc	r23, r19
    11d2:	84 0b       	sbc	r24, r20
    11d4:	95 0b       	sbc	r25, r21
    11d6:	39 f4       	brne	.+14     	; 0x11e6 <__fp_cmp+0x38>
    11d8:	0a 26       	eor	r0, r26
    11da:	61 f0       	breq	.+24     	; 0x11f4 <__fp_cmp+0x46>
    11dc:	23 2b       	or	r18, r19
    11de:	24 2b       	or	r18, r20
    11e0:	25 2b       	or	r18, r21
    11e2:	21 f4       	brne	.+8      	; 0x11ec <__fp_cmp+0x3e>
    11e4:	08 95       	ret
    11e6:	0a 26       	eor	r0, r26
    11e8:	09 f4       	brne	.+2      	; 0x11ec <__fp_cmp+0x3e>
    11ea:	a1 40       	sbci	r26, 0x01	; 1
    11ec:	a6 95       	lsr	r26
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	81 1d       	adc	r24, r1
    11f2:	81 1d       	adc	r24, r1
    11f4:	08 95       	ret

000011f6 <__fp_inf>:
    11f6:	97 f9       	bld	r25, 7
    11f8:	9f 67       	ori	r25, 0x7F	; 127
    11fa:	80 e8       	ldi	r24, 0x80	; 128
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	08 95       	ret

00001202 <__fp_nan>:
    1202:	9f ef       	ldi	r25, 0xFF	; 255
    1204:	80 ec       	ldi	r24, 0xC0	; 192
    1206:	08 95       	ret

00001208 <__fp_pscA>:
    1208:	00 24       	eor	r0, r0
    120a:	0a 94       	dec	r0
    120c:	16 16       	cp	r1, r22
    120e:	17 06       	cpc	r1, r23
    1210:	18 06       	cpc	r1, r24
    1212:	09 06       	cpc	r0, r25
    1214:	08 95       	ret

00001216 <__fp_pscB>:
    1216:	00 24       	eor	r0, r0
    1218:	0a 94       	dec	r0
    121a:	12 16       	cp	r1, r18
    121c:	13 06       	cpc	r1, r19
    121e:	14 06       	cpc	r1, r20
    1220:	05 06       	cpc	r0, r21
    1222:	08 95       	ret

00001224 <__fp_round>:
    1224:	09 2e       	mov	r0, r25
    1226:	03 94       	inc	r0
    1228:	00 0c       	add	r0, r0
    122a:	11 f4       	brne	.+4      	; 0x1230 <__fp_round+0xc>
    122c:	88 23       	and	r24, r24
    122e:	52 f0       	brmi	.+20     	; 0x1244 <__fp_round+0x20>
    1230:	bb 0f       	add	r27, r27
    1232:	40 f4       	brcc	.+16     	; 0x1244 <__fp_round+0x20>
    1234:	bf 2b       	or	r27, r31
    1236:	11 f4       	brne	.+4      	; 0x123c <__fp_round+0x18>
    1238:	60 ff       	sbrs	r22, 0
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <__fp_round+0x20>
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	8f 4f       	sbci	r24, 0xFF	; 255
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	08 95       	ret

00001246 <__fp_split3>:
    1246:	57 fd       	sbrc	r21, 7
    1248:	90 58       	subi	r25, 0x80	; 128
    124a:	44 0f       	add	r20, r20
    124c:	55 1f       	adc	r21, r21
    124e:	59 f0       	breq	.+22     	; 0x1266 <__fp_splitA+0x10>
    1250:	5f 3f       	cpi	r21, 0xFF	; 255
    1252:	71 f0       	breq	.+28     	; 0x1270 <__fp_splitA+0x1a>
    1254:	47 95       	ror	r20

00001256 <__fp_splitA>:
    1256:	88 0f       	add	r24, r24
    1258:	97 fb       	bst	r25, 7
    125a:	99 1f       	adc	r25, r25
    125c:	61 f0       	breq	.+24     	; 0x1276 <__fp_splitA+0x20>
    125e:	9f 3f       	cpi	r25, 0xFF	; 255
    1260:	79 f0       	breq	.+30     	; 0x1280 <__fp_splitA+0x2a>
    1262:	87 95       	ror	r24
    1264:	08 95       	ret
    1266:	12 16       	cp	r1, r18
    1268:	13 06       	cpc	r1, r19
    126a:	14 06       	cpc	r1, r20
    126c:	55 1f       	adc	r21, r21
    126e:	f2 cf       	rjmp	.-28     	; 0x1254 <__fp_split3+0xe>
    1270:	46 95       	lsr	r20
    1272:	f1 df       	rcall	.-30     	; 0x1256 <__fp_splitA>
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <__fp_splitA+0x30>
    1276:	16 16       	cp	r1, r22
    1278:	17 06       	cpc	r1, r23
    127a:	18 06       	cpc	r1, r24
    127c:	99 1f       	adc	r25, r25
    127e:	f1 cf       	rjmp	.-30     	; 0x1262 <__fp_splitA+0xc>
    1280:	86 95       	lsr	r24
    1282:	71 05       	cpc	r23, r1
    1284:	61 05       	cpc	r22, r1
    1286:	08 94       	sec
    1288:	08 95       	ret

0000128a <__fp_zero>:
    128a:	e8 94       	clt

0000128c <__fp_szero>:
    128c:	bb 27       	eor	r27, r27
    128e:	66 27       	eor	r22, r22
    1290:	77 27       	eor	r23, r23
    1292:	cb 01       	movw	r24, r22
    1294:	97 f9       	bld	r25, 7
    1296:	08 95       	ret

00001298 <__gesf2>:
    1298:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_cmp>
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <__gesf2+0x8>
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	08 95       	ret

000012a2 <__mulsf3>:
    12a2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__mulsf3x>
    12a6:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_round>
    12aa:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_pscA>
    12ae:	38 f0       	brcs	.+14     	; 0x12be <__mulsf3+0x1c>
    12b0:	0e 94 0b 09 	call	0x1216	; 0x1216 <__fp_pscB>
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__mulsf3+0x1c>
    12b6:	95 23       	and	r25, r21
    12b8:	11 f0       	breq	.+4      	; 0x12be <__mulsf3+0x1c>
    12ba:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_inf>
    12be:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__fp_nan>
    12c2:	11 24       	eor	r1, r1
    12c4:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_szero>

000012c8 <__mulsf3x>:
    12c8:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_split3>
    12cc:	70 f3       	brcs	.-36     	; 0x12aa <__mulsf3+0x8>

000012ce <__mulsf3_pse>:
    12ce:	95 9f       	mul	r25, r21
    12d0:	c1 f3       	breq	.-16     	; 0x12c2 <__mulsf3+0x20>
    12d2:	95 0f       	add	r25, r21
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	55 1f       	adc	r21, r21
    12d8:	62 9f       	mul	r22, r18
    12da:	f0 01       	movw	r30, r0
    12dc:	72 9f       	mul	r23, r18
    12de:	bb 27       	eor	r27, r27
    12e0:	f0 0d       	add	r31, r0
    12e2:	b1 1d       	adc	r27, r1
    12e4:	63 9f       	mul	r22, r19
    12e6:	aa 27       	eor	r26, r26
    12e8:	f0 0d       	add	r31, r0
    12ea:	b1 1d       	adc	r27, r1
    12ec:	aa 1f       	adc	r26, r26
    12ee:	64 9f       	mul	r22, r20
    12f0:	66 27       	eor	r22, r22
    12f2:	b0 0d       	add	r27, r0
    12f4:	a1 1d       	adc	r26, r1
    12f6:	66 1f       	adc	r22, r22
    12f8:	82 9f       	mul	r24, r18
    12fa:	22 27       	eor	r18, r18
    12fc:	b0 0d       	add	r27, r0
    12fe:	a1 1d       	adc	r26, r1
    1300:	62 1f       	adc	r22, r18
    1302:	73 9f       	mul	r23, r19
    1304:	b0 0d       	add	r27, r0
    1306:	a1 1d       	adc	r26, r1
    1308:	62 1f       	adc	r22, r18
    130a:	83 9f       	mul	r24, r19
    130c:	a0 0d       	add	r26, r0
    130e:	61 1d       	adc	r22, r1
    1310:	22 1f       	adc	r18, r18
    1312:	74 9f       	mul	r23, r20
    1314:	33 27       	eor	r19, r19
    1316:	a0 0d       	add	r26, r0
    1318:	61 1d       	adc	r22, r1
    131a:	23 1f       	adc	r18, r19
    131c:	84 9f       	mul	r24, r20
    131e:	60 0d       	add	r22, r0
    1320:	21 1d       	adc	r18, r1
    1322:	82 2f       	mov	r24, r18
    1324:	76 2f       	mov	r23, r22
    1326:	6a 2f       	mov	r22, r26
    1328:	11 24       	eor	r1, r1
    132a:	9f 57       	subi	r25, 0x7F	; 127
    132c:	50 40       	sbci	r21, 0x00	; 0
    132e:	9a f0       	brmi	.+38     	; 0x1356 <__mulsf3_pse+0x88>
    1330:	f1 f0       	breq	.+60     	; 0x136e <__mulsf3_pse+0xa0>
    1332:	88 23       	and	r24, r24
    1334:	4a f0       	brmi	.+18     	; 0x1348 <__mulsf3_pse+0x7a>
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	bb 1f       	adc	r27, r27
    133c:	66 1f       	adc	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	91 50       	subi	r25, 0x01	; 1
    1344:	50 40       	sbci	r21, 0x00	; 0
    1346:	a9 f7       	brne	.-22     	; 0x1332 <__mulsf3_pse+0x64>
    1348:	9e 3f       	cpi	r25, 0xFE	; 254
    134a:	51 05       	cpc	r21, r1
    134c:	80 f0       	brcs	.+32     	; 0x136e <__mulsf3_pse+0xa0>
    134e:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__fp_inf>
    1352:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_szero>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	e4 f3       	brlt	.-8      	; 0x1352 <__mulsf3_pse+0x84>
    135a:	98 3e       	cpi	r25, 0xE8	; 232
    135c:	d4 f3       	brlt	.-12     	; 0x1352 <__mulsf3_pse+0x84>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b7 95       	ror	r27
    1366:	f7 95       	ror	r31
    1368:	e7 95       	ror	r30
    136a:	9f 5f       	subi	r25, 0xFF	; 255
    136c:	c1 f7       	brne	.-16     	; 0x135e <__mulsf3_pse+0x90>
    136e:	fe 2b       	or	r31, r30
    1370:	88 0f       	add	r24, r24
    1372:	91 1d       	adc	r25, r1
    1374:	96 95       	lsr	r25
    1376:	87 95       	ror	r24
    1378:	97 f9       	bld	r25, 7
    137a:	08 95       	ret

0000137c <__divmodhi4>:
    137c:	97 fb       	bst	r25, 7
    137e:	07 2e       	mov	r0, r23
    1380:	16 f4       	brtc	.+4      	; 0x1386 <__divmodhi4+0xa>
    1382:	00 94       	com	r0
    1384:	07 d0       	rcall	.+14     	; 0x1394 <__divmodhi4_neg1>
    1386:	77 fd       	sbrc	r23, 7
    1388:	09 d0       	rcall	.+18     	; 0x139c <__divmodhi4_neg2>
    138a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__udivmodhi4>
    138e:	07 fc       	sbrc	r0, 7
    1390:	05 d0       	rcall	.+10     	; 0x139c <__divmodhi4_neg2>
    1392:	3e f4       	brtc	.+14     	; 0x13a2 <__divmodhi4_exit>

00001394 <__divmodhi4_neg1>:
    1394:	90 95       	com	r25
    1396:	81 95       	neg	r24
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	08 95       	ret

0000139c <__divmodhi4_neg2>:
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255

000013a2 <__divmodhi4_exit>:
    13a2:	08 95       	ret

000013a4 <__udivmodhi4>:
    13a4:	aa 1b       	sub	r26, r26
    13a6:	bb 1b       	sub	r27, r27
    13a8:	51 e1       	ldi	r21, 0x11	; 17
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <__udivmodhi4_ep>

000013ac <__udivmodhi4_loop>:
    13ac:	aa 1f       	adc	r26, r26
    13ae:	bb 1f       	adc	r27, r27
    13b0:	a6 17       	cp	r26, r22
    13b2:	b7 07       	cpc	r27, r23
    13b4:	10 f0       	brcs	.+4      	; 0x13ba <__udivmodhi4_ep>
    13b6:	a6 1b       	sub	r26, r22
    13b8:	b7 0b       	sbc	r27, r23

000013ba <__udivmodhi4_ep>:
    13ba:	88 1f       	adc	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	5a 95       	dec	r21
    13c0:	a9 f7       	brne	.-22     	; 0x13ac <__udivmodhi4_loop>
    13c2:	80 95       	com	r24
    13c4:	90 95       	com	r25
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	08 95       	ret

000013cc <_exit>:
    13cc:	f8 94       	cli

000013ce <__stop_program>:
    13ce:	ff cf       	rjmp	.-2      	; 0x13ce <__stop_program>
