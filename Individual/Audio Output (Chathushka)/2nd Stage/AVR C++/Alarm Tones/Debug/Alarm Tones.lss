
Alarm Tones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000056e  00800100  000017ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080066e  0080066e  00001db0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b2  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a20  00000000  00000000  00003852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c88  00000000  00000000  00004272  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00004efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cfe  00000000  00000000  00005832  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00007530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	7e 00       	.word	0x007e	; ????

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee ea       	ldi	r30, 0xAE	; 174
      7e:	f7 e1       	ldi	r31, 0x17	; 23
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ae 36       	cpi	r26, 0x6E	; 110
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	26 e0       	ldi	r18, 0x06	; 6
      8e:	ae e6       	ldi	r26, 0x6E	; 110
      90:	b6 e0       	ldi	r27, 0x06	; 6
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a4 37       	cpi	r26, 0x74	; 116
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 cf 0b 	call	0x179e	; 0x179e <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
      b6:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
//Creating an object from the Class 'Tone'

Tone alarmTone(2,1); // Enter pin numbers of the Buzzer and the Push Button respectively (PORT B)

int main(void)
{_delay_ms(1000);
      be:	80 e1       	ldi	r24, 0x10	; 16
      c0:	97 e2       	ldi	r25, 0x27	; 39
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
      c2:	20 e9       	ldi	r18, 0x90	; 144
      c4:	31 e0       	ldi	r19, 0x01	; 1
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0xa>
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x8>
      d0:	0c c0       	rjmp	.+24     	; 0xea <main+0x2c>
	
	
	int i=0;
	while(1){
		
		alarmTone.playMelody(i);
      d2:	be 01       	movw	r22, r28
      d4:	8e e6       	ldi	r24, 0x6E	; 110
      d6:	96 e0       	ldi	r25, 0x06	; 6
      d8:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN4Tone10playMelodyEi>
		i++;
      dc:	21 96       	adiw	r28, 0x01	; 1
		if (i>5){i=1;}
      de:	c6 30       	cpi	r28, 0x06	; 6
      e0:	d1 05       	cpc	r29, r1
      e2:	bc f3       	brlt	.-18     	; 0xd2 <main+0x14>
      e4:	c1 e0       	ldi	r28, 0x01	; 1
      e6:	d0 e0       	ldi	r29, 0x00	; 0
      e8:	f4 cf       	rjmp	.-24     	; 0xd2 <main+0x14>
	
	
	int i=0;
	while(1){
		
		alarmTone.playMelody(i);
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	8e e6       	ldi	r24, 0x6E	; 110
      f0:	96 e0       	ldi	r25, 0x06	; 6
      f2:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN4Tone10playMelodyEi>
		i++;
      f6:	c1 e0       	ldi	r28, 0x01	; 1
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	eb cf       	rjmp	.-42     	; 0xd2 <main+0x14>

000000fc <_GLOBAL__sub_I_alarmTone>:
#include <util/delay.h>
#include "Tone.h"

//Creating an object from the Class 'Tone'

Tone alarmTone(2,1); // Enter pin numbers of the Buzzer and the Push Button respectively (PORT B)
      fc:	41 e0       	ldi	r20, 0x01	; 1
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	62 e0       	ldi	r22, 0x02	; 2
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	8e e6       	ldi	r24, 0x6E	; 110
     106:	96 e0       	ldi	r25, 0x06	; 6
     108:	0e 94 87 00 	call	0x10e	; 0x10e <_ZN4ToneC1Eii>
     10c:	08 95       	ret

0000010e <_ZN4ToneC1Eii>:

int changing;

Tone::Tone(int pin_1,int pin_2)
{
	SPEAKER_PIN=pin_1;
     10e:	fc 01       	movw	r30, r24
     110:	71 83       	std	Z+1, r23	; 0x01
     112:	60 83       	st	Z, r22
	BUTTON_PIN =pin_2;
     114:	53 83       	std	Z+3, r21	; 0x03
     116:	42 83       	std	Z+2, r20	; 0x02
     118:	08 95       	ret

0000011a <_ZN4Tone8playNoteEff>:
}

//Function to play a single note

void Tone:: playNote(float frequency, float duration)
{
     11a:	2f 92       	push	r2
     11c:	3f 92       	push	r3
     11e:	4f 92       	push	r4
     120:	5f 92       	push	r5
     122:	6f 92       	push	r6
     124:	7f 92       	push	r7
     126:	8f 92       	push	r8
     128:	9f 92       	push	r9
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	63 97       	sbiw	r28, 0x13	; 19
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	1c 01       	movw	r2, r24
     150:	6a 01       	movw	r12, r20
     152:	7b 01       	movw	r14, r22
     154:	c9 01       	movw	r24, r18
     156:	b8 01       	movw	r22, r16
	duration*=0.5;
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e0       	ldi	r20, 0x00	; 0
     15e:	5f e3       	ldi	r21, 0x3F	; 63
     160:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     164:	4b 01       	movw	r8, r22
     166:	5c 01       	movw	r10, r24
	long int cycles;
	float half_period;
	float wavelength;
	
	SPEAKER_DDR |= (1 << SPEAKER_PIN);
     168:	24 b1       	in	r18, 0x04	; 4
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	f1 01       	movw	r30, r2
     170:	00 80       	ld	r0, Z
     172:	02 c0       	rjmp	.+4      	; 0x178 <_ZN4Tone8playNoteEff+0x5e>
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	0a 94       	dec	r0
     17a:	e2 f7       	brpl	.-8      	; 0x174 <_ZN4Tone8playNoteEff+0x5a>
     17c:	82 2b       	or	r24, r18
     17e:	84 b9       	out	0x04, r24	; 4
	if (frequency==0){
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	c7 01       	movw	r24, r14
     188:	b6 01       	movw	r22, r12
     18a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     18e:	81 11       	cpse	r24, r1
     190:	d9 c0       	rjmp	.+434    	; 0x344 <_ZN4Tone8playNoteEff+0x22a>
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     192:	25 b1       	in	r18, 0x05	; 5
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	f1 01       	movw	r30, r2
     19a:	00 80       	ld	r0, Z
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_ZN4Tone8playNoteEff+0x88>
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	0a 94       	dec	r0
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <_ZN4Tone8playNoteEff+0x84>
     1a6:	80 95       	com	r24
     1a8:	82 23       	and	r24, r18
     1aa:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     1ac:	2b ea       	ldi	r18, 0xAB	; 171
     1ae:	3a ea       	ldi	r19, 0xAA	; 170
     1b0:	4a ea       	ldi	r20, 0xAA	; 170
     1b2:	50 e4       	ldi	r21, 0x40	; 64
     1b4:	c5 01       	movw	r24, r10
     1b6:	b4 01       	movw	r22, r8
     1b8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     1bc:	6b 01       	movw	r12, r22
     1be:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	40 e8       	ldi	r20, 0x80	; 128
     1c6:	5f e3       	ldi	r21, 0x3F	; 63
     1c8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	0c f4       	brge	.+2      	; 0x1d2 <_ZN4Tone8playNoteEff+0xb8>
     1d0:	70 c0       	rjmp	.+224    	; 0x2b2 <_ZN4Tone8playNoteEff+0x198>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e8       	ldi	r20, 0x80	; 128
     1d8:	50 e4       	ldi	r21, 0x40	; 64
     1da:	c5 01       	movw	r24, r10
     1dc:	b4 01       	movw	r22, r8
     1de:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     1e2:	2b 01       	movw	r4, r22
     1e4:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	3f ef       	ldi	r19, 0xFF	; 255
     1ea:	4f e7       	ldi	r20, 0x7F	; 127
     1ec:	57 e4       	ldi	r21, 0x47	; 71
     1ee:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	0c f0       	brlt	.+2      	; 0x1f8 <_ZN4Tone8playNoteEff+0xde>
     1f6:	45 c0       	rjmp	.+138    	; 0x282 <_ZN4Tone8playNoteEff+0x168>
	{
		_delay_ms(__us / 1000.0);
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	4a e7       	ldi	r20, 0x7A	; 122
     1fe:	54 e4       	ldi	r21, 0x44	; 68
     200:	c5 01       	movw	r24, r10
     202:	b4 01       	movw	r22, r8
     204:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3>
     208:	2b 01       	movw	r4, r22
     20a:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	4a e7       	ldi	r20, 0x7A	; 122
     212:	55 e4       	ldi	r21, 0x45	; 69
     214:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e8       	ldi	r20, 0x80	; 128
     222:	5f e3       	ldi	r21, 0x3F	; 63
     224:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     228:	88 23       	and	r24, r24
     22a:	2c f1       	brlt	.+74     	; 0x276 <_ZN4Tone8playNoteEff+0x15c>
		__ticks = 1;
	else if (__tmp > 65535)
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	3f ef       	ldi	r19, 0xFF	; 255
     230:	4f e7       	ldi	r20, 0x7F	; 127
     232:	57 e4       	ldi	r21, 0x47	; 71
     234:	c7 01       	movw	r24, r14
     236:	b6 01       	movw	r22, r12
     238:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     23c:	18 16       	cp	r1, r24
     23e:	b4 f4       	brge	.+44     	; 0x26c <_ZN4Tone8playNoteEff+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e2       	ldi	r20, 0x20	; 32
     246:	51 e4       	ldi	r21, 0x41	; 65
     248:	c3 01       	movw	r24, r6
     24a:	b2 01       	movw	r22, r4
     24c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     250:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     254:	61 15       	cp	r22, r1
     256:	71 05       	cpc	r23, r1
     258:	71 f1       	breq	.+92     	; 0x2b6 <_ZN4Tone8playNoteEff+0x19c>
     25a:	20 e9       	ldi	r18, 0x90	; 144
     25c:	31 e0       	ldi	r19, 0x01	; 1
     25e:	c9 01       	movw	r24, r18
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <_ZN4Tone8playNoteEff+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     264:	61 50       	subi	r22, 0x01	; 1
     266:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     268:	d1 f7       	brne	.-12     	; 0x25e <_ZN4Tone8playNoteEff+0x144>
     26a:	25 c0       	rjmp	.+74     	; 0x2b6 <_ZN4Tone8playNoteEff+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     26c:	c7 01       	movw	r24, r14
     26e:	b6 01       	movw	r22, r12
     270:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     274:	02 c0       	rjmp	.+4      	; 0x27a <_ZN4Tone8playNoteEff+0x160>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	cb 01       	movw	r24, r22
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <_ZN4Tone8playNoteEff+0x162>
     280:	1a c0       	rjmp	.+52     	; 0x2b6 <_ZN4Tone8playNoteEff+0x19c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	4f e7       	ldi	r20, 0x7F	; 127
     288:	53 e4       	ldi	r21, 0x43	; 67
     28a:	c7 01       	movw	r24, r14
     28c:	b6 01       	movw	r22, r12
     28e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     292:	18 16       	cp	r1, r24
     294:	44 f4       	brge	.+16     	; 0x2a6 <_ZN4Tone8playNoteEff+0x18c>
     296:	c3 01       	movw	r24, r6
     298:	b2 01       	movw	r22, r4
     29a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     29e:	cb 01       	movw	r24, r22
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <_ZN4Tone8playNoteEff+0x186>
     2a4:	0b c0       	rjmp	.+22     	; 0x2bc <_ZN4Tone8playNoteEff+0x1a2>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     2ae:	69 83       	std	Y+1, r22	; 0x01
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_ZN4Tone8playNoteEff+0x19c>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     2b2:	e1 e0       	ldi	r30, 0x01	; 1
     2b4:	e9 83       	std	Y+1, r30	; 0x01
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     2b6:	f9 81       	ldd	r31, Y+1	; 0x01
     2b8:	fa 95       	dec	r31
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <_ZN4Tone8playNoteEff+0x19e>
		_delay_us(duration);
		float pauseBetweenNotes= duration*2;
     2bc:	a5 01       	movw	r20, r10
     2be:	94 01       	movw	r18, r8
     2c0:	c5 01       	movw	r24, r10
     2c2:	b4 01       	movw	r22, r8
     2c4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__addsf3>
     2c8:	4b 01       	movw	r8, r22
     2ca:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	4a e7       	ldi	r20, 0x7A	; 122
     2d2:	55 e4       	ldi	r21, 0x45	; 69
     2d4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     2d8:	6b 01       	movw	r12, r22
     2da:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e8       	ldi	r20, 0x80	; 128
     2e2:	5f e3       	ldi	r21, 0x3F	; 63
     2e4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     2e8:	88 23       	and	r24, r24
     2ea:	34 f1       	brlt	.+76     	; 0x338 <_ZN4Tone8playNoteEff+0x21e>
		__ticks = 1;
	else if (__tmp > 65535)
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	3f ef       	ldi	r19, 0xFF	; 255
     2f0:	4f e7       	ldi	r20, 0x7F	; 127
     2f2:	57 e4       	ldi	r21, 0x47	; 71
     2f4:	c7 01       	movw	r24, r14
     2f6:	b6 01       	movw	r22, r12
     2f8:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     2fc:	18 16       	cp	r1, r24
     2fe:	bc f4       	brge	.+46     	; 0x32e <_ZN4Tone8playNoteEff+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e2       	ldi	r20, 0x20	; 32
     306:	51 e4       	ldi	r21, 0x41	; 65
     308:	c5 01       	movw	r24, r10
     30a:	b4 01       	movw	r22, r8
     30c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     310:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     314:	61 15       	cp	r22, r1
     316:	71 05       	cpc	r23, r1
     318:	09 f4       	brne	.+2      	; 0x31c <_ZN4Tone8playNoteEff+0x202>
     31a:	96 c1       	rjmp	.+812    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     31c:	20 e9       	ldi	r18, 0x90	; 144
     31e:	31 e0       	ldi	r19, 0x01	; 1
     320:	c9 01       	movw	r24, r18
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <_ZN4Tone8playNoteEff+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     326:	61 50       	subi	r22, 0x01	; 1
     328:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     32a:	d1 f7       	brne	.-12     	; 0x320 <_ZN4Tone8playNoteEff+0x206>
     32c:	8d c1       	rjmp	.+794    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     32e:	c7 01       	movw	r24, r14
     330:	b6 01       	movw	r22, r12
     332:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     336:	02 c0       	rjmp	.+4      	; 0x33c <_ZN4Tone8playNoteEff+0x222>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	cb 01       	movw	r24, r22
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <_ZN4Tone8playNoteEff+0x224>
     342:	82 c1       	rjmp	.+772    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
			_delay_ms (pauseBetweenNotes);
	}
	
	
	else{
		wavelength=(1/frequency)*1000;
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	80 e8       	ldi	r24, 0x80	; 128
     34e:	9f e3       	ldi	r25, 0x3F	; 63
     350:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	4a e7       	ldi	r20, 0x7A	; 122
     35a:	54 e4       	ldi	r21, 0x44	; 68
     35c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     360:	6b 01       	movw	r12, r22
     362:	7c 01       	movw	r14, r24
		cycles=2*duration/wavelength;
     364:	a5 01       	movw	r20, r10
     366:	94 01       	movw	r18, r8
     368:	c5 01       	movw	r24, r10
     36a:	b4 01       	movw	r22, r8
     36c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__addsf3>
     370:	a7 01       	movw	r20, r14
     372:	96 01       	movw	r18, r12
     374:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3>
     378:	0e 94 4d 0a 	call	0x149a	; 0x149a <__fixsfsi>
     37c:	4b 01       	movw	r8, r22
     37e:	5c 01       	movw	r10, r24
		half_period = wavelength/2;
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	5f e3       	ldi	r21, 0x3F	; 63
     388:	c7 01       	movw	r24, r14
     38a:	b6 01       	movw	r22, r12
     38c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>

		
		
		for (int i=0;i<cycles;i++)
     390:	18 14       	cp	r1, r8
     392:	19 04       	cpc	r1, r9
     394:	1a 04       	cpc	r1, r10
     396:	1b 04       	cpc	r1, r11
     398:	0c f0       	brlt	.+2      	; 0x39c <_ZN4Tone8playNoteEff+0x282>
     39a:	56 c1       	rjmp	.+684    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
		{
			_delay_us(half_period*1000);
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	4a e7       	ldi	r20, 0x7A	; 122
     3a2:	54 e4       	ldi	r21, 0x44	; 68
     3a4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     3a8:	6d 87       	std	Y+13, r22	; 0x0d
     3aa:	7e 87       	std	Y+14, r23	; 0x0e
     3ac:	8f 87       	std	Y+15, r24	; 0x0f
     3ae:	98 8b       	std	Y+16, r25	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     3b0:	2b ea       	ldi	r18, 0xAB	; 171
     3b2:	3a ea       	ldi	r19, 0xAA	; 170
     3b4:	4a ea       	ldi	r20, 0xAA	; 170
     3b6:	50 e4       	ldi	r21, 0x40	; 64
     3b8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     3bc:	6b 01       	movw	r12, r22
     3be:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e8       	ldi	r20, 0x80	; 128
     3c6:	50 e4       	ldi	r21, 0x40	; 64
     3c8:	6d 85       	ldd	r22, Y+13	; 0x0d
     3ca:	7e 85       	ldd	r23, Y+14	; 0x0e
     3cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ce:	98 89       	ldd	r25, Y+16	; 0x10
     3d0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     3d4:	69 87       	std	Y+9, r22	; 0x09
     3d6:	7a 87       	std	Y+10, r23	; 0x0a
     3d8:	8b 87       	std	Y+11, r24	; 0x0b
     3da:	9c 87       	std	Y+12, r25	; 0x0c
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     3e4:	6b 8b       	std	Y+19, r22	; 0x13
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     3e6:	69 85       	ldd	r22, Y+9	; 0x09
     3e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     3ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ee:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     3f2:	7a 8b       	std	Y+18, r23	; 0x12
     3f4:	69 8b       	std	Y+17, r22	; 0x11
     3f6:	00 e0       	ldi	r16, 0x00	; 0
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	0f 2e       	mov	r0, r31
     3fc:	f0 e9       	ldi	r31, 0x90	; 144
     3fe:	6f 2e       	mov	r6, r31
     400:	77 24       	eor	r7, r7
     402:	73 94       	inc	r7
     404:	f0 2d       	mov	r31, r0
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 e8       	ldi	r20, 0x80	; 128
     40c:	5f e3       	ldi	r21, 0x3F	; 63
     40e:	c7 01       	movw	r24, r14
     410:	b6 01       	movw	r22, r12
     412:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     416:	88 23       	and	r24, r24
     418:	0c f4       	brge	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	6b c0       	rjmp	.+214    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
		__ticks = 1;
	else if (__tmp2 > 65535)
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	3f ef       	ldi	r19, 0xFF	; 255
     420:	4f e7       	ldi	r20, 0x7F	; 127
     422:	57 e4       	ldi	r21, 0x47	; 71
     424:	69 85       	ldd	r22, Y+9	; 0x09
     426:	7a 85       	ldd	r23, Y+10	; 0x0a
     428:	8b 85       	ldd	r24, Y+11	; 0x0b
     42a:	9c 85       	ldd	r25, Y+12	; 0x0c
     42c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     430:	18 16       	cp	r1, r24
     432:	0c f0       	brlt	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	4f c0       	rjmp	.+158    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	{
		_delay_ms(__us / 1000.0);
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	4a e7       	ldi	r20, 0x7A	; 122
     43c:	54 e4       	ldi	r21, 0x44	; 68
     43e:	6d 85       	ldd	r22, Y+13	; 0x0d
     440:	7e 85       	ldd	r23, Y+14	; 0x0e
     442:	8f 85       	ldd	r24, Y+15	; 0x0f
     444:	98 89       	ldd	r25, Y+16	; 0x10
     446:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3>
     44a:	6d 83       	std	Y+5, r22	; 0x05
     44c:	7e 83       	std	Y+6, r23	; 0x06
     44e:	8f 83       	std	Y+7, r24	; 0x07
     450:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	4a e7       	ldi	r20, 0x7A	; 122
     458:	55 e4       	ldi	r21, 0x45	; 69
     45a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     45e:	69 83       	std	Y+1, r22	; 0x01
     460:	7a 83       	std	Y+2, r23	; 0x02
     462:	8b 83       	std	Y+3, r24	; 0x03
     464:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	5f e3       	ldi	r21, 0x3F	; 63
     46e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     472:	88 23       	and	r24, r24
     474:	4c f1       	brlt	.+82     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		__ticks = 1;
	else if (__tmp > 65535)
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	3f ef       	ldi	r19, 0xFF	; 255
     47a:	4f e7       	ldi	r20, 0x7F	; 127
     47c:	57 e4       	ldi	r21, 0x47	; 71
     47e:	69 81       	ldd	r22, Y+1	; 0x01
     480:	7a 81       	ldd	r23, Y+2	; 0x02
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	9c 81       	ldd	r25, Y+4	; 0x04
     486:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     48a:	18 16       	cp	r1, r24
     48c:	b4 f4       	brge	.+44     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e2       	ldi	r20, 0x20	; 32
     494:	51 e4       	ldi	r21, 0x41	; 65
     496:	6d 81       	ldd	r22, Y+5	; 0x05
     498:	7e 81       	ldd	r23, Y+6	; 0x06
     49a:	8f 81       	ldd	r24, Y+7	; 0x07
     49c:	98 85       	ldd	r25, Y+8	; 0x08
     49e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     4a2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     4a6:	61 15       	cp	r22, r1
     4a8:	71 05       	cpc	r23, r1
     4aa:	39 f1       	breq	.+78     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4ac:	c3 01       	movw	r24, r6
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b2:	61 50       	subi	r22, 0x01	; 1
     4b4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b6:	d1 f7       	brne	.-12     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4b8:	20 c0       	rjmp	.+64     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ba:	69 81       	ldd	r22, Y+1	; 0x01
     4bc:	7a 81       	ldd	r23, Y+2	; 0x02
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	cb 01       	movw	r24, r22
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d2:	13 c0       	rjmp	.+38     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	4f e7       	ldi	r20, 0x7F	; 127
     4da:	53 e4       	ldi	r21, 0x43	; 67
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     4e4:	18 16       	cp	r1, r24
     4e6:	44 f4       	brge	.+16     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4e8:	89 89       	ldd	r24, Y+17	; 0x11
     4ea:	9a 89       	ldd	r25, Y+18	; 0x12
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     4f2:	44 24       	eor	r4, r4
     4f4:	43 94       	inc	r4
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4f8:	4b 88       	ldd	r4, Y+19	; 0x13
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     4fa:	84 2d       	mov	r24, r4
     4fc:	8a 95       	dec	r24
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
     500:	25 b1       	in	r18, 0x05	; 5
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	f1 01       	movw	r30, r2
     508:	00 80       	ld	r0, Z
     50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	0a 94       	dec	r0
     512:	e2 f7       	brpl	.-8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     514:	82 2b       	or	r24, r18
     516:	85 b9       	out	0x05, r24	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e8       	ldi	r20, 0x80	; 128
     51e:	5f e3       	ldi	r21, 0x3F	; 63
     520:	c7 01       	movw	r24, r14
     522:	b6 01       	movw	r22, r12
     524:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	0c f4       	brge	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     52c:	6b c0       	rjmp	.+214    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
		__ticks = 1;
	else if (__tmp2 > 65535)
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	3f ef       	ldi	r19, 0xFF	; 255
     532:	4f e7       	ldi	r20, 0x7F	; 127
     534:	57 e4       	ldi	r21, 0x47	; 71
     536:	69 85       	ldd	r22, Y+9	; 0x09
     538:	7a 85       	ldd	r23, Y+10	; 0x0a
     53a:	8b 85       	ldd	r24, Y+11	; 0x0b
     53c:	9c 85       	ldd	r25, Y+12	; 0x0c
     53e:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     542:	18 16       	cp	r1, r24
     544:	0c f0       	brlt	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     546:	4f c0       	rjmp	.+158    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
	{
		_delay_ms(__us / 1000.0);
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	4a e7       	ldi	r20, 0x7A	; 122
     54e:	54 e4       	ldi	r21, 0x44	; 68
     550:	6d 85       	ldd	r22, Y+13	; 0x0d
     552:	7e 85       	ldd	r23, Y+14	; 0x0e
     554:	8f 85       	ldd	r24, Y+15	; 0x0f
     556:	98 89       	ldd	r25, Y+16	; 0x10
     558:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3>
     55c:	6d 83       	std	Y+5, r22	; 0x05
     55e:	7e 83       	std	Y+6, r23	; 0x06
     560:	8f 83       	std	Y+7, r24	; 0x07
     562:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	4a e7       	ldi	r20, 0x7A	; 122
     56a:	55 e4       	ldi	r21, 0x45	; 69
     56c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     570:	69 83       	std	Y+1, r22	; 0x01
     572:	7a 83       	std	Y+2, r23	; 0x02
     574:	8b 83       	std	Y+3, r24	; 0x03
     576:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e8       	ldi	r20, 0x80	; 128
     57e:	5f e3       	ldi	r21, 0x3F	; 63
     580:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	4c f1       	brlt	.+82     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
		__ticks = 1;
	else if (__tmp > 65535)
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	3f ef       	ldi	r19, 0xFF	; 255
     58c:	4f e7       	ldi	r20, 0x7F	; 127
     58e:	57 e4       	ldi	r21, 0x47	; 71
     590:	69 81       	ldd	r22, Y+1	; 0x01
     592:	7a 81       	ldd	r23, Y+2	; 0x02
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     59c:	18 16       	cp	r1, r24
     59e:	b4 f4       	brge	.+44     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e2       	ldi	r20, 0x20	; 32
     5a6:	51 e4       	ldi	r21, 0x41	; 65
     5a8:	6d 81       	ldd	r22, Y+5	; 0x05
     5aa:	7e 81       	ldd	r23, Y+6	; 0x06
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 85       	ldd	r25, Y+8	; 0x08
     5b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     5b4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     5b8:	61 15       	cp	r22, r1
     5ba:	71 05       	cpc	r23, r1
     5bc:	39 f1       	breq	.+78     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     5be:	c3 01       	movw	r24, r6
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c4:	61 50       	subi	r22, 0x01	; 1
     5c6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c8:	d1 f7       	brne	.-12     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5ca:	20 c0       	rjmp	.+64     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5cc:	69 81       	ldd	r22, Y+1	; 0x01
     5ce:	7a 81       	ldd	r23, Y+2	; 0x02
     5d0:	8b 81       	ldd	r24, Y+3	; 0x03
     5d2:	9c 81       	ldd	r25, Y+4	; 0x04
     5d4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	cb 01       	movw	r24, r22
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5e4:	13 c0       	rjmp	.+38     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	4f e7       	ldi	r20, 0x7F	; 127
     5ec:	53 e4       	ldi	r21, 0x43	; 67
     5ee:	c7 01       	movw	r24, r14
     5f0:	b6 01       	movw	r22, r12
     5f2:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     5f6:	18 16       	cp	r1, r24
     5f8:	44 f4       	brge	.+16     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     5fa:	89 89       	ldd	r24, Y+17	; 0x11
     5fc:	9a 89       	ldd	r25, Y+18	; 0x12
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     602:	07 c0       	rjmp	.+14     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     604:	55 24       	eor	r5, r5
     606:	53 94       	inc	r5
     608:	01 c0       	rjmp	.+2      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     60a:	5b 88       	ldd	r5, Y+19	; 0x13
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     60c:	85 2d       	mov	r24, r5
     60e:	8a 95       	dec	r24
     610:	f1 f7       	brne	.-4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     612:	95 b1       	in	r25, 0x05	; 5
     614:	21 e0       	ldi	r18, 0x01	; 1
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	f1 01       	movw	r30, r2
     61a:	00 80       	ld	r0, Z
     61c:	02 c0       	rjmp	.+4      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     61e:	22 0f       	add	r18, r18
     620:	33 1f       	adc	r19, r19
     622:	0a 94       	dec	r0
     624:	e2 f7       	brpl	.-8      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     626:	82 2f       	mov	r24, r18
     628:	80 95       	com	r24
     62a:	89 23       	and	r24, r25
     62c:	85 b9       	out	0x05, r24	; 5
		cycles=2*duration/wavelength;
		half_period = wavelength/2;

		
		
		for (int i=0;i<cycles;i++)
     62e:	0f 5f       	subi	r16, 0xFF	; 255
     630:	1f 4f       	sbci	r17, 0xFF	; 255
     632:	c8 01       	movw	r24, r16
     634:	01 2e       	mov	r0, r17
     636:	00 0c       	add	r0, r0
     638:	aa 0b       	sbc	r26, r26
     63a:	bb 0b       	sbc	r27, r27
     63c:	88 15       	cp	r24, r8
     63e:	99 05       	cpc	r25, r9
     640:	aa 05       	cpc	r26, r10
     642:	bb 05       	cpc	r27, r11
     644:	0c f4       	brge	.+2      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     646:	df ce       	rjmp	.-578    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		}
	}
}
     648:	63 96       	adiw	r28, 0x13	; 19
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	9f 90       	pop	r9
     66a:	8f 90       	pop	r8
     66c:	7f 90       	pop	r7
     66e:	6f 90       	pop	r6
     670:	5f 90       	pop	r5
     672:	4f 90       	pop	r4
     674:	3f 90       	pop	r3
     676:	2f 90       	pop	r2
     678:	08 95       	ret

0000067a <_ZN4Tone7melody1Ev>:

//Notes and their durations.

void Tone::melody1()
{
     67a:	2f 92       	push	r2
     67c:	3f 92       	push	r3
     67e:	4f 92       	push	r4
     680:	5f 92       	push	r5
     682:	6f 92       	push	r6
     684:	7f 92       	push	r7
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	6e 97       	sbiw	r28, 0x1e	; 30
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	9a 8f       	std	Y+26, r25	; 0x1a
     6b0:	89 8f       	std	Y+25, r24	; 0x19
	int melody[] = {
		NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,0
	};
     6b2:	8a e0       	ldi	r24, 0x0A	; 10
     6b4:	e0 e0       	ldi	r30, 0x00	; 0
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	de 01       	movw	r26, r28
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	01 90       	ld	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	8a 95       	dec	r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <_ZN4Tone7melody1Ev+0x42>

	int noteDurations[] = {
		4,4,4,4,1
	};
     6c4:	8a e0       	ldi	r24, 0x0A	; 10
     6c6:	ea e0       	ldi	r30, 0x0A	; 10
     6c8:	f1 e0       	ldi	r31, 0x01	; 1
     6ca:	de 01       	movw	r26, r28
     6cc:	1b 96       	adiw	r26, 0x0b	; 11
     6ce:	01 90       	ld	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	8a 95       	dec	r24
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <_ZN4Tone7melody1Ev+0x54>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
     6d6:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <changing+0x1>
     6da:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <changing>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     6de:	aa 24       	eor	r10, r10
     6e0:	a3 94       	inc	r10
     6e2:	b1 2c       	mov	r11, r1
     6e4:	4e 01       	movw	r8, r28
     6e6:	85 e1       	ldi	r24, 0x15	; 21
     6e8:	88 0e       	add	r8, r24
     6ea:	91 1c       	adc	r9, r1
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f0 e9       	ldi	r31, 0x90	; 144
     6f0:	2f 2e       	mov	r2, r31
     6f2:	33 24       	eor	r3, r3
     6f4:	33 94       	inc	r3
     6f6:	f0 2d       	mov	r31, r0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6f8:	ad 8e       	std	Y+29, r10	; 0x1d
     6fa:	be 8e       	std	Y+30, r11	; 0x1e
     6fc:	ab 8e       	std	Y+27, r10	; 0x1b
     6fe:	bc 8e       	std	Y+28, r11	; 0x1c
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
     700:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <changing>
     704:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <changing+0x1>
     708:	89 2b       	or	r24, r25
     70a:	09 f0       	breq	.+2      	; 0x70e <_ZN4Tone7melody1Ev+0x94>
     70c:	9b c0       	rjmp	.+310    	; 0x844 <_ZN4Tone7melody1Ev+0x1ca>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     70e:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;break;}
     710:	95 01       	movw	r18, r10
     712:	e9 8d       	ldd	r30, Y+25	; 0x19
     714:	fa 8d       	ldd	r31, Y+26	; 0x1a
     716:	02 80       	ldd	r0, Z+2	; 0x02
     718:	02 c0       	rjmp	.+4      	; 0x71e <_ZN4Tone7melody1Ev+0xa4>
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	0a 94       	dec	r0
     720:	e2 f7       	brpl	.-8      	; 0x71a <_ZN4Tone7melody1Ev+0xa0>
     722:	89 2f       	mov	r24, r25
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	82 23       	and	r24, r18
     728:	93 23       	and	r25, r19
     72a:	89 2b       	or	r24, r25
     72c:	c1 f0       	breq	.+48     	; 0x75e <_ZN4Tone7melody1Ev+0xe4>
     72e:	10 c0       	rjmp	.+32     	; 0x750 <_ZN4Tone7melody1Ev+0xd6>
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     730:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;break;}
     732:	95 01       	movw	r18, r10
     734:	e9 8d       	ldd	r30, Y+25	; 0x19
     736:	fa 8d       	ldd	r31, Y+26	; 0x1a
     738:	02 80       	ldd	r0, Z+2	; 0x02
     73a:	02 c0       	rjmp	.+4      	; 0x740 <_ZN4Tone7melody1Ev+0xc6>
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	0a 94       	dec	r0
     742:	e2 f7       	brpl	.-8      	; 0x73c <_ZN4Tone7melody1Ev+0xc2>
     744:	89 2f       	mov	r24, r25
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	82 23       	and	r24, r18
     74a:	93 23       	and	r25, r19
     74c:	89 2b       	or	r24, r25
     74e:	71 f0       	breq	.+28     	; 0x76c <_ZN4Tone7melody1Ev+0xf2>
     750:	fd 8d       	ldd	r31, Y+29	; 0x1d
     752:	f0 93 72 06 	sts	0x0672, r31	; 0x800672 <changing>
     756:	8e 8d       	ldd	r24, Y+30	; 0x1e
     758:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <changing+0x1>
     75c:	d1 cf       	rjmp	.-94     	; 0x700 <_ZN4Tone7melody1Ev+0x86>
     75e:	7e 01       	movw	r14, r28
     760:	9b e0       	ldi	r25, 0x0B	; 11
     762:	e9 0e       	add	r14, r25
     764:	f1 1c       	adc	r15, r1
     766:	fe 01       	movw	r30, r28
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	6f 01       	movw	r12, r30

			float noteDuration = 200 / noteDurations[currentNote];
     76c:	f7 01       	movw	r30, r14
     76e:	61 91       	ld	r22, Z+
     770:	71 91       	ld	r23, Z+
     772:	7f 01       	movw	r14, r30
     774:	88 ec       	ldi	r24, 0xC8	; 200
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divmodhi4>
     77c:	07 2e       	mov	r0, r23
     77e:	00 0c       	add	r0, r0
     780:	88 0b       	sbc	r24, r24
     782:	99 0b       	sbc	r25, r25
     784:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     788:	2b 01       	movw	r4, r22
     78a:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     78c:	f6 01       	movw	r30, r12
     78e:	61 91       	ld	r22, Z+
     790:	71 91       	ld	r23, Z+
     792:	6f 01       	movw	r12, r30
     794:	07 2e       	mov	r0, r23
     796:	00 0c       	add	r0, r0
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     7a0:	ab 01       	movw	r20, r22
     7a2:	bc 01       	movw	r22, r24
     7a4:	93 01       	movw	r18, r6
     7a6:	82 01       	movw	r16, r4
     7a8:	89 8d       	ldd	r24, Y+25	; 0x19
     7aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7ac:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*2;
     7b0:	a3 01       	movw	r20, r6
     7b2:	92 01       	movw	r18, r4
     7b4:	c3 01       	movw	r24, r6
     7b6:	b2 01       	movw	r22, r4
     7b8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__addsf3>
     7bc:	6d 8b       	std	Y+21, r22	; 0x15
     7be:	7e 8b       	std	Y+22, r23	; 0x16
     7c0:	8f 8b       	std	Y+23, r24	; 0x17
     7c2:	98 8f       	std	Y+24, r25	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	4a e7       	ldi	r20, 0x7A	; 122
     7ca:	55 e4       	ldi	r21, 0x45	; 69
     7cc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     7d0:	2b 01       	movw	r4, r22
     7d2:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e8       	ldi	r20, 0x80	; 128
     7da:	5f e3       	ldi	r21, 0x3F	; 63
     7dc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     7e0:	88 23       	and	r24, r24
     7e2:	2c f1       	brlt	.+74     	; 0x82e <_ZN4Tone7melody1Ev+0x1b4>
		__ticks = 1;
	else if (__tmp > 65535)
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	3f ef       	ldi	r19, 0xFF	; 255
     7e8:	4f e7       	ldi	r20, 0x7F	; 127
     7ea:	57 e4       	ldi	r21, 0x47	; 71
     7ec:	c3 01       	movw	r24, r6
     7ee:	b2 01       	movw	r22, r4
     7f0:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     7f4:	18 16       	cp	r1, r24
     7f6:	b4 f4       	brge	.+44     	; 0x824 <_ZN4Tone7melody1Ev+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e2       	ldi	r20, 0x20	; 32
     7fe:	51 e4       	ldi	r21, 0x41	; 65
     800:	6d 89       	ldd	r22, Y+21	; 0x15
     802:	7e 89       	ldd	r23, Y+22	; 0x16
     804:	8f 89       	ldd	r24, Y+23	; 0x17
     806:	98 8d       	ldd	r25, Y+24	; 0x18
     808:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     80c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     810:	61 15       	cp	r22, r1
     812:	71 05       	cpc	r23, r1
     814:	89 f0       	breq	.+34     	; 0x838 <_ZN4Tone7melody1Ev+0x1be>
     816:	c1 01       	movw	r24, r2
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <_ZN4Tone7melody1Ev+0x19e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     81c:	61 50       	subi	r22, 0x01	; 1
     81e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     820:	d1 f7       	brne	.-12     	; 0x816 <_ZN4Tone7melody1Ev+0x19c>
     822:	0a c0       	rjmp	.+20     	; 0x838 <_ZN4Tone7melody1Ev+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     824:	c3 01       	movw	r24, r6
     826:	b2 01       	movw	r22, r4
     828:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     82c:	02 c0       	rjmp	.+4      	; 0x832 <_ZN4Tone7melody1Ev+0x1b8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     82e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     830:	7c 8d       	ldd	r23, Y+28	; 0x1c
     832:	cb 01       	movw	r24, r22
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <_ZN4Tone7melody1Ev+0x1ba>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     838:	15 b8       	out	0x05, r1	; 5

	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     83a:	e8 14       	cp	r14, r8
     83c:	f9 04       	cpc	r15, r9
     83e:	09 f0       	breq	.+2      	; 0x842 <_ZN4Tone7melody1Ev+0x1c8>
     840:	77 cf       	rjmp	.-274    	; 0x730 <_ZN4Tone7melody1Ev+0xb6>
     842:	5e cf       	rjmp	.-324    	; 0x700 <_ZN4Tone7melody1Ev+0x86>
     844:	80 ea       	ldi	r24, 0xA0	; 160
     846:	9f e0       	ldi	r25, 0x0F	; 15
     848:	20 e9       	ldi	r18, 0x90	; 144
     84a:	31 e0       	ldi	r19, 0x01	; 1
     84c:	f9 01       	movw	r30, r18
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <_ZN4Tone7melody1Ev+0x1d4>
     852:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     854:	d9 f7       	brne	.-10     	; 0x84c <_ZN4Tone7melody1Ev+0x1d2>
		}

	}

	_delay_ms(400);
}
     856:	6e 96       	adiw	r28, 0x1e	; 30
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	9f 90       	pop	r9
     878:	8f 90       	pop	r8
     87a:	7f 90       	pop	r7
     87c:	6f 90       	pop	r6
     87e:	5f 90       	pop	r5
     880:	4f 90       	pop	r4
     882:	3f 90       	pop	r3
     884:	2f 90       	pop	r2
     886:	08 95       	ret

00000888 <_ZN4Tone7melody2Ev>:


void Tone:: melody2()
{
     888:	2f 92       	push	r2
     88a:	3f 92       	push	r3
     88c:	4f 92       	push	r4
     88e:	5f 92       	push	r5
     890:	6f 92       	push	r6
     892:	7f 92       	push	r7
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	c8 58       	subi	r28, 0x88	; 136
     8b2:	d1 40       	sbci	r29, 0x01	; 1
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	cb 57       	subi	r28, 0x7B	; 123
     8c0:	de 4f       	sbci	r29, 0xFE	; 254
     8c2:	99 83       	std	Y+1, r25	; 0x01
     8c4:	88 83       	st	Y, r24
     8c6:	c5 58       	subi	r28, 0x85	; 133
     8c8:	d1 40       	sbci	r29, 0x01	; 1
		NOTE_C5, 0, NOTE_AS4, NOTE_A4,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5
	};
     8ca:	80 ec       	ldi	r24, 0xC0	; 192
     8cc:	e4 e1       	ldi	r30, 0x14	; 20
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	de 01       	movw	r26, r28
     8d2:	11 96       	adiw	r26, 0x01	; 1
     8d4:	01 90       	ld	r0, Z+
     8d6:	0d 92       	st	X+, r0
     8d8:	8a 95       	dec	r24
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <_ZN4Tone7melody2Ev+0x4c>
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
	};
     8dc:	80 ec       	ldi	r24, 0xC0	; 192
     8de:	e4 ed       	ldi	r30, 0xD4	; 212
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	de 01       	movw	r26, r28
     8e4:	af 53       	subi	r26, 0x3F	; 63
     8e6:	bf 4f       	sbci	r27, 0xFF	; 255
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	8a 95       	dec	r24
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <_ZN4Tone7melody2Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
     8f0:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <changing+0x1>
     8f4:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <changing>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}
     8f8:	88 24       	eor	r8, r8
     8fa:	83 94       	inc	r8
     8fc:	91 2c       	mov	r9, r1
     8fe:	1e 01       	movw	r2, r28
     900:	8f e7       	ldi	r24, 0x7F	; 127
     902:	28 1a       	sub	r2, r24
     904:	8e ef       	ldi	r24, 0xFE	; 254
     906:	38 0a       	sbc	r3, r24
     908:	0f 2e       	mov	r0, r31
     90a:	f0 e9       	ldi	r31, 0x90	; 144
     90c:	ef 2e       	mov	r14, r31
     90e:	ff 24       	eor	r15, r15
     910:	f3 94       	inc	r15
     912:	f0 2d       	mov	r31, r0
     914:	c9 57       	subi	r28, 0x79	; 121
     916:	de 4f       	sbci	r29, 0xFE	; 254
     918:	88 82       	st	Y, r8
     91a:	c7 58       	subi	r28, 0x87	; 135
     91c:	d1 40       	sbci	r29, 0x01	; 1
     91e:	c8 57       	subi	r28, 0x78	; 120
     920:	de 4f       	sbci	r29, 0xFE	; 254
     922:	98 82       	st	Y, r9
     924:	c8 58       	subi	r28, 0x88	; 136
     926:	d1 40       	sbci	r29, 0x01	; 1
     928:	07 c0       	rjmp	.+14     	; 0x938 <__stack+0x39>
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
	while (changing==0)
     92a:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <changing>
     92e:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <changing+0x1>
     932:	89 2b       	or	r24, r25
     934:	09 f0       	breq	.+2      	; 0x938 <__stack+0x39>
     936:	cf c0       	rjmp	.+414    	; 0xad6 <__stack+0x1d7>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     938:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;_delay_ms(100);break;}
     93a:	94 01       	movw	r18, r8
     93c:	cb 57       	subi	r28, 0x7B	; 123
     93e:	de 4f       	sbci	r29, 0xFE	; 254
     940:	e8 81       	ld	r30, Y
     942:	f9 81       	ldd	r31, Y+1	; 0x01
     944:	c5 58       	subi	r28, 0x85	; 133
     946:	d1 40       	sbci	r29, 0x01	; 1
     948:	02 80       	ldd	r0, Z+2	; 0x02
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0x51>
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	0a 94       	dec	r0
     952:	e2 f7       	brpl	.-8      	; 0x94c <__stack+0x4d>
     954:	89 2f       	mov	r24, r25
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 23       	and	r24, r18
     95a:	93 23       	and	r25, r19
     95c:	89 2b       	or	r24, r25
     95e:	59 f1       	breq	.+86     	; 0x9b6 <__stack+0xb7>
     960:	14 c0       	rjmp	.+40     	; 0x98a <__stack+0x8b>
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     962:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;_delay_ms(100);break;}
     964:	94 01       	movw	r18, r8
     966:	cb 57       	subi	r28, 0x7B	; 123
     968:	de 4f       	sbci	r29, 0xFE	; 254
     96a:	e8 81       	ld	r30, Y
     96c:	f9 81       	ldd	r31, Y+1	; 0x01
     96e:	c5 58       	subi	r28, 0x85	; 133
     970:	d1 40       	sbci	r29, 0x01	; 1
     972:	02 80       	ldd	r0, Z+2	; 0x02
     974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	0a 94       	dec	r0
     97c:	e2 f7       	brpl	.-8      	; 0x976 <__stack+0x77>
     97e:	89 2f       	mov	r24, r25
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	82 23       	and	r24, r18
     984:	93 23       	and	r25, r19
     986:	89 2b       	or	r24, r25
     988:	e9 f0       	breq	.+58     	; 0x9c4 <__stack+0xc5>
     98a:	c9 57       	subi	r28, 0x79	; 121
     98c:	de 4f       	sbci	r29, 0xFE	; 254
     98e:	f8 81       	ld	r31, Y
     990:	c7 58       	subi	r28, 0x87	; 135
     992:	d1 40       	sbci	r29, 0x01	; 1
     994:	f0 93 72 06 	sts	0x0672, r31	; 0x800672 <changing>
     998:	c8 57       	subi	r28, 0x78	; 120
     99a:	de 4f       	sbci	r29, 0xFE	; 254
     99c:	88 81       	ld	r24, Y
     99e:	c8 58       	subi	r28, 0x88	; 136
     9a0:	d1 40       	sbci	r29, 0x01	; 1
     9a2:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <changing+0x1>
     9a6:	88 ee       	ldi	r24, 0xE8	; 232
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	f7 01       	movw	r30, r14
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <__stack+0xad>
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	d9 f7       	brne	.-10     	; 0x9aa <__stack+0xab>
     9b4:	88 c0       	rjmp	.+272    	; 0xac6 <__stack+0x1c7>
     9b6:	6e 01       	movw	r12, r28
     9b8:	91 ec       	ldi	r25, 0xC1	; 193
     9ba:	c9 0e       	add	r12, r25
     9bc:	d1 1c       	adc	r13, r1
     9be:	fe 01       	movw	r30, r28
     9c0:	31 96       	adiw	r30, 0x01	; 1
     9c2:	5f 01       	movw	r10, r30

			float noteDuration = 375 / noteDurations[currentNote];
     9c4:	f6 01       	movw	r30, r12
     9c6:	61 91       	ld	r22, Z+
     9c8:	71 91       	ld	r23, Z+
     9ca:	6f 01       	movw	r12, r30
     9cc:	87 e7       	ldi	r24, 0x77	; 119
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divmodhi4>
     9d4:	07 2e       	mov	r0, r23
     9d6:	00 0c       	add	r0, r0
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     9e0:	2b 01       	movw	r4, r22
     9e2:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     9e4:	f5 01       	movw	r30, r10
     9e6:	61 91       	ld	r22, Z+
     9e8:	71 91       	ld	r23, Z+
     9ea:	5f 01       	movw	r10, r30
     9ec:	07 2e       	mov	r0, r23
     9ee:	00 0c       	add	r0, r0
     9f0:	88 0b       	sbc	r24, r24
     9f2:	99 0b       	sbc	r25, r25
     9f4:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     9f8:	ab 01       	movw	r20, r22
     9fa:	bc 01       	movw	r22, r24
     9fc:	93 01       	movw	r18, r6
     9fe:	82 01       	movw	r16, r4
     a00:	cb 57       	subi	r28, 0x7B	; 123
     a02:	de 4f       	sbci	r29, 0xFE	; 254
     a04:	88 81       	ld	r24, Y
     a06:	99 81       	ldd	r25, Y+1	; 0x01
     a08:	c5 58       	subi	r28, 0x85	; 133
     a0a:	d1 40       	sbci	r29, 0x01	; 1
     a0c:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
     a10:	26 e6       	ldi	r18, 0x66	; 102
     a12:	36 e6       	ldi	r19, 0x66	; 102
     a14:	46 ea       	ldi	r20, 0xA6	; 166
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	c3 01       	movw	r24, r6
     a1a:	b2 01       	movw	r22, r4
     a1c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a20:	cf 57       	subi	r28, 0x7F	; 127
     a22:	de 4f       	sbci	r29, 0xFE	; 254
     a24:	68 83       	st	Y, r22
     a26:	79 83       	std	Y+1, r23	; 0x01
     a28:	8a 83       	std	Y+2, r24	; 0x02
     a2a:	9b 83       	std	Y+3, r25	; 0x03
     a2c:	c1 58       	subi	r28, 0x81	; 129
     a2e:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	4a e7       	ldi	r20, 0x7A	; 122
     a36:	55 e4       	ldi	r21, 0x45	; 69
     a38:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a3c:	2b 01       	movw	r4, r22
     a3e:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e8       	ldi	r20, 0x80	; 128
     a46:	5f e3       	ldi	r21, 0x3F	; 63
     a48:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     a4c:	88 23       	and	r24, r24
     a4e:	4c f1       	brlt	.+82     	; 0xaa2 <__stack+0x1a3>
		__ticks = 1;
	else if (__tmp > 65535)
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	c3 01       	movw	r24, r6
     a5a:	b2 01       	movw	r22, r4
     a5c:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     a60:	18 16       	cp	r1, r24
     a62:	d4 f4       	brge	.+52     	; 0xa98 <__stack+0x199>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	cf 57       	subi	r28, 0x7F	; 127
     a6e:	de 4f       	sbci	r29, 0xFE	; 254
     a70:	68 81       	ld	r22, Y
     a72:	79 81       	ldd	r23, Y+1	; 0x01
     a74:	8a 81       	ldd	r24, Y+2	; 0x02
     a76:	9b 81       	ldd	r25, Y+3	; 0x03
     a78:	c1 58       	subi	r28, 0x81	; 129
     a7a:	d1 40       	sbci	r29, 0x01	; 1
     a7c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a80:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     a84:	61 15       	cp	r22, r1
     a86:	71 05       	cpc	r23, r1
     a88:	c9 f0       	breq	.+50     	; 0xabc <__stack+0x1bd>
     a8a:	c7 01       	movw	r24, r14
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <__stack+0x18d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a90:	61 50       	subi	r22, 0x01	; 1
     a92:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a94:	d1 f7       	brne	.-12     	; 0xa8a <__stack+0x18b>
     a96:	12 c0       	rjmp	.+36     	; 0xabc <__stack+0x1bd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a98:	c3 01       	movw	r24, r6
     a9a:	b2 01       	movw	r22, r4
     a9c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     aa0:	0a c0       	rjmp	.+20     	; 0xab6 <__stack+0x1b7>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     aa2:	c9 57       	subi	r28, 0x79	; 121
     aa4:	de 4f       	sbci	r29, 0xFE	; 254
     aa6:	68 81       	ld	r22, Y
     aa8:	c7 58       	subi	r28, 0x87	; 135
     aaa:	d1 40       	sbci	r29, 0x01	; 1
     aac:	c8 57       	subi	r28, 0x78	; 120
     aae:	de 4f       	sbci	r29, 0xFE	; 254
     ab0:	78 81       	ld	r23, Y
     ab2:	c8 58       	subi	r28, 0x88	; 136
     ab4:	d1 40       	sbci	r29, 0x01	; 1
     ab6:	cb 01       	movw	r24, r22
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <__stack+0x1b9>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     abc:	15 b8       	out	0x05, r1	; 5
	
	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     abe:	c2 14       	cp	r12, r2
     ac0:	d3 04       	cpc	r13, r3
     ac2:	09 f0       	breq	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	4e cf       	rjmp	.-356    	; 0x962 <__stack+0x63>
     ac6:	80 ea       	ldi	r24, 0xA0	; 160
     ac8:	9f e0       	ldi	r25, 0x0F	; 15
     aca:	f7 01       	movw	r30, r14
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <__stack+0x1cd>
     ad0:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad2:	d9 f7       	brne	.-10     	; 0xaca <__stack+0x1cb>
     ad4:	2a cf       	rjmp	.-428    	; 0x92a <__stack+0x2b>
		}
		_delay_ms(400);
		
	}

}
     ad6:	c8 57       	subi	r28, 0x78	; 120
     ad8:	de 4f       	sbci	r29, 0xFE	; 254
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	df 90       	pop	r13
     af2:	cf 90       	pop	r12
     af4:	bf 90       	pop	r11
     af6:	af 90       	pop	r10
     af8:	9f 90       	pop	r9
     afa:	8f 90       	pop	r8
     afc:	7f 90       	pop	r7
     afe:	6f 90       	pop	r6
     b00:	5f 90       	pop	r5
     b02:	4f 90       	pop	r4
     b04:	3f 90       	pop	r3
     b06:	2f 90       	pop	r2
     b08:	08 95       	ret

00000b0a <_ZN4Tone7melody3Ev>:

void Tone:: melody3()
{
     b0a:	2f 92       	push	r2
     b0c:	3f 92       	push	r3
     b0e:	4f 92       	push	r4
     b10:	5f 92       	push	r5
     b12:	6f 92       	push	r6
     b14:	7f 92       	push	r7
     b16:	8f 92       	push	r8
     b18:	9f 92       	push	r9
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	cc 52       	subi	r28, 0x2C	; 44
     b34:	d1 40       	sbci	r29, 0x01	; 1
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	c7 5d       	subi	r28, 0xD7	; 215
     b42:	de 4f       	sbci	r29, 0xFE	; 254
     b44:	99 83       	std	Y+1, r25	; 0x01
     b46:	88 83       	st	Y, r24
     b48:	c9 52       	subi	r28, 0x29	; 41
     b4a:	d1 40       	sbci	r29, 0x01	; 1
		NOTE_E5, NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_B4, NOTE_C5, NOTE_C5, 0,
		NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_C5, NOTE_B4, NOTE_B4, 0,
		NOTE_C5, NOTE_A4, NOTE_B4,
	};
     b4c:	82 e9       	ldi	r24, 0x92	; 146
     b4e:	e4 e9       	ldi	r30, 0x94	; 148
     b50:	f2 e0       	ldi	r31, 0x02	; 2
     b52:	de 01       	movw	r26, r28
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
     b5a:	8a 95       	dec	r24
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <_ZN4Tone7melody3Ev+0x4c>
		8, 8, 8, 4, 8,
		8, 8, 4, 8, 8,
		4, 8, 4, 8,
		8, 8, 4, 8, 8,
		8, 8, 2
	};
     b5e:	82 e9       	ldi	r24, 0x92	; 146
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f3 e0       	ldi	r31, 0x03	; 3
     b64:	de 01       	movw	r26, r28
     b66:	ad 56       	subi	r26, 0x6D	; 109
     b68:	bf 4f       	sbci	r27, 0xFF	; 255
     b6a:	01 90       	ld	r0, Z+
     b6c:	0d 92       	st	X+, r0
     b6e:	8a 95       	dec	r24
     b70:	e1 f7       	brne	.-8      	; 0xb6a <_ZN4Tone7melody3Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	changing=0;
     b72:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <changing+0x1>
     b76:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <changing>
	while (changing==0)
	{
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}
     b7a:	88 24       	eor	r8, r8
     b7c:	83 94       	inc	r8
     b7e:	91 2c       	mov	r9, r1
     b80:	1e 01       	movw	r2, r28
     b82:	8b ed       	ldi	r24, 0xDB	; 219
     b84:	28 1a       	sub	r2, r24
     b86:	8e ef       	ldi	r24, 0xFE	; 254
     b88:	38 0a       	sbc	r3, r24
     b8a:	0f 2e       	mov	r0, r31
     b8c:	f0 e9       	ldi	r31, 0x90	; 144
     b8e:	ef 2e       	mov	r14, r31
     b90:	ff 24       	eor	r15, r15
     b92:	f3 94       	inc	r15
     b94:	f0 2d       	mov	r31, r0
     b96:	c5 5d       	subi	r28, 0xD5	; 213
     b98:	de 4f       	sbci	r29, 0xFE	; 254
     b9a:	88 82       	st	Y, r8
     b9c:	cb 52       	subi	r28, 0x2B	; 43
     b9e:	d1 40       	sbci	r29, 0x01	; 1
     ba0:	c4 5d       	subi	r28, 0xD4	; 212
     ba2:	de 4f       	sbci	r29, 0xFE	; 254
     ba4:	98 82       	st	Y, r9
     ba6:	cc 52       	subi	r28, 0x2C	; 44
     ba8:	d1 40       	sbci	r29, 0x01	; 1
     baa:	07 c0       	rjmp	.+14     	; 0xbba <_ZN4Tone7melody3Ev+0xb0>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	changing=0;
	while (changing==0)
     bac:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <changing>
     bb0:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <changing+0x1>
     bb4:	89 2b       	or	r24, r25
     bb6:	09 f0       	breq	.+2      	; 0xbba <_ZN4Tone7melody3Ev+0xb0>
     bb8:	cf c0       	rjmp	.+414    	; 0xd58 <_ZN4Tone7melody3Ev+0x24e>
	{
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     bba:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;_delay_ms(100);break;}
     bbc:	94 01       	movw	r18, r8
     bbe:	c7 5d       	subi	r28, 0xD7	; 215
     bc0:	de 4f       	sbci	r29, 0xFE	; 254
     bc2:	e8 81       	ld	r30, Y
     bc4:	f9 81       	ldd	r31, Y+1	; 0x01
     bc6:	c9 52       	subi	r28, 0x29	; 41
     bc8:	d1 40       	sbci	r29, 0x01	; 1
     bca:	02 80       	ldd	r0, Z+2	; 0x02
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <_ZN4Tone7melody3Ev+0xc8>
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <_ZN4Tone7melody3Ev+0xc4>
     bd6:	89 2f       	mov	r24, r25
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	82 23       	and	r24, r18
     bdc:	93 23       	and	r25, r19
     bde:	89 2b       	or	r24, r25
     be0:	59 f1       	breq	.+86     	; 0xc38 <_ZN4Tone7melody3Ev+0x12e>
     be2:	14 c0       	rjmp	.+40     	; 0xc0c <_ZN4Tone7melody3Ev+0x102>
	changing=0;
	while (changing==0)
	{
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     be4:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;_delay_ms(100);break;}
     be6:	94 01       	movw	r18, r8
     be8:	c7 5d       	subi	r28, 0xD7	; 215
     bea:	de 4f       	sbci	r29, 0xFE	; 254
     bec:	e8 81       	ld	r30, Y
     bee:	f9 81       	ldd	r31, Y+1	; 0x01
     bf0:	c9 52       	subi	r28, 0x29	; 41
     bf2:	d1 40       	sbci	r29, 0x01	; 1
     bf4:	02 80       	ldd	r0, Z+2	; 0x02
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <_ZN4Tone7melody3Ev+0xf2>
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <_ZN4Tone7melody3Ev+0xee>
     c00:	89 2f       	mov	r24, r25
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	82 23       	and	r24, r18
     c06:	93 23       	and	r25, r19
     c08:	89 2b       	or	r24, r25
     c0a:	e9 f0       	breq	.+58     	; 0xc46 <_ZN4Tone7melody3Ev+0x13c>
     c0c:	c5 5d       	subi	r28, 0xD5	; 213
     c0e:	de 4f       	sbci	r29, 0xFE	; 254
     c10:	f8 81       	ld	r31, Y
     c12:	cb 52       	subi	r28, 0x2B	; 43
     c14:	d1 40       	sbci	r29, 0x01	; 1
     c16:	f0 93 72 06 	sts	0x0672, r31	; 0x800672 <changing>
     c1a:	c4 5d       	subi	r28, 0xD4	; 212
     c1c:	de 4f       	sbci	r29, 0xFE	; 254
     c1e:	88 81       	ld	r24, Y
     c20:	cc 52       	subi	r28, 0x2C	; 44
     c22:	d1 40       	sbci	r29, 0x01	; 1
     c24:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <changing+0x1>
     c28:	88 ee       	ldi	r24, 0xE8	; 232
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	f7 01       	movw	r30, r14
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <_ZN4Tone7melody3Ev+0x124>
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	d9 f7       	brne	.-10     	; 0xc2c <_ZN4Tone7melody3Ev+0x122>
     c36:	88 c0       	rjmp	.+272    	; 0xd48 <_ZN4Tone7melody3Ev+0x23e>
     c38:	6e 01       	movw	r12, r28
     c3a:	93 e9       	ldi	r25, 0x93	; 147
     c3c:	c9 0e       	add	r12, r25
     c3e:	d1 1c       	adc	r13, r1
     c40:	fe 01       	movw	r30, r28
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	5f 01       	movw	r10, r30

			float noteDuration = 375 / noteDurations[currentNote];
     c46:	f6 01       	movw	r30, r12
     c48:	61 91       	ld	r22, Z+
     c4a:	71 91       	ld	r23, Z+
     c4c:	6f 01       	movw	r12, r30
     c4e:	87 e7       	ldi	r24, 0x77	; 119
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divmodhi4>
     c56:	07 2e       	mov	r0, r23
     c58:	00 0c       	add	r0, r0
     c5a:	88 0b       	sbc	r24, r24
     c5c:	99 0b       	sbc	r25, r25
     c5e:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     c62:	2b 01       	movw	r4, r22
     c64:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     c66:	f5 01       	movw	r30, r10
     c68:	61 91       	ld	r22, Z+
     c6a:	71 91       	ld	r23, Z+
     c6c:	5f 01       	movw	r10, r30
     c6e:	07 2e       	mov	r0, r23
     c70:	00 0c       	add	r0, r0
     c72:	88 0b       	sbc	r24, r24
     c74:	99 0b       	sbc	r25, r25
     c76:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     c7a:	ab 01       	movw	r20, r22
     c7c:	bc 01       	movw	r22, r24
     c7e:	93 01       	movw	r18, r6
     c80:	82 01       	movw	r16, r4
     c82:	c7 5d       	subi	r28, 0xD7	; 215
     c84:	de 4f       	sbci	r29, 0xFE	; 254
     c86:	88 81       	ld	r24, Y
     c88:	99 81       	ldd	r25, Y+1	; 0x01
     c8a:	c9 52       	subi	r28, 0x29	; 41
     c8c:	d1 40       	sbci	r29, 0x01	; 1
     c8e:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
     c92:	26 e6       	ldi	r18, 0x66	; 102
     c94:	36 e6       	ldi	r19, 0x66	; 102
     c96:	46 ea       	ldi	r20, 0xA6	; 166
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	c3 01       	movw	r24, r6
     c9c:	b2 01       	movw	r22, r4
     c9e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     ca2:	cb 5d       	subi	r28, 0xDB	; 219
     ca4:	de 4f       	sbci	r29, 0xFE	; 254
     ca6:	68 83       	st	Y, r22
     ca8:	79 83       	std	Y+1, r23	; 0x01
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	9b 83       	std	Y+3, r25	; 0x03
     cae:	c5 52       	subi	r28, 0x25	; 37
     cb0:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	55 e4       	ldi	r21, 0x45	; 69
     cba:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     cbe:	2b 01       	movw	r4, r22
     cc0:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e8       	ldi	r20, 0x80	; 128
     cc8:	5f e3       	ldi	r21, 0x3F	; 63
     cca:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     cce:	88 23       	and	r24, r24
     cd0:	4c f1       	brlt	.+82     	; 0xd24 <_ZN4Tone7melody3Ev+0x21a>
		__ticks = 1;
	else if (__tmp > 65535)
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	c3 01       	movw	r24, r6
     cdc:	b2 01       	movw	r22, r4
     cde:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	d4 f4       	brge	.+52     	; 0xd1a <_ZN4Tone7melody3Ev+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e2       	ldi	r20, 0x20	; 32
     cec:	51 e4       	ldi	r21, 0x41	; 65
     cee:	cb 5d       	subi	r28, 0xDB	; 219
     cf0:	de 4f       	sbci	r29, 0xFE	; 254
     cf2:	68 81       	ld	r22, Y
     cf4:	79 81       	ldd	r23, Y+1	; 0x01
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	c5 52       	subi	r28, 0x25	; 37
     cfc:	d1 40       	sbci	r29, 0x01	; 1
     cfe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     d02:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     d06:	61 15       	cp	r22, r1
     d08:	71 05       	cpc	r23, r1
     d0a:	c9 f0       	breq	.+50     	; 0xd3e <_ZN4Tone7melody3Ev+0x234>
     d0c:	c7 01       	movw	r24, r14
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <_ZN4Tone7melody3Ev+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d12:	61 50       	subi	r22, 0x01	; 1
     d14:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d16:	d1 f7       	brne	.-12     	; 0xd0c <_ZN4Tone7melody3Ev+0x202>
     d18:	12 c0       	rjmp	.+36     	; 0xd3e <_ZN4Tone7melody3Ev+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	c3 01       	movw	r24, r6
     d1c:	b2 01       	movw	r22, r4
     d1e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <_ZN4Tone7melody3Ev+0x22e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     d24:	c5 5d       	subi	r28, 0xD5	; 213
     d26:	de 4f       	sbci	r29, 0xFE	; 254
     d28:	68 81       	ld	r22, Y
     d2a:	cb 52       	subi	r28, 0x2B	; 43
     d2c:	d1 40       	sbci	r29, 0x01	; 1
     d2e:	c4 5d       	subi	r28, 0xD4	; 212
     d30:	de 4f       	sbci	r29, 0xFE	; 254
     d32:	78 81       	ld	r23, Y
     d34:	cc 52       	subi	r28, 0x2C	; 44
     d36:	d1 40       	sbci	r29, 0x01	; 1
     d38:	cb 01       	movw	r24, r22
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <_ZN4Tone7melody3Ev+0x230>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     d3e:	15 b8       	out	0x05, r1	; 5
	

	changing=0;
	while (changing==0)
	{
		for (int currentNote=0; currentNote<length;currentNote++)
     d40:	c2 14       	cp	r12, r2
     d42:	d3 04       	cpc	r13, r3
     d44:	09 f0       	breq	.+2      	; 0xd48 <_ZN4Tone7melody3Ev+0x23e>
     d46:	4e cf       	rjmp	.-356    	; 0xbe4 <_ZN4Tone7melody3Ev+0xda>
     d48:	80 ea       	ldi	r24, 0xA0	; 160
     d4a:	9f e0       	ldi	r25, 0x0F	; 15
     d4c:	f7 01       	movw	r30, r14
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <_ZN4Tone7melody3Ev+0x244>
     d52:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d54:	d9 f7       	brne	.-10     	; 0xd4c <_ZN4Tone7melody3Ev+0x242>
     d56:	2a cf       	rjmp	.-428    	; 0xbac <_ZN4Tone7melody3Ev+0xa2>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
		}
		_delay_ms(400);
	}
}
     d58:	c4 5d       	subi	r28, 0xD4	; 212
     d5a:	de 4f       	sbci	r29, 0xFE	; 254
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	6f 90       	pop	r6
     d82:	5f 90       	pop	r5
     d84:	4f 90       	pop	r4
     d86:	3f 90       	pop	r3
     d88:	2f 90       	pop	r2
     d8a:	08 95       	ret

00000d8c <_ZN4Tone7melody4Ev>:

void Tone:: melody4()
{
     d8c:	2f 92       	push	r2
     d8e:	3f 92       	push	r3
     d90:	4f 92       	push	r4
     d92:	5f 92       	push	r5
     d94:	6f 92       	push	r6
     d96:	7f 92       	push	r7
     d98:	8f 92       	push	r8
     d9a:	9f 92       	push	r9
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	c6 59       	subi	r28, 0x96	; 150
     db6:	d1 40       	sbci	r29, 0x01	; 1
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cd 56       	subi	r28, 0x6D	; 109
     dc4:	de 4f       	sbci	r29, 0xFE	; 254
     dc6:	99 83       	std	Y+1, r25	; 0x01
     dc8:	88 83       	st	Y, r24
     dca:	c3 59       	subi	r28, 0x93	; 147
     dcc:	d1 40       	sbci	r29, 0x01	; 1
		NOTE_F4,NOTE_AS3,NOTE_DS4,NOTE_D4,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3
	};
     dce:	84 ef       	ldi	r24, 0xF4	; 244
     dd0:	e8 eb       	ldi	r30, 0xB8	; 184
     dd2:	f3 e0       	ldi	r31, 0x03	; 3
     dd4:	de 01       	movw	r26, r28
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	01 90       	ld	r0, Z+
     dda:	0d 92       	st	X+, r0
     ddc:	8a 95       	dec	r24
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <_ZN4Tone7melody4Ev+0x4c>
		6,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12
	};
     de0:	8a e9       	ldi	r24, 0x9A	; 154
     de2:	ec ea       	ldi	r30, 0xAC	; 172
     de4:	f4 e0       	ldi	r31, 0x04	; 4
     de6:	de 01       	movw	r26, r28
     de8:	ab 50       	subi	r26, 0x0B	; 11
     dea:	bf 4f       	sbci	r27, 0xFF	; 255
     dec:	01 90       	ld	r0, Z+
     dee:	0d 92       	st	X+, r0
     df0:	8a 95       	dec	r24
     df2:	e1 f7       	brne	.-8      	; 0xdec <_ZN4Tone7melody4Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
     df4:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <changing+0x1>
     df8:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <changing>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}
     dfc:	88 24       	eor	r8, r8
     dfe:	83 94       	inc	r8
     e00:	91 2c       	mov	r9, r1
     e02:	1e 01       	movw	r2, r28
     e04:	81 e7       	ldi	r24, 0x71	; 113
     e06:	28 1a       	sub	r2, r24
     e08:	8e ef       	ldi	r24, 0xFE	; 254
     e0a:	38 0a       	sbc	r3, r24
     e0c:	0f 2e       	mov	r0, r31
     e0e:	f0 e9       	ldi	r31, 0x90	; 144
     e10:	ef 2e       	mov	r14, r31
     e12:	ff 24       	eor	r15, r15
     e14:	f3 94       	inc	r15
     e16:	f0 2d       	mov	r31, r0
     e18:	cb 56       	subi	r28, 0x6B	; 107
     e1a:	de 4f       	sbci	r29, 0xFE	; 254
     e1c:	88 82       	st	Y, r8
     e1e:	c5 59       	subi	r28, 0x95	; 149
     e20:	d1 40       	sbci	r29, 0x01	; 1
     e22:	ca 56       	subi	r28, 0x6A	; 106
     e24:	de 4f       	sbci	r29, 0xFE	; 254
     e26:	98 82       	st	Y, r9
     e28:	c6 59       	subi	r28, 0x96	; 150
     e2a:	d1 40       	sbci	r29, 0x01	; 1
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <_ZN4Tone7melody4Ev+0xb0>
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
	while (changing==0)
     e2e:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <changing>
     e32:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <changing+0x1>
     e36:	89 2b       	or	r24, r25
     e38:	09 f0       	breq	.+2      	; 0xe3c <_ZN4Tone7melody4Ev+0xb0>
     e3a:	cf c0       	rjmp	.+414    	; 0xfda <_ZN4Tone7melody4Ev+0x24e>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     e3c:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;_delay_ms(100);break;}
     e3e:	94 01       	movw	r18, r8
     e40:	cd 56       	subi	r28, 0x6D	; 109
     e42:	de 4f       	sbci	r29, 0xFE	; 254
     e44:	e8 81       	ld	r30, Y
     e46:	f9 81       	ldd	r31, Y+1	; 0x01
     e48:	c3 59       	subi	r28, 0x93	; 147
     e4a:	d1 40       	sbci	r29, 0x01	; 1
     e4c:	02 80       	ldd	r0, Z+2	; 0x02
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <_ZN4Tone7melody4Ev+0xc8>
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <_ZN4Tone7melody4Ev+0xc4>
     e58:	89 2f       	mov	r24, r25
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	82 23       	and	r24, r18
     e5e:	93 23       	and	r25, r19
     e60:	89 2b       	or	r24, r25
     e62:	59 f1       	breq	.+86     	; 0xeba <_ZN4Tone7melody4Ev+0x12e>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <_ZN4Tone7melody4Ev+0x102>
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
     e66:	93 b1       	in	r25, 0x03	; 3
			if( wantChange) {changing=1;_delay_ms(100);break;}
     e68:	94 01       	movw	r18, r8
     e6a:	cd 56       	subi	r28, 0x6D	; 109
     e6c:	de 4f       	sbci	r29, 0xFE	; 254
     e6e:	e8 81       	ld	r30, Y
     e70:	f9 81       	ldd	r31, Y+1	; 0x01
     e72:	c3 59       	subi	r28, 0x93	; 147
     e74:	d1 40       	sbci	r29, 0x01	; 1
     e76:	02 80       	ldd	r0, Z+2	; 0x02
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <_ZN4Tone7melody4Ev+0xf2>
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <_ZN4Tone7melody4Ev+0xee>
     e82:	89 2f       	mov	r24, r25
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	82 23       	and	r24, r18
     e88:	93 23       	and	r25, r19
     e8a:	89 2b       	or	r24, r25
     e8c:	e9 f0       	breq	.+58     	; 0xec8 <_ZN4Tone7melody4Ev+0x13c>
     e8e:	cb 56       	subi	r28, 0x6B	; 107
     e90:	de 4f       	sbci	r29, 0xFE	; 254
     e92:	f8 81       	ld	r31, Y
     e94:	c5 59       	subi	r28, 0x95	; 149
     e96:	d1 40       	sbci	r29, 0x01	; 1
     e98:	f0 93 72 06 	sts	0x0672, r31	; 0x800672 <changing>
     e9c:	ca 56       	subi	r28, 0x6A	; 106
     e9e:	de 4f       	sbci	r29, 0xFE	; 254
     ea0:	88 81       	ld	r24, Y
     ea2:	c6 59       	subi	r28, 0x96	; 150
     ea4:	d1 40       	sbci	r29, 0x01	; 1
     ea6:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <changing+0x1>
     eaa:	88 ee       	ldi	r24, 0xE8	; 232
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	f7 01       	movw	r30, r14
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <_ZN4Tone7melody4Ev+0x124>
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	d9 f7       	brne	.-10     	; 0xeae <_ZN4Tone7melody4Ev+0x122>
     eb8:	88 c0       	rjmp	.+272    	; 0xfca <_ZN4Tone7melody4Ev+0x23e>
     eba:	6e 01       	movw	r12, r28
     ebc:	95 ef       	ldi	r25, 0xF5	; 245
     ebe:	c9 0e       	add	r12, r25
     ec0:	d1 1c       	adc	r13, r1
     ec2:	fe 01       	movw	r30, r28
     ec4:	31 96       	adiw	r30, 0x01	; 1
     ec6:	5f 01       	movw	r10, r30


			float noteDuration = 1375 / noteDurations[currentNote];
     ec8:	f6 01       	movw	r30, r12
     eca:	61 91       	ld	r22, Z+
     ecc:	71 91       	ld	r23, Z+
     ece:	6f 01       	movw	r12, r30
     ed0:	8f e5       	ldi	r24, 0x5F	; 95
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divmodhi4>
     ed8:	07 2e       	mov	r0, r23
     eda:	00 0c       	add	r0, r0
     edc:	88 0b       	sbc	r24, r24
     ede:	99 0b       	sbc	r25, r25
     ee0:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     ee4:	2b 01       	movw	r4, r22
     ee6:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     ee8:	f5 01       	movw	r30, r10
     eea:	61 91       	ld	r22, Z+
     eec:	71 91       	ld	r23, Z+
     eee:	5f 01       	movw	r10, r30
     ef0:	07 2e       	mov	r0, r23
     ef2:	00 0c       	add	r0, r0
     ef4:	88 0b       	sbc	r24, r24
     ef6:	99 0b       	sbc	r25, r25
     ef8:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
     efc:	ab 01       	movw	r20, r22
     efe:	bc 01       	movw	r22, r24
     f00:	93 01       	movw	r18, r6
     f02:	82 01       	movw	r16, r4
     f04:	cd 56       	subi	r28, 0x6D	; 109
     f06:	de 4f       	sbci	r29, 0xFE	; 254
     f08:	88 81       	ld	r24, Y
     f0a:	99 81       	ldd	r25, Y+1	; 0x01
     f0c:	c3 59       	subi	r28, 0x93	; 147
     f0e:	d1 40       	sbci	r29, 0x01	; 1
     f10:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
     f14:	26 e6       	ldi	r18, 0x66	; 102
     f16:	36 e6       	ldi	r19, 0x66	; 102
     f18:	46 ea       	ldi	r20, 0xA6	; 166
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	c3 01       	movw	r24, r6
     f1e:	b2 01       	movw	r22, r4
     f20:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     f24:	c1 57       	subi	r28, 0x71	; 113
     f26:	de 4f       	sbci	r29, 0xFE	; 254
     f28:	68 83       	st	Y, r22
     f2a:	79 83       	std	Y+1, r23	; 0x01
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	9b 83       	std	Y+3, r25	; 0x03
     f30:	cf 58       	subi	r28, 0x8F	; 143
     f32:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a e7       	ldi	r20, 0x7A	; 122
     f3a:	55 e4       	ldi	r21, 0x45	; 69
     f3c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     f40:	2b 01       	movw	r4, r22
     f42:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e8       	ldi	r20, 0x80	; 128
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
     f50:	88 23       	and	r24, r24
     f52:	4c f1       	brlt	.+82     	; 0xfa6 <_ZN4Tone7melody4Ev+0x21a>
		__ticks = 1;
	else if (__tmp > 65535)
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	4f e7       	ldi	r20, 0x7F	; 127
     f5a:	57 e4       	ldi	r21, 0x47	; 71
     f5c:	c3 01       	movw	r24, r6
     f5e:	b2 01       	movw	r22, r4
     f60:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
     f64:	18 16       	cp	r1, r24
     f66:	d4 f4       	brge	.+52     	; 0xf9c <_ZN4Tone7melody4Ev+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	c1 57       	subi	r28, 0x71	; 113
     f72:	de 4f       	sbci	r29, 0xFE	; 254
     f74:	68 81       	ld	r22, Y
     f76:	79 81       	ldd	r23, Y+1	; 0x01
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	cf 58       	subi	r28, 0x8F	; 143
     f7e:	d1 40       	sbci	r29, 0x01	; 1
     f80:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     f84:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
     f88:	61 15       	cp	r22, r1
     f8a:	71 05       	cpc	r23, r1
     f8c:	c9 f0       	breq	.+50     	; 0xfc0 <_ZN4Tone7melody4Ev+0x234>
     f8e:	c7 01       	movw	r24, r14
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <_ZN4Tone7melody4Ev+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	61 50       	subi	r22, 0x01	; 1
     f96:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f98:	d1 f7       	brne	.-12     	; 0xf8e <_ZN4Tone7melody4Ev+0x202>
     f9a:	12 c0       	rjmp	.+36     	; 0xfc0 <_ZN4Tone7melody4Ev+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9c:	c3 01       	movw	r24, r6
     f9e:	b2 01       	movw	r22, r4
     fa0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
     fa4:	0a c0       	rjmp	.+20     	; 0xfba <_ZN4Tone7melody4Ev+0x22e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     fa6:	cb 56       	subi	r28, 0x6B	; 107
     fa8:	de 4f       	sbci	r29, 0xFE	; 254
     faa:	68 81       	ld	r22, Y
     fac:	c5 59       	subi	r28, 0x95	; 149
     fae:	d1 40       	sbci	r29, 0x01	; 1
     fb0:	ca 56       	subi	r28, 0x6A	; 106
     fb2:	de 4f       	sbci	r29, 0xFE	; 254
     fb4:	78 81       	ld	r23, Y
     fb6:	c6 59       	subi	r28, 0x96	; 150
     fb8:	d1 40       	sbci	r29, 0x01	; 1
     fba:	cb 01       	movw	r24, r22
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <_ZN4Tone7melody4Ev+0x230>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     fc0:	15 b8       	out	0x05, r1	; 5
	
	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     fc2:	c2 14       	cp	r12, r2
     fc4:	d3 04       	cpc	r13, r3
     fc6:	09 f0       	breq	.+2      	; 0xfca <_ZN4Tone7melody4Ev+0x23e>
     fc8:	4e cf       	rjmp	.-356    	; 0xe66 <_ZN4Tone7melody4Ev+0xda>
     fca:	80 e1       	ldi	r24, 0x10	; 16
     fcc:	97 e2       	ldi	r25, 0x27	; 39
     fce:	f7 01       	movw	r30, r14
     fd0:	31 97       	sbiw	r30, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <_ZN4Tone7melody4Ev+0x244>
     fd4:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd6:	d9 f7       	brne	.-10     	; 0xfce <_ZN4Tone7melody4Ev+0x242>
     fd8:	2a cf       	rjmp	.-428    	; 0xe2e <_ZN4Tone7melody4Ev+0xa2>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
		}
		_delay_ms(1000);
	}
}
     fda:	ca 56       	subi	r28, 0x6A	; 106
     fdc:	de 4f       	sbci	r29, 0xFE	; 254
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	9f 90       	pop	r9
     ffe:	8f 90       	pop	r8
    1000:	7f 90       	pop	r7
    1002:	6f 90       	pop	r6
    1004:	5f 90       	pop	r5
    1006:	4f 90       	pop	r4
    1008:	3f 90       	pop	r3
    100a:	2f 90       	pop	r2
    100c:	08 95       	ret

0000100e <_ZN4Tone7melody5Ev>:


void Tone:: melody5()
{
    100e:	2f 92       	push	r2
    1010:	3f 92       	push	r3
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	c0 53       	subi	r28, 0x30	; 48
    1038:	d1 40       	sbci	r29, 0x01	; 1
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	c3 5d       	subi	r28, 0xD3	; 211
    1046:	de 4f       	sbci	r29, 0xFE	; 254
    1048:	99 83       	std	Y+1, r25	; 0x01
    104a:	88 83       	st	Y, r24
    104c:	cd 52       	subi	r28, 0x2D	; 45
    104e:	d1 40       	sbci	r29, 0x01	; 1
		0,NOTE_C5,NOTE_D5,NOTE_DS5,
		NOTE_DS5,NOTE_F5,NOTE_D5,NOTE_D5,
		NOTE_DS5,NOTE_C5,NOTE_C5,NOTE_D5,
		NOTE_B4,NOTE_GS4,NOTE_G4,NOTE_C5
		
	};
    1050:	84 e9       	ldi	r24, 0x94	; 148
    1052:	e6 e4       	ldi	r30, 0x46	; 70
    1054:	f5 e0       	ldi	r31, 0x05	; 5
    1056:	de 01       	movw	r26, r28
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	01 90       	ld	r0, Z+
    105c:	0d 92       	st	X+, r0
    105e:	8a 95       	dec	r24
    1060:	e1 f7       	brne	.-8      	; 0x105a <_ZN4Tone7melody5Ev+0x4c>
		12,12,6,6,
		12,24,24,12,
		24,24,12,24,
		24,12,24,24,
		12,24,24,3
	};
    1062:	84 e9       	ldi	r24, 0x94	; 148
    1064:	ea ed       	ldi	r30, 0xDA	; 218
    1066:	f5 e0       	ldi	r31, 0x05	; 5
    1068:	de 01       	movw	r26, r28
    106a:	ab 56       	subi	r26, 0x6B	; 107
    106c:	bf 4f       	sbci	r27, 0xFF	; 255
    106e:	01 90       	ld	r0, Z+
    1070:	0d 92       	st	X+, r0
    1072:	8a 95       	dec	r24
    1074:	e1 f7       	brne	.-8      	; 0x106e <_ZN4Tone7melody5Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
    1076:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <changing+0x1>
    107a:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <changing>
	while (changing==0)
	{
			for (int currentNote=0; currentNote<length;currentNote++)
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
				if( wantChange) {changing=1;_delay_ms(100);break;}
    107e:	88 24       	eor	r8, r8
    1080:	83 94       	inc	r8
    1082:	91 2c       	mov	r9, r1
    1084:	1e 01       	movw	r2, r28
    1086:	87 ed       	ldi	r24, 0xD7	; 215
    1088:	28 1a       	sub	r2, r24
    108a:	8e ef       	ldi	r24, 0xFE	; 254
    108c:	38 0a       	sbc	r3, r24
    108e:	0f 2e       	mov	r0, r31
    1090:	f0 e9       	ldi	r31, 0x90	; 144
    1092:	ef 2e       	mov	r14, r31
    1094:	ff 24       	eor	r15, r15
    1096:	f3 94       	inc	r15
    1098:	f0 2d       	mov	r31, r0
    109a:	c1 5d       	subi	r28, 0xD1	; 209
    109c:	de 4f       	sbci	r29, 0xFE	; 254
    109e:	88 82       	st	Y, r8
    10a0:	cf 52       	subi	r28, 0x2F	; 47
    10a2:	d1 40       	sbci	r29, 0x01	; 1
    10a4:	c0 5d       	subi	r28, 0xD0	; 208
    10a6:	de 4f       	sbci	r29, 0xFE	; 254
    10a8:	98 82       	st	Y, r9
    10aa:	c0 53       	subi	r28, 0x30	; 48
    10ac:	d1 40       	sbci	r29, 0x01	; 1
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <_ZN4Tone7melody5Ev+0xb0>
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
    10b0:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <changing>
    10b4:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <changing+0x1>
    10b8:	89 2b       	or	r24, r25
    10ba:	09 f0       	breq	.+2      	; 0x10be <_ZN4Tone7melody5Ev+0xb0>
    10bc:	cf c0       	rjmp	.+414    	; 0x125c <_ZN4Tone7melody5Ev+0x24e>
	{
			for (int currentNote=0; currentNote<length;currentNote++)
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
    10be:	93 b1       	in	r25, 0x03	; 3
				if( wantChange) {changing=1;_delay_ms(100);break;}
    10c0:	94 01       	movw	r18, r8
    10c2:	c3 5d       	subi	r28, 0xD3	; 211
    10c4:	de 4f       	sbci	r29, 0xFE	; 254
    10c6:	e8 81       	ld	r30, Y
    10c8:	f9 81       	ldd	r31, Y+1	; 0x01
    10ca:	cd 52       	subi	r28, 0x2D	; 45
    10cc:	d1 40       	sbci	r29, 0x01	; 1
    10ce:	02 80       	ldd	r0, Z+2	; 0x02
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN4Tone7melody5Ev+0xc8>
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <_ZN4Tone7melody5Ev+0xc4>
    10da:	89 2f       	mov	r24, r25
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	82 23       	and	r24, r18
    10e0:	93 23       	and	r25, r19
    10e2:	89 2b       	or	r24, r25
    10e4:	59 f1       	breq	.+86     	; 0x113c <_ZN4Tone7melody5Ev+0x12e>
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <_ZN4Tone7melody5Ev+0x102>
	changing=0;
	while (changing==0)
	{
			for (int currentNote=0; currentNote<length;currentNote++)
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
    10e8:	93 b1       	in	r25, 0x03	; 3
				if( wantChange) {changing=1;_delay_ms(100);break;}
    10ea:	94 01       	movw	r18, r8
    10ec:	c3 5d       	subi	r28, 0xD3	; 211
    10ee:	de 4f       	sbci	r29, 0xFE	; 254
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
    10f4:	cd 52       	subi	r28, 0x2D	; 45
    10f6:	d1 40       	sbci	r29, 0x01	; 1
    10f8:	02 80       	ldd	r0, Z+2	; 0x02
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <_ZN4Tone7melody5Ev+0xf2>
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <_ZN4Tone7melody5Ev+0xee>
    1104:	89 2f       	mov	r24, r25
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	82 23       	and	r24, r18
    110a:	93 23       	and	r25, r19
    110c:	89 2b       	or	r24, r25
    110e:	e9 f0       	breq	.+58     	; 0x114a <_ZN4Tone7melody5Ev+0x13c>
    1110:	c1 5d       	subi	r28, 0xD1	; 209
    1112:	de 4f       	sbci	r29, 0xFE	; 254
    1114:	f8 81       	ld	r31, Y
    1116:	cf 52       	subi	r28, 0x2F	; 47
    1118:	d1 40       	sbci	r29, 0x01	; 1
    111a:	f0 93 72 06 	sts	0x0672, r31	; 0x800672 <changing>
    111e:	c0 5d       	subi	r28, 0xD0	; 208
    1120:	de 4f       	sbci	r29, 0xFE	; 254
    1122:	88 81       	ld	r24, Y
    1124:	c0 53       	subi	r28, 0x30	; 48
    1126:	d1 40       	sbci	r29, 0x01	; 1
    1128:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <changing+0x1>
    112c:	88 ee       	ldi	r24, 0xE8	; 232
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	f7 01       	movw	r30, r14
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <_ZN4Tone7melody5Ev+0x124>
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	d9 f7       	brne	.-10     	; 0x1130 <_ZN4Tone7melody5Ev+0x122>
    113a:	88 c0       	rjmp	.+272    	; 0x124c <_ZN4Tone7melody5Ev+0x23e>
    113c:	6e 01       	movw	r12, r28
    113e:	95 e9       	ldi	r25, 0x95	; 149
    1140:	c9 0e       	add	r12, r25
    1142:	d1 1c       	adc	r13, r1
    1144:	fe 01       	movw	r30, r28
    1146:	31 96       	adiw	r30, 0x01	; 1
    1148:	5f 01       	movw	r10, r30

				
				float noteDuration = 375*3 / noteDurations[currentNote];
    114a:	f6 01       	movw	r30, r12
    114c:	61 91       	ld	r22, Z+
    114e:	71 91       	ld	r23, Z+
    1150:	6f 01       	movw	r12, r30
    1152:	85 e6       	ldi	r24, 0x65	; 101
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0e 94 a7 0b 	call	0x174e	; 0x174e <__divmodhi4>
    115a:	07 2e       	mov	r0, r23
    115c:	00 0c       	add	r0, r0
    115e:	88 0b       	sbc	r24, r24
    1160:	99 0b       	sbc	r25, r25
    1162:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
    1166:	2b 01       	movw	r4, r22
    1168:	3c 01       	movw	r6, r24
				playNote(melody[currentNote],noteDuration);
    116a:	f5 01       	movw	r30, r10
    116c:	61 91       	ld	r22, Z+
    116e:	71 91       	ld	r23, Z+
    1170:	5f 01       	movw	r10, r30
    1172:	07 2e       	mov	r0, r23
    1174:	00 0c       	add	r0, r0
    1176:	88 0b       	sbc	r24, r24
    1178:	99 0b       	sbc	r25, r25
    117a:	0e 94 85 0a 	call	0x150a	; 0x150a <__floatsisf>
    117e:	ab 01       	movw	r20, r22
    1180:	bc 01       	movw	r22, r24
    1182:	93 01       	movw	r18, r6
    1184:	82 01       	movw	r16, r4
    1186:	c3 5d       	subi	r28, 0xD3	; 211
    1188:	de 4f       	sbci	r29, 0xFE	; 254
    118a:	88 81       	ld	r24, Y
    118c:	99 81       	ldd	r25, Y+1	; 0x01
    118e:	cd 52       	subi	r28, 0x2D	; 45
    1190:	d1 40       	sbci	r29, 0x01	; 1
    1192:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN4Tone8playNoteEff>
				float pauseBetweenNotes= noteDuration*1.30;
    1196:	26 e6       	ldi	r18, 0x66	; 102
    1198:	36 e6       	ldi	r19, 0x66	; 102
    119a:	46 ea       	ldi	r20, 0xA6	; 166
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	c3 01       	movw	r24, r6
    11a0:	b2 01       	movw	r22, r4
    11a2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
    11a6:	c7 5d       	subi	r28, 0xD7	; 215
    11a8:	de 4f       	sbci	r29, 0xFE	; 254
    11aa:	68 83       	st	Y, r22
    11ac:	79 83       	std	Y+1, r23	; 0x01
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	9b 83       	std	Y+3, r25	; 0x03
    11b2:	c9 52       	subi	r28, 0x29	; 41
    11b4:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	4a e7       	ldi	r20, 0x7A	; 122
    11bc:	55 e4       	ldi	r21, 0x45	; 69
    11be:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
    11c2:	2b 01       	movw	r4, r22
    11c4:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__cmpsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	4c f1       	brlt	.+82     	; 0x1228 <_ZN4Tone7melody5Ev+0x21a>
		__ticks = 1;
	else if (__tmp > 65535)
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	0e 94 35 0b 	call	0x166a	; 0x166a <__gesf2>
    11e6:	18 16       	cp	r1, r24
    11e8:	d4 f4       	brge	.+52     	; 0x121e <_ZN4Tone7melody5Ev+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e2       	ldi	r20, 0x20	; 32
    11f0:	51 e4       	ldi	r21, 0x41	; 65
    11f2:	c7 5d       	subi	r28, 0xD7	; 215
    11f4:	de 4f       	sbci	r29, 0xFE	; 254
    11f6:	68 81       	ld	r22, Y
    11f8:	79 81       	ldd	r23, Y+1	; 0x01
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	9b 81       	ldd	r25, Y+3	; 0x03
    11fe:	c9 52       	subi	r28, 0x29	; 41
    1200:	d1 40       	sbci	r29, 0x01	; 1
    1202:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
    1206:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
		while(__ticks)
    120a:	61 15       	cp	r22, r1
    120c:	71 05       	cpc	r23, r1
    120e:	c9 f0       	breq	.+50     	; 0x1242 <_ZN4Tone7melody5Ev+0x234>
    1210:	c7 01       	movw	r24, r14
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <_ZN4Tone7melody5Ev+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1216:	61 50       	subi	r22, 0x01	; 1
    1218:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121a:	d1 f7       	brne	.-12     	; 0x1210 <_ZN4Tone7melody5Ev+0x202>
    121c:	12 c0       	rjmp	.+36     	; 0x1242 <_ZN4Tone7melody5Ev+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	c3 01       	movw	r24, r6
    1220:	b2 01       	movw	r22, r4
    1222:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
    1226:	0a c0       	rjmp	.+20     	; 0x123c <_ZN4Tone7melody5Ev+0x22e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1228:	c1 5d       	subi	r28, 0xD1	; 209
    122a:	de 4f       	sbci	r29, 0xFE	; 254
    122c:	68 81       	ld	r22, Y
    122e:	cf 52       	subi	r28, 0x2F	; 47
    1230:	d1 40       	sbci	r29, 0x01	; 1
    1232:	c0 5d       	subi	r28, 0xD0	; 208
    1234:	de 4f       	sbci	r29, 0xFE	; 254
    1236:	78 81       	ld	r23, Y
    1238:	c0 53       	subi	r28, 0x30	; 48
    123a:	d1 40       	sbci	r29, 0x01	; 1
    123c:	cb 01       	movw	r24, r22
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <_ZN4Tone7melody5Ev+0x230>
				_delay_ms (pauseBetweenNotes);
				SPEAKER_PORT=0;
    1242:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
	{
			for (int currentNote=0; currentNote<length;currentNote++)
    1244:	c2 14       	cp	r12, r2
    1246:	d3 04       	cpc	r13, r3
    1248:	09 f0       	breq	.+2      	; 0x124c <_ZN4Tone7melody5Ev+0x23e>
    124a:	4e cf       	rjmp	.-356    	; 0x10e8 <_ZN4Tone7melody5Ev+0xda>
    124c:	80 ea       	ldi	r24, 0xA0	; 160
    124e:	9f e0       	ldi	r25, 0x0F	; 15
    1250:	f7 01       	movw	r30, r14
    1252:	31 97       	sbiw	r30, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <_ZN4Tone7melody5Ev+0x244>
    1256:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	d9 f7       	brne	.-10     	; 0x1250 <_ZN4Tone7melody5Ev+0x242>
    125a:	2a cf       	rjmp	.-428    	; 0x10b0 <_ZN4Tone7melody5Ev+0xa2>
				SPEAKER_PORT=0;
			}
			
		_delay_ms(400);
	}
}
    125c:	c0 5d       	subi	r28, 0xD0	; 208
    125e:	de 4f       	sbci	r29, 0xFE	; 254
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	2f 90       	pop	r2
    128e:	08 95       	ret

00001290 <_ZN4Tone10playMelodyEi>:

void Tone:: playMelody(int number){

	switch (number) {
    1290:	63 30       	cpi	r22, 0x03	; 3
    1292:	71 05       	cpc	r23, r1
    1294:	a9 f0       	breq	.+42     	; 0x12c0 <_ZN4Tone10playMelodyEi+0x30>
    1296:	3c f4       	brge	.+14     	; 0x12a6 <_ZN4Tone10playMelodyEi+0x16>
    1298:	61 30       	cpi	r22, 0x01	; 1
    129a:	71 05       	cpc	r23, r1
    129c:	59 f0       	breq	.+22     	; 0x12b4 <_ZN4Tone10playMelodyEi+0x24>
    129e:	62 30       	cpi	r22, 0x02	; 2
    12a0:	71 05       	cpc	r23, r1
    12a2:	59 f0       	breq	.+22     	; 0x12ba <_ZN4Tone10playMelodyEi+0x2a>
    12a4:	08 95       	ret
    12a6:	64 30       	cpi	r22, 0x04	; 4
    12a8:	71 05       	cpc	r23, r1
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <_ZN4Tone10playMelodyEi+0x36>
    12ac:	65 30       	cpi	r22, 0x05	; 5
    12ae:	71 05       	cpc	r23, r1
    12b0:	69 f0       	breq	.+26     	; 0x12cc <_ZN4Tone10playMelodyEi+0x3c>
    12b2:	08 95       	ret
		case 1:
		melody1();
    12b4:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN4Tone7melody1Ev>
		break;
    12b8:	08 95       	ret
		case 2:
		melody2();
    12ba:	0e 94 44 04 	call	0x888	; 0x888 <_ZN4Tone7melody2Ev>
		break;
    12be:	08 95       	ret
		case 3:
		melody3();
    12c0:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN4Tone7melody3Ev>
		break;
    12c4:	08 95       	ret
		case 4:
		melody4();
    12c6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_ZN4Tone7melody4Ev>
		break;
    12ca:	08 95       	ret
		case 5:
		melody5();
    12cc:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN4Tone7melody5Ev>
    12d0:	08 95       	ret

000012d2 <__subsf3>:
    12d2:	50 58       	subi	r21, 0x80	; 128

000012d4 <__addsf3>:
    12d4:	bb 27       	eor	r27, r27
    12d6:	aa 27       	eor	r26, r26
    12d8:	0e 94 81 09 	call	0x1302	; 0x1302 <__addsf3x>
    12dc:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__fp_round>
    12e0:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_pscA>
    12e4:	38 f0       	brcs	.+14     	; 0x12f4 <__addsf3+0x20>
    12e6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fp_pscB>
    12ea:	20 f0       	brcs	.+8      	; 0x12f4 <__addsf3+0x20>
    12ec:	39 f4       	brne	.+14     	; 0x12fc <__addsf3+0x28>
    12ee:	9f 3f       	cpi	r25, 0xFF	; 255
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <__addsf3+0x24>
    12f2:	26 f4       	brtc	.+8      	; 0x12fc <__addsf3+0x28>
    12f4:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_nan>
    12f8:	0e f4       	brtc	.+2      	; 0x12fc <__addsf3+0x28>
    12fa:	e0 95       	com	r30
    12fc:	e7 fb       	bst	r30, 7
    12fe:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_inf>

00001302 <__addsf3x>:
    1302:	e9 2f       	mov	r30, r25
    1304:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_split3>
    1308:	58 f3       	brcs	.-42     	; 0x12e0 <__addsf3+0xc>
    130a:	ba 17       	cp	r27, r26
    130c:	62 07       	cpc	r22, r18
    130e:	73 07       	cpc	r23, r19
    1310:	84 07       	cpc	r24, r20
    1312:	95 07       	cpc	r25, r21
    1314:	20 f0       	brcs	.+8      	; 0x131e <__addsf3x+0x1c>
    1316:	79 f4       	brne	.+30     	; 0x1336 <__addsf3x+0x34>
    1318:	a6 f5       	brtc	.+104    	; 0x1382 <__addsf3x+0x80>
    131a:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_zero>
    131e:	0e f4       	brtc	.+2      	; 0x1322 <__addsf3x+0x20>
    1320:	e0 95       	com	r30
    1322:	0b 2e       	mov	r0, r27
    1324:	ba 2f       	mov	r27, r26
    1326:	a0 2d       	mov	r26, r0
    1328:	0b 01       	movw	r0, r22
    132a:	b9 01       	movw	r22, r18
    132c:	90 01       	movw	r18, r0
    132e:	0c 01       	movw	r0, r24
    1330:	ca 01       	movw	r24, r20
    1332:	a0 01       	movw	r20, r0
    1334:	11 24       	eor	r1, r1
    1336:	ff 27       	eor	r31, r31
    1338:	59 1b       	sub	r21, r25
    133a:	99 f0       	breq	.+38     	; 0x1362 <__addsf3x+0x60>
    133c:	59 3f       	cpi	r21, 0xF9	; 249
    133e:	50 f4       	brcc	.+20     	; 0x1354 <__addsf3x+0x52>
    1340:	50 3e       	cpi	r21, 0xE0	; 224
    1342:	68 f1       	brcs	.+90     	; 0x139e <__addsf3x+0x9c>
    1344:	1a 16       	cp	r1, r26
    1346:	f0 40       	sbci	r31, 0x00	; 0
    1348:	a2 2f       	mov	r26, r18
    134a:	23 2f       	mov	r18, r19
    134c:	34 2f       	mov	r19, r20
    134e:	44 27       	eor	r20, r20
    1350:	58 5f       	subi	r21, 0xF8	; 248
    1352:	f3 cf       	rjmp	.-26     	; 0x133a <__addsf3x+0x38>
    1354:	46 95       	lsr	r20
    1356:	37 95       	ror	r19
    1358:	27 95       	ror	r18
    135a:	a7 95       	ror	r26
    135c:	f0 40       	sbci	r31, 0x00	; 0
    135e:	53 95       	inc	r21
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__addsf3x+0x52>
    1362:	7e f4       	brtc	.+30     	; 0x1382 <__addsf3x+0x80>
    1364:	1f 16       	cp	r1, r31
    1366:	ba 0b       	sbc	r27, r26
    1368:	62 0b       	sbc	r22, r18
    136a:	73 0b       	sbc	r23, r19
    136c:	84 0b       	sbc	r24, r20
    136e:	ba f0       	brmi	.+46     	; 0x139e <__addsf3x+0x9c>
    1370:	91 50       	subi	r25, 0x01	; 1
    1372:	a1 f0       	breq	.+40     	; 0x139c <__addsf3x+0x9a>
    1374:	ff 0f       	add	r31, r31
    1376:	bb 1f       	adc	r27, r27
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	c2 f7       	brpl	.-16     	; 0x1370 <__addsf3x+0x6e>
    1380:	0e c0       	rjmp	.+28     	; 0x139e <__addsf3x+0x9c>
    1382:	ba 0f       	add	r27, r26
    1384:	62 1f       	adc	r22, r18
    1386:	73 1f       	adc	r23, r19
    1388:	84 1f       	adc	r24, r20
    138a:	48 f4       	brcc	.+18     	; 0x139e <__addsf3x+0x9c>
    138c:	87 95       	ror	r24
    138e:	77 95       	ror	r23
    1390:	67 95       	ror	r22
    1392:	b7 95       	ror	r27
    1394:	f7 95       	ror	r31
    1396:	9e 3f       	cpi	r25, 0xFE	; 254
    1398:	08 f0       	brcs	.+2      	; 0x139c <__addsf3x+0x9a>
    139a:	b0 cf       	rjmp	.-160    	; 0x12fc <__addsf3+0x28>
    139c:	93 95       	inc	r25
    139e:	88 0f       	add	r24, r24
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <__addsf3x+0xa2>
    13a2:	99 27       	eor	r25, r25
    13a4:	ee 0f       	add	r30, r30
    13a6:	97 95       	ror	r25
    13a8:	87 95       	ror	r24
    13aa:	08 95       	ret

000013ac <__cmpsf2>:
    13ac:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__fp_cmp>
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <__cmpsf2+0x8>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	08 95       	ret

000013b6 <__divsf3>:
    13b6:	0e 94 ef 09 	call	0x13de	; 0x13de <__divsf3x>
    13ba:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__fp_round>
    13be:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fp_pscB>
    13c2:	58 f0       	brcs	.+22     	; 0x13da <__divsf3+0x24>
    13c4:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_pscA>
    13c8:	40 f0       	brcs	.+16     	; 0x13da <__divsf3+0x24>
    13ca:	29 f4       	brne	.+10     	; 0x13d6 <__divsf3+0x20>
    13cc:	5f 3f       	cpi	r21, 0xFF	; 255
    13ce:	29 f0       	breq	.+10     	; 0x13da <__divsf3+0x24>
    13d0:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_inf>
    13d4:	51 11       	cpse	r21, r1
    13d6:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_szero>
    13da:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_nan>

000013de <__divsf3x>:
    13de:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_split3>
    13e2:	68 f3       	brcs	.-38     	; 0x13be <__divsf3+0x8>

000013e4 <__divsf3_pse>:
    13e4:	99 23       	and	r25, r25
    13e6:	b1 f3       	breq	.-20     	; 0x13d4 <__divsf3+0x1e>
    13e8:	55 23       	and	r21, r21
    13ea:	91 f3       	breq	.-28     	; 0x13d0 <__divsf3+0x1a>
    13ec:	95 1b       	sub	r25, r21
    13ee:	55 0b       	sbc	r21, r21
    13f0:	bb 27       	eor	r27, r27
    13f2:	aa 27       	eor	r26, r26
    13f4:	62 17       	cp	r22, r18
    13f6:	73 07       	cpc	r23, r19
    13f8:	84 07       	cpc	r24, r20
    13fa:	38 f0       	brcs	.+14     	; 0x140a <__divsf3_pse+0x26>
    13fc:	9f 5f       	subi	r25, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	44 1f       	adc	r20, r20
    1406:	aa 1f       	adc	r26, r26
    1408:	a9 f3       	breq	.-22     	; 0x13f4 <__divsf3_pse+0x10>
    140a:	35 d0       	rcall	.+106    	; 0x1476 <__divsf3_pse+0x92>
    140c:	0e 2e       	mov	r0, r30
    140e:	3a f0       	brmi	.+14     	; 0x141e <__divsf3_pse+0x3a>
    1410:	e0 e8       	ldi	r30, 0x80	; 128
    1412:	32 d0       	rcall	.+100    	; 0x1478 <__divsf3_pse+0x94>
    1414:	91 50       	subi	r25, 0x01	; 1
    1416:	50 40       	sbci	r21, 0x00	; 0
    1418:	e6 95       	lsr	r30
    141a:	00 1c       	adc	r0, r0
    141c:	ca f7       	brpl	.-14     	; 0x1410 <__divsf3_pse+0x2c>
    141e:	2b d0       	rcall	.+86     	; 0x1476 <__divsf3_pse+0x92>
    1420:	fe 2f       	mov	r31, r30
    1422:	29 d0       	rcall	.+82     	; 0x1476 <__divsf3_pse+0x92>
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	88 1f       	adc	r24, r24
    142a:	bb 1f       	adc	r27, r27
    142c:	26 17       	cp	r18, r22
    142e:	37 07       	cpc	r19, r23
    1430:	48 07       	cpc	r20, r24
    1432:	ab 07       	cpc	r26, r27
    1434:	b0 e8       	ldi	r27, 0x80	; 128
    1436:	09 f0       	breq	.+2      	; 0x143a <__divsf3_pse+0x56>
    1438:	bb 0b       	sbc	r27, r27
    143a:	80 2d       	mov	r24, r0
    143c:	bf 01       	movw	r22, r30
    143e:	ff 27       	eor	r31, r31
    1440:	93 58       	subi	r25, 0x83	; 131
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	3a f0       	brmi	.+14     	; 0x1454 <__divsf3_pse+0x70>
    1446:	9e 3f       	cpi	r25, 0xFE	; 254
    1448:	51 05       	cpc	r21, r1
    144a:	78 f0       	brcs	.+30     	; 0x146a <__divsf3_pse+0x86>
    144c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_inf>
    1450:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_szero>
    1454:	5f 3f       	cpi	r21, 0xFF	; 255
    1456:	e4 f3       	brlt	.-8      	; 0x1450 <__divsf3_pse+0x6c>
    1458:	98 3e       	cpi	r25, 0xE8	; 232
    145a:	d4 f3       	brlt	.-12     	; 0x1450 <__divsf3_pse+0x6c>
    145c:	86 95       	lsr	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	b7 95       	ror	r27
    1464:	f7 95       	ror	r31
    1466:	9f 5f       	subi	r25, 0xFF	; 255
    1468:	c9 f7       	brne	.-14     	; 0x145c <__divsf3_pse+0x78>
    146a:	88 0f       	add	r24, r24
    146c:	91 1d       	adc	r25, r1
    146e:	96 95       	lsr	r25
    1470:	87 95       	ror	r24
    1472:	97 f9       	bld	r25, 7
    1474:	08 95       	ret
    1476:	e1 e0       	ldi	r30, 0x01	; 1
    1478:	66 0f       	add	r22, r22
    147a:	77 1f       	adc	r23, r23
    147c:	88 1f       	adc	r24, r24
    147e:	bb 1f       	adc	r27, r27
    1480:	62 17       	cp	r22, r18
    1482:	73 07       	cpc	r23, r19
    1484:	84 07       	cpc	r24, r20
    1486:	ba 07       	cpc	r27, r26
    1488:	20 f0       	brcs	.+8      	; 0x1492 <__divsf3_pse+0xae>
    148a:	62 1b       	sub	r22, r18
    148c:	73 0b       	sbc	r23, r19
    148e:	84 0b       	sbc	r24, r20
    1490:	ba 0b       	sbc	r27, r26
    1492:	ee 1f       	adc	r30, r30
    1494:	88 f7       	brcc	.-30     	; 0x1478 <__divsf3_pse+0x94>
    1496:	e0 95       	com	r30
    1498:	08 95       	ret

0000149a <__fixsfsi>:
    149a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
    149e:	68 94       	set
    14a0:	b1 11       	cpse	r27, r1
    14a2:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_szero>
    14a6:	08 95       	ret

000014a8 <__fixunssfsi>:
    14a8:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_splitA>
    14ac:	88 f0       	brcs	.+34     	; 0x14d0 <__fixunssfsi+0x28>
    14ae:	9f 57       	subi	r25, 0x7F	; 127
    14b0:	98 f0       	brcs	.+38     	; 0x14d8 <__fixunssfsi+0x30>
    14b2:	b9 2f       	mov	r27, r25
    14b4:	99 27       	eor	r25, r25
    14b6:	b7 51       	subi	r27, 0x17	; 23
    14b8:	b0 f0       	brcs	.+44     	; 0x14e6 <__fixunssfsi+0x3e>
    14ba:	e1 f0       	breq	.+56     	; 0x14f4 <__fixunssfsi+0x4c>
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	1a f0       	brmi	.+6      	; 0x14cc <__fixunssfsi+0x24>
    14c6:	ba 95       	dec	r27
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__fixunssfsi+0x14>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__fixunssfsi+0x4c>
    14cc:	b1 30       	cpi	r27, 0x01	; 1
    14ce:	91 f0       	breq	.+36     	; 0x14f4 <__fixunssfsi+0x4c>
    14d0:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_zero>
    14d4:	b1 e0       	ldi	r27, 0x01	; 1
    14d6:	08 95       	ret
    14d8:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__fp_zero>
    14dc:	67 2f       	mov	r22, r23
    14de:	78 2f       	mov	r23, r24
    14e0:	88 27       	eor	r24, r24
    14e2:	b8 5f       	subi	r27, 0xF8	; 248
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <__fixunssfsi+0x4c>
    14e6:	b9 3f       	cpi	r27, 0xF9	; 249
    14e8:	cc f3       	brlt	.-14     	; 0x14dc <__fixunssfsi+0x34>
    14ea:	86 95       	lsr	r24
    14ec:	77 95       	ror	r23
    14ee:	67 95       	ror	r22
    14f0:	b3 95       	inc	r27
    14f2:	d9 f7       	brne	.-10     	; 0x14ea <__fixunssfsi+0x42>
    14f4:	3e f4       	brtc	.+14     	; 0x1504 <__fixunssfsi+0x5c>
    14f6:	90 95       	com	r25
    14f8:	80 95       	com	r24
    14fa:	70 95       	com	r23
    14fc:	61 95       	neg	r22
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	8f 4f       	sbci	r24, 0xFF	; 255
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	08 95       	ret

00001506 <__floatunsisf>:
    1506:	e8 94       	clt
    1508:	09 c0       	rjmp	.+18     	; 0x151c <__floatsisf+0x12>

0000150a <__floatsisf>:
    150a:	97 fb       	bst	r25, 7
    150c:	3e f4       	brtc	.+14     	; 0x151c <__floatsisf+0x12>
    150e:	90 95       	com	r25
    1510:	80 95       	com	r24
    1512:	70 95       	com	r23
    1514:	61 95       	neg	r22
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	99 23       	and	r25, r25
    151e:	a9 f0       	breq	.+42     	; 0x154a <__floatsisf+0x40>
    1520:	f9 2f       	mov	r31, r25
    1522:	96 e9       	ldi	r25, 0x96	; 150
    1524:	bb 27       	eor	r27, r27
    1526:	93 95       	inc	r25
    1528:	f6 95       	lsr	r31
    152a:	87 95       	ror	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b7 95       	ror	r27
    1532:	f1 11       	cpse	r31, r1
    1534:	f8 cf       	rjmp	.-16     	; 0x1526 <__floatsisf+0x1c>
    1536:	fa f4       	brpl	.+62     	; 0x1576 <__floatsisf+0x6c>
    1538:	bb 0f       	add	r27, r27
    153a:	11 f4       	brne	.+4      	; 0x1540 <__floatsisf+0x36>
    153c:	60 ff       	sbrs	r22, 0
    153e:	1b c0       	rjmp	.+54     	; 0x1576 <__floatsisf+0x6c>
    1540:	6f 5f       	subi	r22, 0xFF	; 255
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	8f 4f       	sbci	r24, 0xFF	; 255
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	16 c0       	rjmp	.+44     	; 0x1576 <__floatsisf+0x6c>
    154a:	88 23       	and	r24, r24
    154c:	11 f0       	breq	.+4      	; 0x1552 <__floatsisf+0x48>
    154e:	96 e9       	ldi	r25, 0x96	; 150
    1550:	11 c0       	rjmp	.+34     	; 0x1574 <__floatsisf+0x6a>
    1552:	77 23       	and	r23, r23
    1554:	21 f0       	breq	.+8      	; 0x155e <__floatsisf+0x54>
    1556:	9e e8       	ldi	r25, 0x8E	; 142
    1558:	87 2f       	mov	r24, r23
    155a:	76 2f       	mov	r23, r22
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <__floatsisf+0x5e>
    155e:	66 23       	and	r22, r22
    1560:	71 f0       	breq	.+28     	; 0x157e <__floatsisf+0x74>
    1562:	96 e8       	ldi	r25, 0x86	; 134
    1564:	86 2f       	mov	r24, r22
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	2a f0       	brmi	.+10     	; 0x1576 <__floatsisf+0x6c>
    156c:	9a 95       	dec	r25
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	88 1f       	adc	r24, r24
    1574:	da f7       	brpl	.-10     	; 0x156c <__floatsisf+0x62>
    1576:	88 0f       	add	r24, r24
    1578:	96 95       	lsr	r25
    157a:	87 95       	ror	r24
    157c:	97 f9       	bld	r25, 7
    157e:	08 95       	ret

00001580 <__fp_cmp>:
    1580:	99 0f       	add	r25, r25
    1582:	00 08       	sbc	r0, r0
    1584:	55 0f       	add	r21, r21
    1586:	aa 0b       	sbc	r26, r26
    1588:	e0 e8       	ldi	r30, 0x80	; 128
    158a:	fe ef       	ldi	r31, 0xFE	; 254
    158c:	16 16       	cp	r1, r22
    158e:	17 06       	cpc	r1, r23
    1590:	e8 07       	cpc	r30, r24
    1592:	f9 07       	cpc	r31, r25
    1594:	c0 f0       	brcs	.+48     	; 0x15c6 <__fp_cmp+0x46>
    1596:	12 16       	cp	r1, r18
    1598:	13 06       	cpc	r1, r19
    159a:	e4 07       	cpc	r30, r20
    159c:	f5 07       	cpc	r31, r21
    159e:	98 f0       	brcs	.+38     	; 0x15c6 <__fp_cmp+0x46>
    15a0:	62 1b       	sub	r22, r18
    15a2:	73 0b       	sbc	r23, r19
    15a4:	84 0b       	sbc	r24, r20
    15a6:	95 0b       	sbc	r25, r21
    15a8:	39 f4       	brne	.+14     	; 0x15b8 <__fp_cmp+0x38>
    15aa:	0a 26       	eor	r0, r26
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <__fp_cmp+0x46>
    15ae:	23 2b       	or	r18, r19
    15b0:	24 2b       	or	r18, r20
    15b2:	25 2b       	or	r18, r21
    15b4:	21 f4       	brne	.+8      	; 0x15be <__fp_cmp+0x3e>
    15b6:	08 95       	ret
    15b8:	0a 26       	eor	r0, r26
    15ba:	09 f4       	brne	.+2      	; 0x15be <__fp_cmp+0x3e>
    15bc:	a1 40       	sbci	r26, 0x01	; 1
    15be:	a6 95       	lsr	r26
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	81 1d       	adc	r24, r1
    15c4:	81 1d       	adc	r24, r1
    15c6:	08 95       	ret

000015c8 <__fp_inf>:
    15c8:	97 f9       	bld	r25, 7
    15ca:	9f 67       	ori	r25, 0x7F	; 127
    15cc:	80 e8       	ldi	r24, 0x80	; 128
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	08 95       	ret

000015d4 <__fp_nan>:
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	80 ec       	ldi	r24, 0xC0	; 192
    15d8:	08 95       	ret

000015da <__fp_pscA>:
    15da:	00 24       	eor	r0, r0
    15dc:	0a 94       	dec	r0
    15de:	16 16       	cp	r1, r22
    15e0:	17 06       	cpc	r1, r23
    15e2:	18 06       	cpc	r1, r24
    15e4:	09 06       	cpc	r0, r25
    15e6:	08 95       	ret

000015e8 <__fp_pscB>:
    15e8:	00 24       	eor	r0, r0
    15ea:	0a 94       	dec	r0
    15ec:	12 16       	cp	r1, r18
    15ee:	13 06       	cpc	r1, r19
    15f0:	14 06       	cpc	r1, r20
    15f2:	05 06       	cpc	r0, r21
    15f4:	08 95       	ret

000015f6 <__fp_round>:
    15f6:	09 2e       	mov	r0, r25
    15f8:	03 94       	inc	r0
    15fa:	00 0c       	add	r0, r0
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__fp_round+0xc>
    15fe:	88 23       	and	r24, r24
    1600:	52 f0       	brmi	.+20     	; 0x1616 <__fp_round+0x20>
    1602:	bb 0f       	add	r27, r27
    1604:	40 f4       	brcc	.+16     	; 0x1616 <__fp_round+0x20>
    1606:	bf 2b       	or	r27, r31
    1608:	11 f4       	brne	.+4      	; 0x160e <__fp_round+0x18>
    160a:	60 ff       	sbrs	r22, 0
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <__fp_round+0x20>
    160e:	6f 5f       	subi	r22, 0xFF	; 255
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	8f 4f       	sbci	r24, 0xFF	; 255
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	08 95       	ret

00001618 <__fp_split3>:
    1618:	57 fd       	sbrc	r21, 7
    161a:	90 58       	subi	r25, 0x80	; 128
    161c:	44 0f       	add	r20, r20
    161e:	55 1f       	adc	r21, r21
    1620:	59 f0       	breq	.+22     	; 0x1638 <__fp_splitA+0x10>
    1622:	5f 3f       	cpi	r21, 0xFF	; 255
    1624:	71 f0       	breq	.+28     	; 0x1642 <__fp_splitA+0x1a>
    1626:	47 95       	ror	r20

00001628 <__fp_splitA>:
    1628:	88 0f       	add	r24, r24
    162a:	97 fb       	bst	r25, 7
    162c:	99 1f       	adc	r25, r25
    162e:	61 f0       	breq	.+24     	; 0x1648 <__fp_splitA+0x20>
    1630:	9f 3f       	cpi	r25, 0xFF	; 255
    1632:	79 f0       	breq	.+30     	; 0x1652 <__fp_splitA+0x2a>
    1634:	87 95       	ror	r24
    1636:	08 95       	ret
    1638:	12 16       	cp	r1, r18
    163a:	13 06       	cpc	r1, r19
    163c:	14 06       	cpc	r1, r20
    163e:	55 1f       	adc	r21, r21
    1640:	f2 cf       	rjmp	.-28     	; 0x1626 <__fp_split3+0xe>
    1642:	46 95       	lsr	r20
    1644:	f1 df       	rcall	.-30     	; 0x1628 <__fp_splitA>
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <__fp_splitA+0x30>
    1648:	16 16       	cp	r1, r22
    164a:	17 06       	cpc	r1, r23
    164c:	18 06       	cpc	r1, r24
    164e:	99 1f       	adc	r25, r25
    1650:	f1 cf       	rjmp	.-30     	; 0x1634 <__fp_splitA+0xc>
    1652:	86 95       	lsr	r24
    1654:	71 05       	cpc	r23, r1
    1656:	61 05       	cpc	r22, r1
    1658:	08 94       	sec
    165a:	08 95       	ret

0000165c <__fp_zero>:
    165c:	e8 94       	clt

0000165e <__fp_szero>:
    165e:	bb 27       	eor	r27, r27
    1660:	66 27       	eor	r22, r22
    1662:	77 27       	eor	r23, r23
    1664:	cb 01       	movw	r24, r22
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret

0000166a <__gesf2>:
    166a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__fp_cmp>
    166e:	08 f4       	brcc	.+2      	; 0x1672 <__gesf2+0x8>
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	08 95       	ret

00001674 <__mulsf3>:
    1674:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3x>
    1678:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__fp_round>
    167c:	0e 94 ed 0a 	call	0x15da	; 0x15da <__fp_pscA>
    1680:	38 f0       	brcs	.+14     	; 0x1690 <__mulsf3+0x1c>
    1682:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fp_pscB>
    1686:	20 f0       	brcs	.+8      	; 0x1690 <__mulsf3+0x1c>
    1688:	95 23       	and	r25, r21
    168a:	11 f0       	breq	.+4      	; 0x1690 <__mulsf3+0x1c>
    168c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_inf>
    1690:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__fp_nan>
    1694:	11 24       	eor	r1, r1
    1696:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_szero>

0000169a <__mulsf3x>:
    169a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_split3>
    169e:	70 f3       	brcs	.-36     	; 0x167c <__mulsf3+0x8>

000016a0 <__mulsf3_pse>:
    16a0:	95 9f       	mul	r25, r21
    16a2:	c1 f3       	breq	.-16     	; 0x1694 <__mulsf3+0x20>
    16a4:	95 0f       	add	r25, r21
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	55 1f       	adc	r21, r21
    16aa:	62 9f       	mul	r22, r18
    16ac:	f0 01       	movw	r30, r0
    16ae:	72 9f       	mul	r23, r18
    16b0:	bb 27       	eor	r27, r27
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	63 9f       	mul	r22, r19
    16b8:	aa 27       	eor	r26, r26
    16ba:	f0 0d       	add	r31, r0
    16bc:	b1 1d       	adc	r27, r1
    16be:	aa 1f       	adc	r26, r26
    16c0:	64 9f       	mul	r22, r20
    16c2:	66 27       	eor	r22, r22
    16c4:	b0 0d       	add	r27, r0
    16c6:	a1 1d       	adc	r26, r1
    16c8:	66 1f       	adc	r22, r22
    16ca:	82 9f       	mul	r24, r18
    16cc:	22 27       	eor	r18, r18
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	73 9f       	mul	r23, r19
    16d6:	b0 0d       	add	r27, r0
    16d8:	a1 1d       	adc	r26, r1
    16da:	62 1f       	adc	r22, r18
    16dc:	83 9f       	mul	r24, r19
    16de:	a0 0d       	add	r26, r0
    16e0:	61 1d       	adc	r22, r1
    16e2:	22 1f       	adc	r18, r18
    16e4:	74 9f       	mul	r23, r20
    16e6:	33 27       	eor	r19, r19
    16e8:	a0 0d       	add	r26, r0
    16ea:	61 1d       	adc	r22, r1
    16ec:	23 1f       	adc	r18, r19
    16ee:	84 9f       	mul	r24, r20
    16f0:	60 0d       	add	r22, r0
    16f2:	21 1d       	adc	r18, r1
    16f4:	82 2f       	mov	r24, r18
    16f6:	76 2f       	mov	r23, r22
    16f8:	6a 2f       	mov	r22, r26
    16fa:	11 24       	eor	r1, r1
    16fc:	9f 57       	subi	r25, 0x7F	; 127
    16fe:	50 40       	sbci	r21, 0x00	; 0
    1700:	9a f0       	brmi	.+38     	; 0x1728 <__mulsf3_pse+0x88>
    1702:	f1 f0       	breq	.+60     	; 0x1740 <__mulsf3_pse+0xa0>
    1704:	88 23       	and	r24, r24
    1706:	4a f0       	brmi	.+18     	; 0x171a <__mulsf3_pse+0x7a>
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	bb 1f       	adc	r27, r27
    170e:	66 1f       	adc	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	a9 f7       	brne	.-22     	; 0x1704 <__mulsf3_pse+0x64>
    171a:	9e 3f       	cpi	r25, 0xFE	; 254
    171c:	51 05       	cpc	r21, r1
    171e:	80 f0       	brcs	.+32     	; 0x1740 <__mulsf3_pse+0xa0>
    1720:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_inf>
    1724:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__fp_szero>
    1728:	5f 3f       	cpi	r21, 0xFF	; 255
    172a:	e4 f3       	brlt	.-8      	; 0x1724 <__mulsf3_pse+0x84>
    172c:	98 3e       	cpi	r25, 0xE8	; 232
    172e:	d4 f3       	brlt	.-12     	; 0x1724 <__mulsf3_pse+0x84>
    1730:	86 95       	lsr	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	e7 95       	ror	r30
    173c:	9f 5f       	subi	r25, 0xFF	; 255
    173e:	c1 f7       	brne	.-16     	; 0x1730 <__mulsf3_pse+0x90>
    1740:	fe 2b       	or	r31, r30
    1742:	88 0f       	add	r24, r24
    1744:	91 1d       	adc	r25, r1
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret

0000174e <__divmodhi4>:
    174e:	97 fb       	bst	r25, 7
    1750:	07 2e       	mov	r0, r23
    1752:	16 f4       	brtc	.+4      	; 0x1758 <__divmodhi4+0xa>
    1754:	00 94       	com	r0
    1756:	07 d0       	rcall	.+14     	; 0x1766 <__divmodhi4_neg1>
    1758:	77 fd       	sbrc	r23, 7
    175a:	09 d0       	rcall	.+18     	; 0x176e <__divmodhi4_neg2>
    175c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__udivmodhi4>
    1760:	07 fc       	sbrc	r0, 7
    1762:	05 d0       	rcall	.+10     	; 0x176e <__divmodhi4_neg2>
    1764:	3e f4       	brtc	.+14     	; 0x1774 <__divmodhi4_exit>

00001766 <__divmodhi4_neg1>:
    1766:	90 95       	com	r25
    1768:	81 95       	neg	r24
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	08 95       	ret

0000176e <__divmodhi4_neg2>:
    176e:	70 95       	com	r23
    1770:	61 95       	neg	r22
    1772:	7f 4f       	sbci	r23, 0xFF	; 255

00001774 <__divmodhi4_exit>:
    1774:	08 95       	ret

00001776 <__udivmodhi4>:
    1776:	aa 1b       	sub	r26, r26
    1778:	bb 1b       	sub	r27, r27
    177a:	51 e1       	ldi	r21, 0x11	; 17
    177c:	07 c0       	rjmp	.+14     	; 0x178c <__udivmodhi4_ep>

0000177e <__udivmodhi4_loop>:
    177e:	aa 1f       	adc	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	a6 17       	cp	r26, r22
    1784:	b7 07       	cpc	r27, r23
    1786:	10 f0       	brcs	.+4      	; 0x178c <__udivmodhi4_ep>
    1788:	a6 1b       	sub	r26, r22
    178a:	b7 0b       	sbc	r27, r23

0000178c <__udivmodhi4_ep>:
    178c:	88 1f       	adc	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	5a 95       	dec	r21
    1792:	a9 f7       	brne	.-22     	; 0x177e <__udivmodhi4_loop>
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	08 95       	ret

0000179e <__tablejump2__>:
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	05 90       	lpm	r0, Z+
    17a4:	f4 91       	lpm	r31, Z
    17a6:	e0 2d       	mov	r30, r0
    17a8:	09 94       	ijmp

000017aa <_exit>:
    17aa:	f8 94       	cli

000017ac <__stop_program>:
    17ac:	ff cf       	rjmp	.-2      	; 0x17ac <__stop_program>
