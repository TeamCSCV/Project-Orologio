
Alarm Tones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000056e  00800100  0000155e  000015f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000155e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080066e  0080066e  00001b60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001967  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2d  00000000  00000000  000035b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c03  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00004be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c7  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac1  00000000  00000000  000054c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00006f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	7e 00       	.word	0x007e	; ????

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee e5       	ldi	r30, 0x5E	; 94
      7e:	f5 e1       	ldi	r31, 0x15	; 21
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ae 36       	cpi	r26, 0x6E	; 110
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	26 e0       	ldi	r18, 0x06	; 6
      8e:	ae e6       	ldi	r26, 0x6E	; 110
      90:	b6 e0       	ldi	r27, 0x06	; 6
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a2 37       	cpi	r26, 0x72	; 114
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 a7 0a 	call	0x154e	; 0x154e <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
      b6:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include "Tone.h"

Tone alarmTone(2);

int main(void)
{_delay_ms(1000);
      be:	80 e1       	ldi	r24, 0x10	; 16
      c0:	97 e2       	ldi	r25, 0x27	; 39
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
      c2:	28 ec       	ldi	r18, 0xC8	; 200
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0xa>
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x8>
      d0:	0c c0       	rjmp	.+24     	; 0xea <main+0x2c>
	
	
	int i=0;
	while(1){
		
		alarmTone.playMelody(i);
      d2:	be 01       	movw	r22, r28
      d4:	8e e6       	ldi	r24, 0x6E	; 110
      d6:	96 e0       	ldi	r25, 0x06	; 6
      d8:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN4Tone10playMelodyEi>
		i++;
      dc:	21 96       	adiw	r28, 0x01	; 1
		if (i>5){i=1;}
      de:	c6 30       	cpi	r28, 0x06	; 6
      e0:	d1 05       	cpc	r29, r1
      e2:	bc f3       	brlt	.-18     	; 0xd2 <main+0x14>
      e4:	c1 e0       	ldi	r28, 0x01	; 1
      e6:	d0 e0       	ldi	r29, 0x00	; 0
      e8:	f4 cf       	rjmp	.-24     	; 0xd2 <main+0x14>
	
	
	int i=0;
	while(1){
		
		alarmTone.playMelody(i);
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	8e e6       	ldi	r24, 0x6E	; 110
      f0:	96 e0       	ldi	r25, 0x06	; 6
      f2:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN4Tone10playMelodyEi>
		i++;
      f6:	c1 e0       	ldi	r28, 0x01	; 1
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	eb cf       	rjmp	.-42     	; 0xd2 <main+0x14>

000000fc <_GLOBAL__sub_I_alarmTone>:

#include <avr/io.h>
#include <util/delay.h>
#include "Tone.h"

Tone alarmTone(2);
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	8e e6       	ldi	r24, 0x6E	; 110
     102:	96 e0       	ldi	r25, 0x06	; 6
     104:	0e 94 85 00 	call	0x10a	; 0x10a <_ZN4ToneC1Ei>
     108:	08 95       	ret

0000010a <_ZN4ToneC1Ei>:

int changing;

Tone::Tone(int pin)
{
	SPEAKER_PIN=pin;
     10a:	fc 01       	movw	r30, r24
     10c:	71 83       	std	Z+1, r23	; 0x01
     10e:	60 83       	st	Z, r22
     110:	08 95       	ret

00000112 <_ZN4Tone8playNoteEff>:
}

void Tone:: playNote(float frequency, float duration)
{
     112:	2f 92       	push	r2
     114:	3f 92       	push	r3
     116:	4f 92       	push	r4
     118:	5f 92       	push	r5
     11a:	6f 92       	push	r6
     11c:	7f 92       	push	r7
     11e:	8f 92       	push	r8
     120:	9f 92       	push	r9
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	63 97       	sbiw	r28, 0x13	; 19
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
     146:	1c 01       	movw	r2, r24
     148:	6a 01       	movw	r12, r20
     14a:	7b 01       	movw	r14, r22
     14c:	c9 01       	movw	r24, r18
     14e:	b8 01       	movw	r22, r16
	duration*=0.5;
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	5f e3       	ldi	r21, 0x3F	; 63
     158:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     15c:	4b 01       	movw	r8, r22
     15e:	5c 01       	movw	r10, r24
	long int cycles;
	float half_period;
	float wavelength;
	
	SPEAKER_DDR |= (1 << SPEAKER_PIN);
     160:	24 b1       	in	r18, 0x04	; 4
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	f1 01       	movw	r30, r2
     168:	00 80       	ld	r0, Z
     16a:	02 c0       	rjmp	.+4      	; 0x170 <_ZN4Tone8playNoteEff+0x5e>
     16c:	88 0f       	add	r24, r24
     16e:	99 1f       	adc	r25, r25
     170:	0a 94       	dec	r0
     172:	e2 f7       	brpl	.-8      	; 0x16c <_ZN4Tone8playNoteEff+0x5a>
     174:	82 2b       	or	r24, r18
     176:	84 b9       	out	0x04, r24	; 4
	if (frequency==0){
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	a9 01       	movw	r20, r18
     17e:	c7 01       	movw	r24, r14
     180:	b6 01       	movw	r22, r12
     182:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     186:	81 11       	cpse	r24, r1
     188:	d5 c0       	rjmp	.+426    	; 0x334 <_ZN4Tone8playNoteEff+0x222>
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     18a:	25 b1       	in	r18, 0x05	; 5
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	f1 01       	movw	r30, r2
     192:	00 80       	ld	r0, Z
     194:	02 c0       	rjmp	.+4      	; 0x19a <_ZN4Tone8playNoteEff+0x88>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	0a 94       	dec	r0
     19c:	e2 f7       	brpl	.-8      	; 0x196 <_ZN4Tone8playNoteEff+0x84>
     19e:	80 95       	com	r24
     1a0:	82 23       	and	r24, r18
     1a2:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     1a4:	2b ea       	ldi	r18, 0xAB	; 171
     1a6:	3a ea       	ldi	r19, 0xAA	; 170
     1a8:	4a e2       	ldi	r20, 0x2A	; 42
     1aa:	50 e4       	ldi	r21, 0x40	; 64
     1ac:	c5 01       	movw	r24, r10
     1ae:	b4 01       	movw	r22, r8
     1b0:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     1b4:	2b 01       	movw	r4, r22
     1b6:	3c 01       	movw	r6, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     1b8:	a5 01       	movw	r20, r10
     1ba:	94 01       	movw	r18, r8
     1bc:	c5 01       	movw	r24, r10
     1be:	b4 01       	movw	r22, r8
     1c0:	0e 94 42 08 	call	0x1084	; 0x1084 <__addsf3>
     1c4:	6b 01       	movw	r12, r22
     1c6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     1c8:	20 e0       	ldi	r18, 0x00	; 0
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e8       	ldi	r20, 0x80	; 128
     1ce:	5f e3       	ldi	r21, 0x3F	; 63
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     1d8:	88 23       	and	r24, r24
     1da:	0c f4       	brge	.+2      	; 0x1de <_ZN4Tone8playNoteEff+0xcc>
     1dc:	68 c0       	rjmp	.+208    	; 0x2ae <_ZN4Tone8playNoteEff+0x19c>
		__ticks = 1;
	else if (__tmp2 > 65535)
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	3f ef       	ldi	r19, 0xFF	; 255
     1e2:	4f e7       	ldi	r20, 0x7F	; 127
     1e4:	57 e4       	ldi	r21, 0x47	; 71
     1e6:	c7 01       	movw	r24, r14
     1e8:	b6 01       	movw	r22, r12
     1ea:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     1ee:	18 16       	cp	r1, r24
     1f0:	0c f0       	brlt	.+2      	; 0x1f4 <_ZN4Tone8playNoteEff+0xe2>
     1f2:	45 c0       	rjmp	.+138    	; 0x27e <_ZN4Tone8playNoteEff+0x16c>
	{
		_delay_ms(__us / 1000.0);
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	4a e7       	ldi	r20, 0x7A	; 122
     1fa:	54 e4       	ldi	r21, 0x44	; 68
     1fc:	c5 01       	movw	r24, r10
     1fe:	b4 01       	movw	r22, r8
     200:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divsf3>
     204:	2b 01       	movw	r4, r22
     206:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	4a ef       	ldi	r20, 0xFA	; 250
     20e:	54 e4       	ldi	r21, 0x44	; 68
     210:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     214:	4b 01       	movw	r8, r22
     216:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     224:	88 23       	and	r24, r24
     226:	2c f1       	brlt	.+74     	; 0x272 <_ZN4Tone8playNoteEff+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	3f ef       	ldi	r19, 0xFF	; 255
     22c:	4f e7       	ldi	r20, 0x7F	; 127
     22e:	57 e4       	ldi	r21, 0x47	; 71
     230:	c5 01       	movw	r24, r10
     232:	b4 01       	movw	r22, r8
     234:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     238:	18 16       	cp	r1, r24
     23a:	b4 f4       	brge	.+44     	; 0x268 <_ZN4Tone8playNoteEff+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	40 e2       	ldi	r20, 0x20	; 32
     242:	51 e4       	ldi	r21, 0x41	; 65
     244:	c3 01       	movw	r24, r6
     246:	b2 01       	movw	r22, r4
     248:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     24c:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     250:	61 15       	cp	r22, r1
     252:	71 05       	cpc	r23, r1
     254:	71 f1       	breq	.+92     	; 0x2b2 <_ZN4Tone8playNoteEff+0x1a0>
     256:	28 ec       	ldi	r18, 0xC8	; 200
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	c9 01       	movw	r24, r18
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <_ZN4Tone8playNoteEff+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     260:	61 50       	subi	r22, 0x01	; 1
     262:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     264:	d1 f7       	brne	.-12     	; 0x25a <_ZN4Tone8playNoteEff+0x148>
     266:	25 c0       	rjmp	.+74     	; 0x2b2 <_ZN4Tone8playNoteEff+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     268:	c5 01       	movw	r24, r10
     26a:	b4 01       	movw	r22, r8
     26c:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     270:	02 c0       	rjmp	.+4      	; 0x276 <_ZN4Tone8playNoteEff+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	cb 01       	movw	r24, r22
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <_ZN4Tone8playNoteEff+0x166>
     27c:	1a c0       	rjmp	.+52     	; 0x2b2 <_ZN4Tone8playNoteEff+0x1a0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	4f e7       	ldi	r20, 0x7F	; 127
     284:	53 e4       	ldi	r21, 0x43	; 67
     286:	c3 01       	movw	r24, r6
     288:	b2 01       	movw	r22, r4
     28a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     28e:	18 16       	cp	r1, r24
     290:	44 f4       	brge	.+16     	; 0x2a2 <_ZN4Tone8playNoteEff+0x190>
     292:	c7 01       	movw	r24, r14
     294:	b6 01       	movw	r22, r12
     296:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     29a:	cb 01       	movw	r24, r22
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <_ZN4Tone8playNoteEff+0x18a>
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_ZN4Tone8playNoteEff+0x1a6>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2a2:	c3 01       	movw	r24, r6
     2a4:	b2 01       	movw	r22, r4
     2a6:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     2aa:	69 83       	std	Y+1, r22	; 0x01
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <_ZN4Tone8playNoteEff+0x1a0>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     2ae:	e1 e0       	ldi	r30, 0x01	; 1
     2b0:	e9 83       	std	Y+1, r30	; 0x01
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     2b2:	f9 81       	ldd	r31, Y+1	; 0x01
     2b4:	fa 95       	dec	r31
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <_ZN4Tone8playNoteEff+0x1a2>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	4a ef       	ldi	r20, 0xFA	; 250
     2be:	54 e4       	ldi	r21, 0x44	; 68
     2c0:	c7 01       	movw	r24, r14
     2c2:	b6 01       	movw	r22, r12
     2c4:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     2c8:	4b 01       	movw	r8, r22
     2ca:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e8       	ldi	r20, 0x80	; 128
     2d2:	5f e3       	ldi	r21, 0x3F	; 63
     2d4:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     2d8:	88 23       	and	r24, r24
     2da:	34 f1       	brlt	.+76     	; 0x328 <_ZN4Tone8playNoteEff+0x216>
		__ticks = 1;
	else if (__tmp > 65535)
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	3f ef       	ldi	r19, 0xFF	; 255
     2e0:	4f e7       	ldi	r20, 0x7F	; 127
     2e2:	57 e4       	ldi	r21, 0x47	; 71
     2e4:	c5 01       	movw	r24, r10
     2e6:	b4 01       	movw	r22, r8
     2e8:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     2ec:	18 16       	cp	r1, r24
     2ee:	bc f4       	brge	.+46     	; 0x31e <_ZN4Tone8playNoteEff+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e2       	ldi	r20, 0x20	; 32
     2f6:	51 e4       	ldi	r21, 0x41	; 65
     2f8:	c7 01       	movw	r24, r14
     2fa:	b6 01       	movw	r22, r12
     2fc:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     300:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     304:	61 15       	cp	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f4       	brne	.+2      	; 0x30c <_ZN4Tone8playNoteEff+0x1fa>
     30a:	93 c1       	rjmp	.+806    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     30c:	28 ec       	ldi	r18, 0xC8	; 200
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	c9 01       	movw	r24, r18
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <_ZN4Tone8playNoteEff+0x200>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     316:	61 50       	subi	r22, 0x01	; 1
     318:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     31a:	d1 f7       	brne	.-12     	; 0x310 <_ZN4Tone8playNoteEff+0x1fe>
     31c:	8a c1       	rjmp	.+788    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     31e:	c5 01       	movw	r24, r10
     320:	b4 01       	movw	r22, r8
     322:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     326:	02 c0       	rjmp	.+4      	; 0x32c <_ZN4Tone8playNoteEff+0x21a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	cb 01       	movw	r24, r22
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <_ZN4Tone8playNoteEff+0x21c>
     332:	7f c1       	rjmp	.+766    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
			_delay_ms (pauseBetweenNotes);
	}
	
	
	else{
		wavelength=(1/frequency)*1000;
     334:	a7 01       	movw	r20, r14
     336:	96 01       	movw	r18, r12
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	80 e8       	ldi	r24, 0x80	; 128
     33e:	9f e3       	ldi	r25, 0x3F	; 63
     340:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divsf3>
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	4a e7       	ldi	r20, 0x7A	; 122
     34a:	54 e4       	ldi	r21, 0x44	; 68
     34c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     350:	6b 01       	movw	r12, r22
     352:	7c 01       	movw	r14, r24
		cycles=2*duration/wavelength;
     354:	a5 01       	movw	r20, r10
     356:	94 01       	movw	r18, r8
     358:	c5 01       	movw	r24, r10
     35a:	b4 01       	movw	r22, r8
     35c:	0e 94 42 08 	call	0x1084	; 0x1084 <__addsf3>
     360:	a7 01       	movw	r20, r14
     362:	96 01       	movw	r18, r12
     364:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divsf3>
     368:	0e 94 25 09 	call	0x124a	; 0x124a <__fixsfsi>
     36c:	4b 01       	movw	r8, r22
     36e:	5c 01       	movw	r10, r24
		half_period = wavelength/2;
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	5f e3       	ldi	r21, 0x3F	; 63
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>

		
		
		for (int i=0;i<cycles;i++)
     380:	18 14       	cp	r1, r8
     382:	19 04       	cpc	r1, r9
     384:	1a 04       	cpc	r1, r10
     386:	1b 04       	cpc	r1, r11
     388:	0c f0       	brlt	.+2      	; 0x38c <_ZN4Tone8playNoteEff+0x27a>
     38a:	53 c1       	rjmp	.+678    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
		{
			_delay_us(half_period*1000);
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4a e7       	ldi	r20, 0x7A	; 122
     392:	54 e4       	ldi	r21, 0x44	; 68
     394:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     398:	6d 87       	std	Y+13, r22	; 0x0d
     39a:	7e 87       	std	Y+14, r23	; 0x0e
     39c:	8f 87       	std	Y+15, r24	; 0x0f
     39e:	98 8b       	std	Y+16, r25	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     3a0:	2b ea       	ldi	r18, 0xAB	; 171
     3a2:	3a ea       	ldi	r19, 0xAA	; 170
     3a4:	4a e2       	ldi	r20, 0x2A	; 42
     3a6:	50 e4       	ldi	r21, 0x40	; 64
     3a8:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
     3b0:	2d 85       	ldd	r18, Y+13	; 0x0d
     3b2:	3e 85       	ldd	r19, Y+14	; 0x0e
     3b4:	4f 85       	ldd	r20, Y+15	; 0x0f
     3b6:	58 89       	ldd	r21, Y+16	; 0x10
     3b8:	ca 01       	movw	r24, r20
     3ba:	b9 01       	movw	r22, r18
     3bc:	0e 94 42 08 	call	0x1084	; 0x1084 <__addsf3>
     3c0:	69 87       	std	Y+9, r22	; 0x09
     3c2:	7a 87       	std	Y+10, r23	; 0x0a
     3c4:	8b 87       	std	Y+11, r24	; 0x0b
     3c6:	9c 87       	std	Y+12, r25	; 0x0c
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3c8:	c7 01       	movw	r24, r14
     3ca:	b6 01       	movw	r22, r12
     3cc:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     3d0:	6b 8b       	std	Y+19, r22	; 0x13
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     3d2:	69 85       	ldd	r22, Y+9	; 0x09
     3d4:	7a 85       	ldd	r23, Y+10	; 0x0a
     3d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3da:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     3de:	7a 8b       	std	Y+18, r23	; 0x12
     3e0:	69 8b       	std	Y+17, r22	; 0x11
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	0f 2e       	mov	r0, r31
     3e8:	f8 ec       	ldi	r31, 0xC8	; 200
     3ea:	6f 2e       	mov	r6, r31
     3ec:	71 2c       	mov	r7, r1
     3ee:	f0 2d       	mov	r31, r0
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e8       	ldi	r20, 0x80	; 128
     3f6:	5f e3       	ldi	r21, 0x3F	; 63
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     400:	88 23       	and	r24, r24
     402:	0c f4       	brge	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	6b c0       	rjmp	.+214    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		__ticks = 1;
	else if (__tmp2 > 65535)
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	69 85       	ldd	r22, Y+9	; 0x09
     410:	7a 85       	ldd	r23, Y+10	; 0x0a
     412:	8b 85       	ldd	r24, Y+11	; 0x0b
     414:	9c 85       	ldd	r25, Y+12	; 0x0c
     416:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     41a:	18 16       	cp	r1, r24
     41c:	0c f0       	brlt	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	4f c0       	rjmp	.+158    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	{
		_delay_ms(__us / 1000.0);
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	4a e7       	ldi	r20, 0x7A	; 122
     426:	54 e4       	ldi	r21, 0x44	; 68
     428:	6d 85       	ldd	r22, Y+13	; 0x0d
     42a:	7e 85       	ldd	r23, Y+14	; 0x0e
     42c:	8f 85       	ldd	r24, Y+15	; 0x0f
     42e:	98 89       	ldd	r25, Y+16	; 0x10
     430:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divsf3>
     434:	6d 83       	std	Y+5, r22	; 0x05
     436:	7e 83       	std	Y+6, r23	; 0x06
     438:	8f 83       	std	Y+7, r24	; 0x07
     43a:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	4a ef       	ldi	r20, 0xFA	; 250
     442:	54 e4       	ldi	r21, 0x44	; 68
     444:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     448:	69 83       	std	Y+1, r22	; 0x01
     44a:	7a 83       	std	Y+2, r23	; 0x02
     44c:	8b 83       	std	Y+3, r24	; 0x03
     44e:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5f e3       	ldi	r21, 0x3F	; 63
     458:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     45c:	88 23       	and	r24, r24
     45e:	4c f1       	brlt	.+82     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		__ticks = 1;
	else if (__tmp > 65535)
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	3f ef       	ldi	r19, 0xFF	; 255
     464:	4f e7       	ldi	r20, 0x7F	; 127
     466:	57 e4       	ldi	r21, 0x47	; 71
     468:	69 81       	ldd	r22, Y+1	; 0x01
     46a:	7a 81       	ldd	r23, Y+2	; 0x02
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     474:	18 16       	cp	r1, r24
     476:	b4 f4       	brge	.+44     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	40 e2       	ldi	r20, 0x20	; 32
     47e:	51 e4       	ldi	r21, 0x41	; 65
     480:	6d 81       	ldd	r22, Y+5	; 0x05
     482:	7e 81       	ldd	r23, Y+6	; 0x06
     484:	8f 81       	ldd	r24, Y+7	; 0x07
     486:	98 85       	ldd	r25, Y+8	; 0x08
     488:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     48c:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     490:	61 15       	cp	r22, r1
     492:	71 05       	cpc	r23, r1
     494:	39 f1       	breq	.+78     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     496:	c3 01       	movw	r24, r6
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49c:	61 50       	subi	r22, 0x01	; 1
     49e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a0:	d1 f7       	brne	.-12     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     4a2:	20 c0       	rjmp	.+64     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4a4:	69 81       	ldd	r22, Y+1	; 0x01
     4a6:	7a 81       	ldd	r23, Y+2	; 0x02
     4a8:	8b 81       	ldd	r24, Y+3	; 0x03
     4aa:	9c 81       	ldd	r25, Y+4	; 0x04
     4ac:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	cb 01       	movw	r24, r22
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4f e7       	ldi	r20, 0x7F	; 127
     4c4:	53 e4       	ldi	r21, 0x43	; 67
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	44 f4       	brge	.+16     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4d2:	89 89       	ldd	r24, Y+17	; 0x11
     4d4:	9a 89       	ldd	r25, Y+18	; 0x12
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     4dc:	44 24       	eor	r4, r4
     4de:	43 94       	inc	r4
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4e2:	4b 88       	ldd	r4, Y+19	; 0x13
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     4e4:	84 2d       	mov	r24, r4
     4e6:	8a 95       	dec	r24
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
     4ea:	25 b1       	in	r18, 0x05	; 5
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	f1 01       	movw	r30, r2
     4f2:	00 80       	ld	r0, Z
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	0a 94       	dec	r0
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4fe:	82 2b       	or	r24, r18
     500:	85 b9       	out	0x05, r24	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e8       	ldi	r20, 0x80	; 128
     508:	5f e3       	ldi	r21, 0x3F	; 63
     50a:	c7 01       	movw	r24, r14
     50c:	b6 01       	movw	r22, r12
     50e:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     512:	88 23       	and	r24, r24
     514:	0c f4       	brge	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     516:	6b c0       	rjmp	.+214    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	3f ef       	ldi	r19, 0xFF	; 255
     51c:	4f e7       	ldi	r20, 0x7F	; 127
     51e:	57 e4       	ldi	r21, 0x47	; 71
     520:	69 85       	ldd	r22, Y+9	; 0x09
     522:	7a 85       	ldd	r23, Y+10	; 0x0a
     524:	8b 85       	ldd	r24, Y+11	; 0x0b
     526:	9c 85       	ldd	r25, Y+12	; 0x0c
     528:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     52c:	18 16       	cp	r1, r24
     52e:	0c f0       	brlt	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     530:	4f c0       	rjmp	.+158    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
	{
		_delay_ms(__us / 1000.0);
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	4a e7       	ldi	r20, 0x7A	; 122
     538:	54 e4       	ldi	r21, 0x44	; 68
     53a:	6d 85       	ldd	r22, Y+13	; 0x0d
     53c:	7e 85       	ldd	r23, Y+14	; 0x0e
     53e:	8f 85       	ldd	r24, Y+15	; 0x0f
     540:	98 89       	ldd	r25, Y+16	; 0x10
     542:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divsf3>
     546:	6d 83       	std	Y+5, r22	; 0x05
     548:	7e 83       	std	Y+6, r23	; 0x06
     54a:	8f 83       	std	Y+7, r24	; 0x07
     54c:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	4a ef       	ldi	r20, 0xFA	; 250
     554:	54 e4       	ldi	r21, 0x44	; 68
     556:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     55a:	69 83       	std	Y+1, r22	; 0x01
     55c:	7a 83       	std	Y+2, r23	; 0x02
     55e:	8b 83       	std	Y+3, r24	; 0x03
     560:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 e8       	ldi	r20, 0x80	; 128
     568:	5f e3       	ldi	r21, 0x3F	; 63
     56a:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     56e:	88 23       	and	r24, r24
     570:	4c f1       	brlt	.+82     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
		__ticks = 1;
	else if (__tmp > 65535)
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	69 81       	ldd	r22, Y+1	; 0x01
     57c:	7a 81       	ldd	r23, Y+2	; 0x02
     57e:	8b 81       	ldd	r24, Y+3	; 0x03
     580:	9c 81       	ldd	r25, Y+4	; 0x04
     582:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     586:	18 16       	cp	r1, r24
     588:	b4 f4       	brge	.+44     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e2       	ldi	r20, 0x20	; 32
     590:	51 e4       	ldi	r21, 0x41	; 65
     592:	6d 81       	ldd	r22, Y+5	; 0x05
     594:	7e 81       	ldd	r23, Y+6	; 0x06
     596:	8f 81       	ldd	r24, Y+7	; 0x07
     598:	98 85       	ldd	r25, Y+8	; 0x08
     59a:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     59e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     5a2:	61 15       	cp	r22, r1
     5a4:	71 05       	cpc	r23, r1
     5a6:	39 f1       	breq	.+78     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     5a8:	c3 01       	movw	r24, r6
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ae:	61 50       	subi	r22, 0x01	; 1
     5b0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5b4:	20 c0       	rjmp	.+64     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	cb 01       	movw	r24, r22
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4f e7       	ldi	r20, 0x7F	; 127
     5d6:	53 e4       	ldi	r21, 0x43	; 67
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	44 f4       	brge	.+16     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5e4:	89 89       	ldd	r24, Y+17	; 0x11
     5e6:	9a 89       	ldd	r25, Y+18	; 0x12
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     5ee:	55 24       	eor	r5, r5
     5f0:	53 94       	inc	r5
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5f4:	5b 88       	ldd	r5, Y+19	; 0x13
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     5f6:	85 2d       	mov	r24, r5
     5f8:	8a 95       	dec	r24
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
     5fc:	95 b1       	in	r25, 0x05	; 5
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	f1 01       	movw	r30, r2
     604:	00 80       	ld	r0, Z
     606:	02 c0       	rjmp	.+4      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     608:	22 0f       	add	r18, r18
     60a:	33 1f       	adc	r19, r19
     60c:	0a 94       	dec	r0
     60e:	e2 f7       	brpl	.-8      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     610:	82 2f       	mov	r24, r18
     612:	80 95       	com	r24
     614:	89 23       	and	r24, r25
     616:	85 b9       	out	0x05, r24	; 5
		cycles=2*duration/wavelength;
		half_period = wavelength/2;

		
		
		for (int i=0;i<cycles;i++)
     618:	0f 5f       	subi	r16, 0xFF	; 255
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	c8 01       	movw	r24, r16
     61e:	01 2e       	mov	r0, r17
     620:	00 0c       	add	r0, r0
     622:	aa 0b       	sbc	r26, r26
     624:	bb 0b       	sbc	r27, r27
     626:	88 15       	cp	r24, r8
     628:	99 05       	cpc	r25, r9
     62a:	aa 05       	cpc	r26, r10
     62c:	bb 05       	cpc	r27, r11
     62e:	0c f4       	brge	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     630:	df ce       	rjmp	.-578    	; 0x3f0 <_ZN4Tone8playNoteEff+0x2de>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		}
	}
}
     632:	63 96       	adiw	r28, 0x13	; 19
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	bf 90       	pop	r11
     650:	af 90       	pop	r10
     652:	9f 90       	pop	r9
     654:	8f 90       	pop	r8
     656:	7f 90       	pop	r7
     658:	6f 90       	pop	r6
     65a:	5f 90       	pop	r5
     65c:	4f 90       	pop	r4
     65e:	3f 90       	pop	r3
     660:	2f 90       	pop	r2
     662:	08 95       	ret

00000664 <_ZN4Tone7melody1Ev>:



void Tone::melody1()
{
     664:	2f 92       	push	r2
     666:	3f 92       	push	r3
     668:	4f 92       	push	r4
     66a:	5f 92       	push	r5
     66c:	6f 92       	push	r6
     66e:	7f 92       	push	r7
     670:	8f 92       	push	r8
     672:	9f 92       	push	r9
     674:	af 92       	push	r10
     676:	bf 92       	push	r11
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	6a 97       	sbiw	r28, 0x1a	; 26
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	1c 01       	movw	r2, r24
	int melody[] = {
		NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,0
	};
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	e0 e0       	ldi	r30, 0x00	; 0
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	de 01       	movw	r26, r28
     6a2:	11 96       	adiw	r26, 0x01	; 1
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	8a 95       	dec	r24
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <_ZN4Tone7melody1Ev+0x40>

	int noteDurations[] = {
		4,4,4,4,1
	};
     6ac:	8a e0       	ldi	r24, 0x0A	; 10
     6ae:	ea e0       	ldi	r30, 0x0A	; 10
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	de 01       	movw	r26, r28
     6b4:	1b 96       	adiw	r26, 0x0b	; 11
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <_ZN4Tone7melody1Ev+0x52>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
     6be:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     6c2:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <changing>
     6c6:	4e 01       	movw	r8, r28
     6c8:	85 e1       	ldi	r24, 0x15	; 21
     6ca:	88 0e       	add	r8, r24
     6cc:	91 1c       	adc	r9, r1
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}

			float noteDuration = 200 / noteDurations[currentNote];
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f8 ec       	ldi	r31, 0xC8	; 200
     6d2:	ef 2e       	mov	r14, r31
     6d4:	f1 2c       	mov	r15, r1
     6d6:	f0 2d       	mov	r31, r0

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	99 8f       	std	Y+25, r25	; 0x19
     6dc:	1a 8e       	std	Y+26, r1	; 0x1a
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
     6de:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <changing>
     6e2:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <changing+0x1>
     6e6:	89 2b       	or	r24, r25
     6e8:	09 f0       	breq	.+2      	; 0x6ec <_ZN4Tone7melody1Ev+0x88>
     6ea:	7c c0       	rjmp	.+248    	; 0x7e4 <_ZN4Tone7melody1Ev+0x180>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;break;}
     6ec:	19 9b       	sbis	0x03, 1	; 3
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <_ZN4Tone7melody1Ev+0x9e>
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <_ZN4Tone7melody1Ev+0x92>
     6f2:	19 9b       	sbis	0x03, 1	; 3
     6f4:	0d c0       	rjmp	.+26     	; 0x710 <_ZN4Tone7melody1Ev+0xac>
     6f6:	e1 e0       	ldi	r30, 0x01	; 1
     6f8:	e0 93 70 06 	sts	0x0670, r30	; 0x800670 <changing>
     6fc:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     700:	ee cf       	rjmp	.-36     	; 0x6de <_ZN4Tone7melody1Ev+0x7a>
     702:	6e 01       	movw	r12, r28
     704:	fb e0       	ldi	r31, 0x0B	; 11
     706:	cf 0e       	add	r12, r31
     708:	d1 1c       	adc	r13, r1
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	5c 01       	movw	r10, r24

			float noteDuration = 200 / noteDurations[currentNote];
     710:	f6 01       	movw	r30, r12
     712:	61 91       	ld	r22, Z+
     714:	71 91       	ld	r23, Z+
     716:	6f 01       	movw	r12, r30
     718:	c7 01       	movw	r24, r14
     71a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__divmodhi4>
     71e:	07 2e       	mov	r0, r23
     720:	00 0c       	add	r0, r0
     722:	88 0b       	sbc	r24, r24
     724:	99 0b       	sbc	r25, r25
     726:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     72a:	2b 01       	movw	r4, r22
     72c:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     72e:	f5 01       	movw	r30, r10
     730:	61 91       	ld	r22, Z+
     732:	71 91       	ld	r23, Z+
     734:	5f 01       	movw	r10, r30
     736:	07 2e       	mov	r0, r23
     738:	00 0c       	add	r0, r0
     73a:	88 0b       	sbc	r24, r24
     73c:	99 0b       	sbc	r25, r25
     73e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     742:	ab 01       	movw	r20, r22
     744:	bc 01       	movw	r22, r24
     746:	93 01       	movw	r18, r6
     748:	82 01       	movw	r16, r4
     74a:	c1 01       	movw	r24, r2
     74c:	0e 94 89 00 	call	0x112	; 0x112 <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*2;
     750:	a3 01       	movw	r20, r6
     752:	92 01       	movw	r18, r4
     754:	c3 01       	movw	r24, r6
     756:	b2 01       	movw	r22, r4
     758:	0e 94 42 08 	call	0x1084	; 0x1084 <__addsf3>
     75c:	6d 8b       	std	Y+21, r22	; 0x15
     75e:	7e 8b       	std	Y+22, r23	; 0x16
     760:	8f 8b       	std	Y+23, r24	; 0x17
     762:	98 8f       	std	Y+24, r25	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	4a ef       	ldi	r20, 0xFA	; 250
     76a:	54 e4       	ldi	r21, 0x44	; 68
     76c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     770:	2b 01       	movw	r4, r22
     772:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	5f e3       	ldi	r21, 0x3F	; 63
     77c:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     780:	88 23       	and	r24, r24
     782:	2c f1       	brlt	.+74     	; 0x7ce <_ZN4Tone7melody1Ev+0x16a>
		__ticks = 1;
	else if (__tmp > 65535)
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	3f ef       	ldi	r19, 0xFF	; 255
     788:	4f e7       	ldi	r20, 0x7F	; 127
     78a:	57 e4       	ldi	r21, 0x47	; 71
     78c:	c3 01       	movw	r24, r6
     78e:	b2 01       	movw	r22, r4
     790:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     794:	18 16       	cp	r1, r24
     796:	b4 f4       	brge	.+44     	; 0x7c4 <_ZN4Tone7melody1Ev+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	40 e2       	ldi	r20, 0x20	; 32
     79e:	51 e4       	ldi	r21, 0x41	; 65
     7a0:	6d 89       	ldd	r22, Y+21	; 0x15
     7a2:	7e 89       	ldd	r23, Y+22	; 0x16
     7a4:	8f 89       	ldd	r24, Y+23	; 0x17
     7a6:	98 8d       	ldd	r25, Y+24	; 0x18
     7a8:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     7ac:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     7b0:	61 15       	cp	r22, r1
     7b2:	71 05       	cpc	r23, r1
     7b4:	89 f0       	breq	.+34     	; 0x7d8 <_ZN4Tone7melody1Ev+0x174>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     7b6:	c7 01       	movw	r24, r14
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <_ZN4Tone7melody1Ev+0x154>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7bc:	61 50       	subi	r22, 0x01	; 1
     7be:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c0:	d1 f7       	brne	.-12     	; 0x7b6 <_ZN4Tone7melody1Ev+0x152>
     7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <_ZN4Tone7melody1Ev+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c4:	c3 01       	movw	r24, r6
     7c6:	b2 01       	movw	r22, r4
     7c8:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <_ZN4Tone7melody1Ev+0x16e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7ce:	69 8d       	ldd	r22, Y+25	; 0x19
     7d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7d2:	cb 01       	movw	r24, r22
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <_ZN4Tone7melody1Ev+0x170>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     7d8:	15 b8       	out	0x05, r1	; 5

	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     7da:	c8 14       	cp	r12, r8
     7dc:	d9 04       	cpc	r13, r9
     7de:	09 f0       	breq	.+2      	; 0x7e2 <_ZN4Tone7melody1Ev+0x17e>
     7e0:	88 cf       	rjmp	.-240    	; 0x6f2 <_ZN4Tone7melody1Ev+0x8e>
     7e2:	7d cf       	rjmp	.-262    	; 0x6de <_ZN4Tone7melody1Ev+0x7a>
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	9f e0       	ldi	r25, 0x0F	; 15
     7e8:	28 ec       	ldi	r18, 0xC8	; 200
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	f9 01       	movw	r30, r18
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <_ZN4Tone7melody1Ev+0x18a>
     7f2:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f4:	d9 f7       	brne	.-10     	; 0x7ec <_ZN4Tone7melody1Ev+0x188>
		}

	}

	_delay_ms(400);
}
     7f6:	6a 96       	adiw	r28, 0x1a	; 26
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	7f 90       	pop	r7
     81c:	6f 90       	pop	r6
     81e:	5f 90       	pop	r5
     820:	4f 90       	pop	r4
     822:	3f 90       	pop	r3
     824:	2f 90       	pop	r2
     826:	08 95       	ret

00000828 <_ZN4Tone7melody2Ev>:


void Tone:: melody2()
{
     828:	2f 92       	push	r2
     82a:	3f 92       	push	r3
     82c:	4f 92       	push	r4
     82e:	5f 92       	push	r5
     830:	6f 92       	push	r6
     832:	7f 92       	push	r7
     834:	8f 92       	push	r8
     836:	9f 92       	push	r9
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	c6 58       	subi	r28, 0x86	; 134
     852:	d1 40       	sbci	r29, 0x01	; 1
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	cb 57       	subi	r28, 0x7B	; 123
     860:	de 4f       	sbci	r29, 0xFE	; 254
     862:	99 83       	std	Y+1, r25	; 0x01
     864:	88 83       	st	Y, r24
     866:	c5 58       	subi	r28, 0x85	; 133
     868:	d1 40       	sbci	r29, 0x01	; 1
		NOTE_C5, 0, NOTE_AS4, NOTE_A4,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5
	};
     86a:	80 ec       	ldi	r24, 0xC0	; 192
     86c:	e4 e1       	ldi	r30, 0x14	; 20
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	de 01       	movw	r26, r28
     872:	11 96       	adiw	r26, 0x01	; 1
     874:	01 90       	ld	r0, Z+
     876:	0d 92       	st	X+, r0
     878:	8a 95       	dec	r24
     87a:	e1 f7       	brne	.-8      	; 0x874 <_ZN4Tone7melody2Ev+0x4c>
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4,
	};
     87c:	80 ec       	ldi	r24, 0xC0	; 192
     87e:	e4 ed       	ldi	r30, 0xD4	; 212
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	de 01       	movw	r26, r28
     884:	af 53       	subi	r26, 0x3F	; 63
     886:	bf 4f       	sbci	r27, 0xFF	; 255
     888:	01 90       	ld	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	8a 95       	dec	r24
     88e:	e1 f7       	brne	.-8      	; 0x888 <_ZN4Tone7melody2Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
     890:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     894:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <changing>
     898:	4e 01       	movw	r8, r28
     89a:	8f e7       	ldi	r24, 0x7F	; 127
     89c:	88 1a       	sub	r8, r24
     89e:	8e ef       	ldi	r24, 0xFE	; 254
     8a0:	98 0a       	sbc	r9, r24
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}

			float noteDuration = 375 / noteDurations[currentNote];
     8a2:	0f 2e       	mov	r0, r31
     8a4:	f7 e7       	ldi	r31, 0x77	; 119
     8a6:	2f 2e       	mov	r2, r31
     8a8:	33 24       	eor	r3, r3
     8aa:	33 94       	inc	r3
     8ac:	f0 2d       	mov	r31, r0
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f8 ec       	ldi	r31, 0xC8	; 200
     8b2:	ef 2e       	mov	r14, r31
     8b4:	f1 2c       	mov	r15, r1
     8b6:	f0 2d       	mov	r31, r0
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <_ZN4Tone7melody2Ev+0xa0>
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
	while (changing==0)
     8ba:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <changing>
     8be:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <changing+0x1>
     8c2:	89 2b       	or	r24, r25
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <_ZN4Tone7melody2Ev+0xa0>
     8c6:	99 c0       	rjmp	.+306    	; 0x9fa <__stack+0xfb>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}
     8c8:	19 9b       	sbis	0x03, 1	; 3
     8ca:	10 c0       	rjmp	.+32     	; 0x8ec <_ZN4Tone7melody2Ev+0xc4>
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <_ZN4Tone7melody2Ev+0xaa>
     8ce:	19 9b       	sbis	0x03, 1	; 3
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <_ZN4Tone7melody2Ev+0xd2>
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <changing>
     8d8:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     8dc:	88 ee       	ldi	r24, 0xE8	; 232
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	f7 01       	movw	r30, r14
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <_ZN4Tone7melody2Ev+0xba>
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	d9 f7       	brne	.-10     	; 0x8e0 <_ZN4Tone7melody2Ev+0xb8>
     8ea:	7f c0       	rjmp	.+254    	; 0x9ea <__stack+0xeb>
     8ec:	6e 01       	movw	r12, r28
     8ee:	e1 ec       	ldi	r30, 0xC1	; 193
     8f0:	ce 0e       	add	r12, r30
     8f2:	d1 1c       	adc	r13, r1
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	5c 01       	movw	r10, r24

			float noteDuration = 375 / noteDurations[currentNote];
     8fa:	f6 01       	movw	r30, r12
     8fc:	61 91       	ld	r22, Z+
     8fe:	71 91       	ld	r23, Z+
     900:	6f 01       	movw	r12, r30
     902:	c1 01       	movw	r24, r2
     904:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__divmodhi4>
     908:	07 2e       	mov	r0, r23
     90a:	00 0c       	add	r0, r0
     90c:	88 0b       	sbc	r24, r24
     90e:	99 0b       	sbc	r25, r25
     910:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     914:	2b 01       	movw	r4, r22
     916:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     918:	f5 01       	movw	r30, r10
     91a:	61 91       	ld	r22, Z+
     91c:	71 91       	ld	r23, Z+
     91e:	5f 01       	movw	r10, r30
     920:	07 2e       	mov	r0, r23
     922:	00 0c       	add	r0, r0
     924:	88 0b       	sbc	r24, r24
     926:	99 0b       	sbc	r25, r25
     928:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     92c:	ab 01       	movw	r20, r22
     92e:	bc 01       	movw	r22, r24
     930:	93 01       	movw	r18, r6
     932:	82 01       	movw	r16, r4
     934:	cb 57       	subi	r28, 0x7B	; 123
     936:	de 4f       	sbci	r29, 0xFE	; 254
     938:	88 81       	ld	r24, Y
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	c5 58       	subi	r28, 0x85	; 133
     93e:	d1 40       	sbci	r29, 0x01	; 1
     940:	0e 94 89 00 	call	0x112	; 0x112 <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
     944:	26 e6       	ldi	r18, 0x66	; 102
     946:	36 e6       	ldi	r19, 0x66	; 102
     948:	46 ea       	ldi	r20, 0xA6	; 166
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	c3 01       	movw	r24, r6
     94e:	b2 01       	movw	r22, r4
     950:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     954:	cf 57       	subi	r28, 0x7F	; 127
     956:	de 4f       	sbci	r29, 0xFE	; 254
     958:	68 83       	st	Y, r22
     95a:	79 83       	std	Y+1, r23	; 0x01
     95c:	8a 83       	std	Y+2, r24	; 0x02
     95e:	9b 83       	std	Y+3, r25	; 0x03
     960:	c1 58       	subi	r28, 0x81	; 129
     962:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	4a ef       	ldi	r20, 0xFA	; 250
     96a:	54 e4       	ldi	r21, 0x44	; 68
     96c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     970:	2b 01       	movw	r4, r22
     972:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e8       	ldi	r20, 0x80	; 128
     97a:	5f e3       	ldi	r21, 0x3F	; 63
     97c:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     980:	88 23       	and	r24, r24
     982:	4c f1       	brlt	.+82     	; 0x9d6 <__stack+0xd7>
		__ticks = 1;
	else if (__tmp > 65535)
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f e7       	ldi	r20, 0x7F	; 127
     98a:	57 e4       	ldi	r21, 0x47	; 71
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     994:	18 16       	cp	r1, r24
     996:	d4 f4       	brge	.+52     	; 0x9cc <__stack+0xcd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e2       	ldi	r20, 0x20	; 32
     99e:	51 e4       	ldi	r21, 0x41	; 65
     9a0:	cf 57       	subi	r28, 0x7F	; 127
     9a2:	de 4f       	sbci	r29, 0xFE	; 254
     9a4:	68 81       	ld	r22, Y
     9a6:	79 81       	ldd	r23, Y+1	; 0x01
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	9b 81       	ldd	r25, Y+3	; 0x03
     9ac:	c1 58       	subi	r28, 0x81	; 129
     9ae:	d1 40       	sbci	r29, 0x01	; 1
     9b0:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     9b4:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     9b8:	61 15       	cp	r22, r1
     9ba:	71 05       	cpc	r23, r1
     9bc:	89 f0       	breq	.+34     	; 0x9e0 <__stack+0xe1>
     9be:	c7 01       	movw	r24, r14
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <__stack+0xc1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c4:	61 50       	subi	r22, 0x01	; 1
     9c6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c8:	d1 f7       	brne	.-12     	; 0x9be <__stack+0xbf>
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <__stack+0xe1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9cc:	c3 01       	movw	r24, r6
     9ce:	b2 01       	movw	r22, r4
     9d0:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0xdb>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	cb 01       	movw	r24, r22
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <__stack+0xdd>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     9e0:	15 b8       	out	0x05, r1	; 5
	
	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     9e2:	c8 14       	cp	r12, r8
     9e4:	d9 04       	cpc	r13, r9
     9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	72 cf       	rjmp	.-284    	; 0x8ce <_ZN4Tone7melody2Ev+0xa6>
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	9f e0       	ldi	r25, 0x0F	; 15
     9ee:	f7 01       	movw	r30, r14
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <__stack+0xf1>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f6:	d9 f7       	brne	.-10     	; 0x9ee <__stack+0xef>
     9f8:	60 cf       	rjmp	.-320    	; 0x8ba <_ZN4Tone7melody2Ev+0x92>
		}
		_delay_ms(400);
		
	}

}
     9fa:	ca 57       	subi	r28, 0x7A	; 122
     9fc:	de 4f       	sbci	r29, 0xFE	; 254
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	bf 90       	pop	r11
     a1a:	af 90       	pop	r10
     a1c:	9f 90       	pop	r9
     a1e:	8f 90       	pop	r8
     a20:	7f 90       	pop	r7
     a22:	6f 90       	pop	r6
     a24:	5f 90       	pop	r5
     a26:	4f 90       	pop	r4
     a28:	3f 90       	pop	r3
     a2a:	2f 90       	pop	r2
     a2c:	08 95       	ret

00000a2e <_ZN4Tone7melody3Ev>:

void Tone:: melody3()
{
     a2e:	2f 92       	push	r2
     a30:	3f 92       	push	r3
     a32:	4f 92       	push	r4
     a34:	5f 92       	push	r5
     a36:	6f 92       	push	r6
     a38:	7f 92       	push	r7
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	ca 52       	subi	r28, 0x2A	; 42
     a58:	d1 40       	sbci	r29, 0x01	; 1
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	c7 5d       	subi	r28, 0xD7	; 215
     a66:	de 4f       	sbci	r29, 0xFE	; 254
     a68:	99 83       	std	Y+1, r25	; 0x01
     a6a:	88 83       	st	Y, r24
     a6c:	c9 52       	subi	r28, 0x29	; 41
     a6e:	d1 40       	sbci	r29, 0x01	; 1
		NOTE_E5, NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_B4, NOTE_C5, NOTE_C5, 0,
		NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_C5, NOTE_B4, NOTE_B4, 0,
		NOTE_C5, NOTE_A4, NOTE_B4,
	};
     a70:	82 e9       	ldi	r24, 0x92	; 146
     a72:	e4 e9       	ldi	r30, 0x94	; 148
     a74:	f2 e0       	ldi	r31, 0x02	; 2
     a76:	de 01       	movw	r26, r28
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	01 90       	ld	r0, Z+
     a7c:	0d 92       	st	X+, r0
     a7e:	8a 95       	dec	r24
     a80:	e1 f7       	brne	.-8      	; 0xa7a <_ZN4Tone7melody3Ev+0x4c>
		8, 8, 8, 4, 8,
		8, 8, 4, 8, 8,
		4, 8, 4, 8,
		8, 8, 4, 8, 8,
		8, 8, 2
	};
     a82:	82 e9       	ldi	r24, 0x92	; 146
     a84:	e6 e2       	ldi	r30, 0x26	; 38
     a86:	f3 e0       	ldi	r31, 0x03	; 3
     a88:	de 01       	movw	r26, r28
     a8a:	ad 56       	subi	r26, 0x6D	; 109
     a8c:	bf 4f       	sbci	r27, 0xFF	; 255
     a8e:	01 90       	ld	r0, Z+
     a90:	0d 92       	st	X+, r0
     a92:	8a 95       	dec	r24
     a94:	e1 f7       	brne	.-8      	; 0xa8e <_ZN4Tone7melody3Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	changing=0;
     a96:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     a9a:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <changing>
     a9e:	4e 01       	movw	r8, r28
     aa0:	8b ed       	ldi	r24, 0xDB	; 219
     aa2:	88 1a       	sub	r8, r24
     aa4:	8e ef       	ldi	r24, 0xFE	; 254
     aa6:	98 0a       	sbc	r9, r24
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}

			float noteDuration = 375 / noteDurations[currentNote];
     aa8:	0f 2e       	mov	r0, r31
     aaa:	f7 e7       	ldi	r31, 0x77	; 119
     aac:	2f 2e       	mov	r2, r31
     aae:	33 24       	eor	r3, r3
     ab0:	33 94       	inc	r3
     ab2:	f0 2d       	mov	r31, r0
     ab4:	0f 2e       	mov	r0, r31
     ab6:	f8 ec       	ldi	r31, 0xC8	; 200
     ab8:	ef 2e       	mov	r14, r31
     aba:	f1 2c       	mov	r15, r1
     abc:	f0 2d       	mov	r31, r0
     abe:	07 c0       	rjmp	.+14     	; 0xace <_ZN4Tone7melody3Ev+0xa0>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	changing=0;
	while (changing==0)
     ac0:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <changing>
     ac4:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <changing+0x1>
     ac8:	89 2b       	or	r24, r25
     aca:	09 f0       	breq	.+2      	; 0xace <_ZN4Tone7melody3Ev+0xa0>
     acc:	99 c0       	rjmp	.+306    	; 0xc00 <_ZN4Tone7melody3Ev+0x1d2>
	{
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}
     ace:	19 9b       	sbis	0x03, 1	; 3
     ad0:	10 c0       	rjmp	.+32     	; 0xaf2 <_ZN4Tone7melody3Ev+0xc4>
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <_ZN4Tone7melody3Ev+0xaa>
     ad4:	19 9b       	sbis	0x03, 1	; 3
     ad6:	14 c0       	rjmp	.+40     	; 0xb00 <_ZN4Tone7melody3Ev+0xd2>
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <changing>
     ade:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     ae2:	88 ee       	ldi	r24, 0xE8	; 232
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	f7 01       	movw	r30, r14
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <_ZN4Tone7melody3Ev+0xba>
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	d9 f7       	brne	.-10     	; 0xae6 <_ZN4Tone7melody3Ev+0xb8>
     af0:	7f c0       	rjmp	.+254    	; 0xbf0 <_ZN4Tone7melody3Ev+0x1c2>
     af2:	6e 01       	movw	r12, r28
     af4:	e3 e9       	ldi	r30, 0x93	; 147
     af6:	ce 0e       	add	r12, r30
     af8:	d1 1c       	adc	r13, r1
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	5c 01       	movw	r10, r24

			float noteDuration = 375 / noteDurations[currentNote];
     b00:	f6 01       	movw	r30, r12
     b02:	61 91       	ld	r22, Z+
     b04:	71 91       	ld	r23, Z+
     b06:	6f 01       	movw	r12, r30
     b08:	c1 01       	movw	r24, r2
     b0a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__divmodhi4>
     b0e:	07 2e       	mov	r0, r23
     b10:	00 0c       	add	r0, r0
     b12:	88 0b       	sbc	r24, r24
     b14:	99 0b       	sbc	r25, r25
     b16:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     b1a:	2b 01       	movw	r4, r22
     b1c:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     b1e:	f5 01       	movw	r30, r10
     b20:	61 91       	ld	r22, Z+
     b22:	71 91       	ld	r23, Z+
     b24:	5f 01       	movw	r10, r30
     b26:	07 2e       	mov	r0, r23
     b28:	00 0c       	add	r0, r0
     b2a:	88 0b       	sbc	r24, r24
     b2c:	99 0b       	sbc	r25, r25
     b2e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     b32:	ab 01       	movw	r20, r22
     b34:	bc 01       	movw	r22, r24
     b36:	93 01       	movw	r18, r6
     b38:	82 01       	movw	r16, r4
     b3a:	c7 5d       	subi	r28, 0xD7	; 215
     b3c:	de 4f       	sbci	r29, 0xFE	; 254
     b3e:	88 81       	ld	r24, Y
     b40:	99 81       	ldd	r25, Y+1	; 0x01
     b42:	c9 52       	subi	r28, 0x29	; 41
     b44:	d1 40       	sbci	r29, 0x01	; 1
     b46:	0e 94 89 00 	call	0x112	; 0x112 <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
     b4a:	26 e6       	ldi	r18, 0x66	; 102
     b4c:	36 e6       	ldi	r19, 0x66	; 102
     b4e:	46 ea       	ldi	r20, 0xA6	; 166
     b50:	5f e3       	ldi	r21, 0x3F	; 63
     b52:	c3 01       	movw	r24, r6
     b54:	b2 01       	movw	r22, r4
     b56:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     b5a:	cb 5d       	subi	r28, 0xDB	; 219
     b5c:	de 4f       	sbci	r29, 0xFE	; 254
     b5e:	68 83       	st	Y, r22
     b60:	79 83       	std	Y+1, r23	; 0x01
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	9b 83       	std	Y+3, r25	; 0x03
     b66:	c5 52       	subi	r28, 0x25	; 37
     b68:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	4a ef       	ldi	r20, 0xFA	; 250
     b70:	54 e4       	ldi	r21, 0x44	; 68
     b72:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     b76:	2b 01       	movw	r4, r22
     b78:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e8       	ldi	r20, 0x80	; 128
     b80:	5f e3       	ldi	r21, 0x3F	; 63
     b82:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     b86:	88 23       	and	r24, r24
     b88:	4c f1       	brlt	.+82     	; 0xbdc <_ZN4Tone7melody3Ev+0x1ae>
		__ticks = 1;
	else if (__tmp > 65535)
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	3f ef       	ldi	r19, 0xFF	; 255
     b8e:	4f e7       	ldi	r20, 0x7F	; 127
     b90:	57 e4       	ldi	r21, 0x47	; 71
     b92:	c3 01       	movw	r24, r6
     b94:	b2 01       	movw	r22, r4
     b96:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     b9a:	18 16       	cp	r1, r24
     b9c:	d4 f4       	brge	.+52     	; 0xbd2 <_ZN4Tone7melody3Ev+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e2       	ldi	r20, 0x20	; 32
     ba4:	51 e4       	ldi	r21, 0x41	; 65
     ba6:	cb 5d       	subi	r28, 0xDB	; 219
     ba8:	de 4f       	sbci	r29, 0xFE	; 254
     baa:	68 81       	ld	r22, Y
     bac:	79 81       	ldd	r23, Y+1	; 0x01
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	c5 52       	subi	r28, 0x25	; 37
     bb4:	d1 40       	sbci	r29, 0x01	; 1
     bb6:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     bba:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     bbe:	61 15       	cp	r22, r1
     bc0:	71 05       	cpc	r23, r1
     bc2:	89 f0       	breq	.+34     	; 0xbe6 <_ZN4Tone7melody3Ev+0x1b8>
     bc4:	c7 01       	movw	r24, r14
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <_ZN4Tone7melody3Ev+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bca:	61 50       	subi	r22, 0x01	; 1
     bcc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <_ZN4Tone7melody3Ev+0x196>
     bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <_ZN4Tone7melody3Ev+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bd2:	c3 01       	movw	r24, r6
     bd4:	b2 01       	movw	r22, r4
     bd6:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <_ZN4Tone7melody3Ev+0x1b2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	cb 01       	movw	r24, r22
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <_ZN4Tone7melody3Ev+0x1b4>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     be6:	15 b8       	out	0x05, r1	; 5
	

	changing=0;
	while (changing==0)
	{
		for (int currentNote=0; currentNote<length;currentNote++)
     be8:	c8 14       	cp	r12, r8
     bea:	d9 04       	cpc	r13, r9
     bec:	09 f0       	breq	.+2      	; 0xbf0 <_ZN4Tone7melody3Ev+0x1c2>
     bee:	72 cf       	rjmp	.-284    	; 0xad4 <_ZN4Tone7melody3Ev+0xa6>
     bf0:	80 ea       	ldi	r24, 0xA0	; 160
     bf2:	9f e0       	ldi	r25, 0x0F	; 15
     bf4:	f7 01       	movw	r30, r14
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <_ZN4Tone7melody3Ev+0x1c8>
     bfa:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfc:	d9 f7       	brne	.-10     	; 0xbf4 <_ZN4Tone7melody3Ev+0x1c6>
     bfe:	60 cf       	rjmp	.-320    	; 0xac0 <_ZN4Tone7melody3Ev+0x92>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
		}
		_delay_ms(400);
	}
}
     c00:	c6 5d       	subi	r28, 0xD6	; 214
     c02:	de 4f       	sbci	r29, 0xFE	; 254
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	bf 90       	pop	r11
     c20:	af 90       	pop	r10
     c22:	9f 90       	pop	r9
     c24:	8f 90       	pop	r8
     c26:	7f 90       	pop	r7
     c28:	6f 90       	pop	r6
     c2a:	5f 90       	pop	r5
     c2c:	4f 90       	pop	r4
     c2e:	3f 90       	pop	r3
     c30:	2f 90       	pop	r2
     c32:	08 95       	ret

00000c34 <_ZN4Tone7melody4Ev>:

void Tone:: melody4()
{
     c34:	2f 92       	push	r2
     c36:	3f 92       	push	r3
     c38:	4f 92       	push	r4
     c3a:	5f 92       	push	r5
     c3c:	6f 92       	push	r6
     c3e:	7f 92       	push	r7
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	c4 59       	subi	r28, 0x94	; 148
     c5e:	d1 40       	sbci	r29, 0x01	; 1
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	cd 56       	subi	r28, 0x6D	; 109
     c6c:	de 4f       	sbci	r29, 0xFE	; 254
     c6e:	99 83       	std	Y+1, r25	; 0x01
     c70:	88 83       	st	Y, r24
     c72:	c3 59       	subi	r28, 0x93	; 147
     c74:	d1 40       	sbci	r29, 0x01	; 1
		NOTE_F4,NOTE_AS3,NOTE_DS4,NOTE_D4,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3
	};
     c76:	84 ef       	ldi	r24, 0xF4	; 244
     c78:	e8 eb       	ldi	r30, 0xB8	; 184
     c7a:	f3 e0       	ldi	r31, 0x03	; 3
     c7c:	de 01       	movw	r26, r28
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	01 90       	ld	r0, Z+
     c82:	0d 92       	st	X+, r0
     c84:	8a 95       	dec	r24
     c86:	e1 f7       	brne	.-8      	; 0xc80 <_ZN4Tone7melody4Ev+0x4c>
		6,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12
	};
     c88:	8a e9       	ldi	r24, 0x9A	; 154
     c8a:	ec ea       	ldi	r30, 0xAC	; 172
     c8c:	f4 e0       	ldi	r31, 0x04	; 4
     c8e:	de 01       	movw	r26, r28
     c90:	ab 50       	subi	r26, 0x0B	; 11
     c92:	bf 4f       	sbci	r27, 0xFF	; 255
     c94:	01 90       	ld	r0, Z+
     c96:	0d 92       	st	X+, r0
     c98:	8a 95       	dec	r24
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <_ZN4Tone7melody4Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
     c9c:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     ca0:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <changing>
     ca4:	4e 01       	movw	r8, r28
     ca6:	81 e7       	ldi	r24, 0x71	; 113
     ca8:	88 1a       	sub	r8, r24
     caa:	8e ef       	ldi	r24, 0xFE	; 254
     cac:	98 0a       	sbc	r9, r24
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}


			float noteDuration = 1375 / noteDurations[currentNote];
     cae:	0f 2e       	mov	r0, r31
     cb0:	ff e5       	ldi	r31, 0x5F	; 95
     cb2:	2f 2e       	mov	r2, r31
     cb4:	f5 e0       	ldi	r31, 0x05	; 5
     cb6:	3f 2e       	mov	r3, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	0f 2e       	mov	r0, r31
     cbc:	f8 ec       	ldi	r31, 0xC8	; 200
     cbe:	ef 2e       	mov	r14, r31
     cc0:	f1 2c       	mov	r15, r1
     cc2:	f0 2d       	mov	r31, r0
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <_ZN4Tone7melody4Ev+0xa0>
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	changing=0;
	while (changing==0)
     cc6:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <changing>
     cca:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <changing+0x1>
     cce:	89 2b       	or	r24, r25
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <_ZN4Tone7melody4Ev+0xa0>
     cd2:	99 c0       	rjmp	.+306    	; 0xe06 <_ZN4Tone7melody4Ev+0x1d2>
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			int wantChange  = PINB & (1<<BUTTON_PIN);
			if( wantChange) {changing=1;_delay_ms(100);break;}
     cd4:	19 9b       	sbis	0x03, 1	; 3
     cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <_ZN4Tone7melody4Ev+0xc4>
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_ZN4Tone7melody4Ev+0xaa>
     cda:	19 9b       	sbis	0x03, 1	; 3
     cdc:	14 c0       	rjmp	.+40     	; 0xd06 <_ZN4Tone7melody4Ev+0xd2>
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <changing>
     ce4:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     ce8:	88 ee       	ldi	r24, 0xE8	; 232
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	f7 01       	movw	r30, r14
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <_ZN4Tone7melody4Ev+0xba>
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	d9 f7       	brne	.-10     	; 0xcec <_ZN4Tone7melody4Ev+0xb8>
     cf6:	7f c0       	rjmp	.+254    	; 0xdf6 <_ZN4Tone7melody4Ev+0x1c2>
     cf8:	6e 01       	movw	r12, r28
     cfa:	e5 ef       	ldi	r30, 0xF5	; 245
     cfc:	ce 0e       	add	r12, r30
     cfe:	d1 1c       	adc	r13, r1
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	5c 01       	movw	r10, r24


			float noteDuration = 1375 / noteDurations[currentNote];
     d06:	f6 01       	movw	r30, r12
     d08:	61 91       	ld	r22, Z+
     d0a:	71 91       	ld	r23, Z+
     d0c:	6f 01       	movw	r12, r30
     d0e:	c1 01       	movw	r24, r2
     d10:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__divmodhi4>
     d14:	07 2e       	mov	r0, r23
     d16:	00 0c       	add	r0, r0
     d18:	88 0b       	sbc	r24, r24
     d1a:	99 0b       	sbc	r25, r25
     d1c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     d20:	2b 01       	movw	r4, r22
     d22:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
     d24:	f5 01       	movw	r30, r10
     d26:	61 91       	ld	r22, Z+
     d28:	71 91       	ld	r23, Z+
     d2a:	5f 01       	movw	r10, r30
     d2c:	07 2e       	mov	r0, r23
     d2e:	00 0c       	add	r0, r0
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     d38:	ab 01       	movw	r20, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	93 01       	movw	r18, r6
     d3e:	82 01       	movw	r16, r4
     d40:	cd 56       	subi	r28, 0x6D	; 109
     d42:	de 4f       	sbci	r29, 0xFE	; 254
     d44:	88 81       	ld	r24, Y
     d46:	99 81       	ldd	r25, Y+1	; 0x01
     d48:	c3 59       	subi	r28, 0x93	; 147
     d4a:	d1 40       	sbci	r29, 0x01	; 1
     d4c:	0e 94 89 00 	call	0x112	; 0x112 <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
     d50:	26 e6       	ldi	r18, 0x66	; 102
     d52:	36 e6       	ldi	r19, 0x66	; 102
     d54:	46 ea       	ldi	r20, 0xA6	; 166
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	c3 01       	movw	r24, r6
     d5a:	b2 01       	movw	r22, r4
     d5c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     d60:	c1 57       	subi	r28, 0x71	; 113
     d62:	de 4f       	sbci	r29, 0xFE	; 254
     d64:	68 83       	st	Y, r22
     d66:	79 83       	std	Y+1, r23	; 0x01
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	9b 83       	std	Y+3, r25	; 0x03
     d6c:	cf 58       	subi	r28, 0x8F	; 143
     d6e:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     d7c:	2b 01       	movw	r4, r22
     d7e:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	4c f1       	brlt	.+82     	; 0xde2 <_ZN4Tone7melody4Ev+0x1ae>
		__ticks = 1;
	else if (__tmp > 65535)
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	3f ef       	ldi	r19, 0xFF	; 255
     d94:	4f e7       	ldi	r20, 0x7F	; 127
     d96:	57 e4       	ldi	r21, 0x47	; 71
     d98:	c3 01       	movw	r24, r6
     d9a:	b2 01       	movw	r22, r4
     d9c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     da0:	18 16       	cp	r1, r24
     da2:	d4 f4       	brge	.+52     	; 0xdd8 <_ZN4Tone7melody4Ev+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e2       	ldi	r20, 0x20	; 32
     daa:	51 e4       	ldi	r21, 0x41	; 65
     dac:	c1 57       	subi	r28, 0x71	; 113
     dae:	de 4f       	sbci	r29, 0xFE	; 254
     db0:	68 81       	ld	r22, Y
     db2:	79 81       	ldd	r23, Y+1	; 0x01
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	cf 58       	subi	r28, 0x8F	; 143
     dba:	d1 40       	sbci	r29, 0x01	; 1
     dbc:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     dc0:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     dc4:	61 15       	cp	r22, r1
     dc6:	71 05       	cpc	r23, r1
     dc8:	89 f0       	breq	.+34     	; 0xdec <_ZN4Tone7melody4Ev+0x1b8>
     dca:	c7 01       	movw	r24, r14
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <_ZN4Tone7melody4Ev+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	61 50       	subi	r22, 0x01	; 1
     dd2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd4:	d1 f7       	brne	.-12     	; 0xdca <_ZN4Tone7melody4Ev+0x196>
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <_ZN4Tone7melody4Ev+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd8:	c3 01       	movw	r24, r6
     dda:	b2 01       	movw	r22, r4
     ddc:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <_ZN4Tone7melody4Ev+0x1b2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	cb 01       	movw	r24, r22
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <_ZN4Tone7melody4Ev+0x1b4>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
     dec:	15 b8       	out	0x05, r1	; 5
	
	changing=0;
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
     dee:	c8 14       	cp	r12, r8
     df0:	d9 04       	cpc	r13, r9
     df2:	09 f0       	breq	.+2      	; 0xdf6 <_ZN4Tone7melody4Ev+0x1c2>
     df4:	72 cf       	rjmp	.-284    	; 0xcda <_ZN4Tone7melody4Ev+0xa6>
     df6:	80 e1       	ldi	r24, 0x10	; 16
     df8:	97 e2       	ldi	r25, 0x27	; 39
     dfa:	f7 01       	movw	r30, r14
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <_ZN4Tone7melody4Ev+0x1c8>
     e00:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e02:	d9 f7       	brne	.-10     	; 0xdfa <_ZN4Tone7melody4Ev+0x1c6>
     e04:	60 cf       	rjmp	.-320    	; 0xcc6 <_ZN4Tone7melody4Ev+0x92>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
		}
		_delay_ms(1000);
	}
}
     e06:	cc 56       	subi	r28, 0x6C	; 108
     e08:	de 4f       	sbci	r29, 0xFE	; 254
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	7f 90       	pop	r7
     e2e:	6f 90       	pop	r6
     e30:	5f 90       	pop	r5
     e32:	4f 90       	pop	r4
     e34:	3f 90       	pop	r3
     e36:	2f 90       	pop	r2
     e38:	08 95       	ret

00000e3a <_ZN4Tone7melody5Ev>:


void Tone:: melody5()
{
     e3a:	2f 92       	push	r2
     e3c:	3f 92       	push	r3
     e3e:	4f 92       	push	r4
     e40:	5f 92       	push	r5
     e42:	6f 92       	push	r6
     e44:	7f 92       	push	r7
     e46:	8f 92       	push	r8
     e48:	9f 92       	push	r9
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	ce 52       	subi	r28, 0x2E	; 46
     e64:	d1 40       	sbci	r29, 0x01	; 1
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	c3 5d       	subi	r28, 0xD3	; 211
     e72:	de 4f       	sbci	r29, 0xFE	; 254
     e74:	99 83       	std	Y+1, r25	; 0x01
     e76:	88 83       	st	Y, r24
     e78:	cd 52       	subi	r28, 0x2D	; 45
     e7a:	d1 40       	sbci	r29, 0x01	; 1
		0,NOTE_C5,NOTE_D5,NOTE_DS5,
		NOTE_DS5,NOTE_F5,NOTE_D5,NOTE_D5,
		NOTE_DS5,NOTE_C5,NOTE_C5,NOTE_D5,
		NOTE_B4,NOTE_GS4,NOTE_G4,NOTE_C5
		
	};
     e7c:	84 e9       	ldi	r24, 0x94	; 148
     e7e:	e6 e4       	ldi	r30, 0x46	; 70
     e80:	f5 e0       	ldi	r31, 0x05	; 5
     e82:	de 01       	movw	r26, r28
     e84:	11 96       	adiw	r26, 0x01	; 1
     e86:	01 90       	ld	r0, Z+
     e88:	0d 92       	st	X+, r0
     e8a:	8a 95       	dec	r24
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <_ZN4Tone7melody5Ev+0x4c>
		12,12,6,6,
		12,24,24,12,
		24,24,12,24,
		24,12,24,24,
		12,24,24,3
	};
     e8e:	84 e9       	ldi	r24, 0x94	; 148
     e90:	ea ed       	ldi	r30, 0xDA	; 218
     e92:	f5 e0       	ldi	r31, 0x05	; 5
     e94:	de 01       	movw	r26, r28
     e96:	ab 56       	subi	r26, 0x6B	; 107
     e98:	bf 4f       	sbci	r27, 0xFF	; 255
     e9a:	01 90       	ld	r0, Z+
     e9c:	0d 92       	st	X+, r0
     e9e:	8a 95       	dec	r24
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <_ZN4Tone7melody5Ev+0x60>
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
     ea2:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     ea6:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <changing>
     eaa:	4e 01       	movw	r8, r28
     eac:	87 ed       	ldi	r24, 0xD7	; 215
     eae:	88 1a       	sub	r8, r24
     eb0:	8e ef       	ldi	r24, 0xFE	; 254
     eb2:	98 0a       	sbc	r9, r24
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
				if( wantChange) {changing=1;_delay_ms(100);break;}

				
				float noteDuration = 375*3 / noteDurations[currentNote];
     eb4:	0f 2e       	mov	r0, r31
     eb6:	f5 e6       	ldi	r31, 0x65	; 101
     eb8:	2f 2e       	mov	r2, r31
     eba:	f4 e0       	ldi	r31, 0x04	; 4
     ebc:	3f 2e       	mov	r3, r31
     ebe:	f0 2d       	mov	r31, r0
     ec0:	0f 2e       	mov	r0, r31
     ec2:	f8 ec       	ldi	r31, 0xC8	; 200
     ec4:	ef 2e       	mov	r14, r31
     ec6:	f1 2c       	mov	r15, r1
     ec8:	f0 2d       	mov	r31, r0
     eca:	07 c0       	rjmp	.+14     	; 0xeda <_ZN4Tone7melody5Ev+0xa0>
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
     ecc:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <changing>
     ed0:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <changing+0x1>
     ed4:	89 2b       	or	r24, r25
     ed6:	09 f0       	breq	.+2      	; 0xeda <_ZN4Tone7melody5Ev+0xa0>
     ed8:	99 c0       	rjmp	.+306    	; 0x100c <_ZN4Tone7melody5Ev+0x1d2>
	{
			for (int currentNote=0; currentNote<length;currentNote++)
			{
				int wantChange  = PINB & (1<<BUTTON_PIN);
				if( wantChange) {changing=1;_delay_ms(100);break;}
     eda:	19 9b       	sbis	0x03, 1	; 3
     edc:	10 c0       	rjmp	.+32     	; 0xefe <_ZN4Tone7melody5Ev+0xc4>
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <_ZN4Tone7melody5Ev+0xaa>
     ee0:	19 9b       	sbis	0x03, 1	; 3
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <_ZN4Tone7melody5Ev+0xd2>
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	90 93 70 06 	sts	0x0670, r25	; 0x800670 <changing>
     eea:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <changing+0x1>
     eee:	88 ee       	ldi	r24, 0xE8	; 232
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	f7 01       	movw	r30, r14
     ef4:	31 97       	sbiw	r30, 0x01	; 1
     ef6:	f1 f7       	brne	.-4      	; 0xef4 <_ZN4Tone7melody5Ev+0xba>
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	d9 f7       	brne	.-10     	; 0xef2 <_ZN4Tone7melody5Ev+0xb8>
     efc:	7f c0       	rjmp	.+254    	; 0xffc <_ZN4Tone7melody5Ev+0x1c2>
     efe:	6e 01       	movw	r12, r28
     f00:	e5 e9       	ldi	r30, 0x95	; 149
     f02:	ce 0e       	add	r12, r30
     f04:	d1 1c       	adc	r13, r1
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	5c 01       	movw	r10, r24

				
				float noteDuration = 375*3 / noteDurations[currentNote];
     f0c:	f6 01       	movw	r30, r12
     f0e:	61 91       	ld	r22, Z+
     f10:	71 91       	ld	r23, Z+
     f12:	6f 01       	movw	r12, r30
     f14:	c1 01       	movw	r24, r2
     f16:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__divmodhi4>
     f1a:	07 2e       	mov	r0, r23
     f1c:	00 0c       	add	r0, r0
     f1e:	88 0b       	sbc	r24, r24
     f20:	99 0b       	sbc	r25, r25
     f22:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     f26:	2b 01       	movw	r4, r22
     f28:	3c 01       	movw	r6, r24
				playNote(melody[currentNote],noteDuration);
     f2a:	f5 01       	movw	r30, r10
     f2c:	61 91       	ld	r22, Z+
     f2e:	71 91       	ld	r23, Z+
     f30:	5f 01       	movw	r10, r30
     f32:	07 2e       	mov	r0, r23
     f34:	00 0c       	add	r0, r0
     f36:	88 0b       	sbc	r24, r24
     f38:	99 0b       	sbc	r25, r25
     f3a:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__floatsisf>
     f3e:	ab 01       	movw	r20, r22
     f40:	bc 01       	movw	r22, r24
     f42:	93 01       	movw	r18, r6
     f44:	82 01       	movw	r16, r4
     f46:	c3 5d       	subi	r28, 0xD3	; 211
     f48:	de 4f       	sbci	r29, 0xFE	; 254
     f4a:	88 81       	ld	r24, Y
     f4c:	99 81       	ldd	r25, Y+1	; 0x01
     f4e:	cd 52       	subi	r28, 0x2D	; 45
     f50:	d1 40       	sbci	r29, 0x01	; 1
     f52:	0e 94 89 00 	call	0x112	; 0x112 <_ZN4Tone8playNoteEff>
				float pauseBetweenNotes= noteDuration*1.30;
     f56:	26 e6       	ldi	r18, 0x66	; 102
     f58:	36 e6       	ldi	r19, 0x66	; 102
     f5a:	46 ea       	ldi	r20, 0xA6	; 166
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	c3 01       	movw	r24, r6
     f60:	b2 01       	movw	r22, r4
     f62:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     f66:	c7 5d       	subi	r28, 0xD7	; 215
     f68:	de 4f       	sbci	r29, 0xFE	; 254
     f6a:	68 83       	st	Y, r22
     f6c:	79 83       	std	Y+1, r23	; 0x01
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	9b 83       	std	Y+3, r25	; 0x03
     f72:	c9 52       	subi	r28, 0x29	; 41
     f74:	d1 40       	sbci	r29, 0x01	; 1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4a ef       	ldi	r20, 0xFA	; 250
     f7c:	54 e4       	ldi	r21, 0x44	; 68
     f7e:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     f82:	2b 01       	movw	r4, r22
     f84:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e8       	ldi	r20, 0x80	; 128
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     f92:	88 23       	and	r24, r24
     f94:	4c f1       	brlt	.+82     	; 0xfe8 <_ZN4Tone7melody5Ev+0x1ae>
		__ticks = 1;
	else if (__tmp > 65535)
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	c3 01       	movw	r24, r6
     fa0:	b2 01       	movw	r22, r4
     fa2:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	d4 f4       	brge	.+52     	; 0xfde <_ZN4Tone7melody5Ev+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	c7 5d       	subi	r28, 0xD7	; 215
     fb4:	de 4f       	sbci	r29, 0xFE	; 254
     fb6:	68 81       	ld	r22, Y
     fb8:	79 81       	ldd	r23, Y+1	; 0x01
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	c9 52       	subi	r28, 0x29	; 41
     fc0:	d1 40       	sbci	r29, 0x01	; 1
     fc2:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     fc6:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
		while(__ticks)
     fca:	61 15       	cp	r22, r1
     fcc:	71 05       	cpc	r23, r1
     fce:	89 f0       	breq	.+34     	; 0xff2 <_ZN4Tone7melody5Ev+0x1b8>
     fd0:	c7 01       	movw	r24, r14
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <_ZN4Tone7melody5Ev+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd6:	61 50       	subi	r22, 0x01	; 1
     fd8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	d1 f7       	brne	.-12     	; 0xfd0 <_ZN4Tone7melody5Ev+0x196>
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <_ZN4Tone7melody5Ev+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fde:	c3 01       	movw	r24, r6
     fe0:	b2 01       	movw	r22, r4
     fe2:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <_ZN4Tone7melody5Ev+0x1b2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	cb 01       	movw	r24, r22
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <_ZN4Tone7melody5Ev+0x1b4>
				_delay_ms (pauseBetweenNotes);
				SPEAKER_PORT=0;
     ff2:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	changing=0;
	while (changing==0)
	{
			for (int currentNote=0; currentNote<length;currentNote++)
     ff4:	c8 14       	cp	r12, r8
     ff6:	d9 04       	cpc	r13, r9
     ff8:	09 f0       	breq	.+2      	; 0xffc <_ZN4Tone7melody5Ev+0x1c2>
     ffa:	72 cf       	rjmp	.-284    	; 0xee0 <_ZN4Tone7melody5Ev+0xa6>
     ffc:	80 ea       	ldi	r24, 0xA0	; 160
     ffe:	9f e0       	ldi	r25, 0x0F	; 15
    1000:	f7 01       	movw	r30, r14
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <_ZN4Tone7melody5Ev+0x1c8>
    1006:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	d9 f7       	brne	.-10     	; 0x1000 <_ZN4Tone7melody5Ev+0x1c6>
    100a:	60 cf       	rjmp	.-320    	; 0xecc <_ZN4Tone7melody5Ev+0x92>
				SPEAKER_PORT=0;
			}
			
		_delay_ms(400);
	}
}
    100c:	c2 5d       	subi	r28, 0xD2	; 210
    100e:	de 4f       	sbci	r29, 0xFE	; 254
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	7f 90       	pop	r7
    1034:	6f 90       	pop	r6
    1036:	5f 90       	pop	r5
    1038:	4f 90       	pop	r4
    103a:	3f 90       	pop	r3
    103c:	2f 90       	pop	r2
    103e:	08 95       	ret

00001040 <_ZN4Tone10playMelodyEi>:

void Tone:: playMelody(int number){

	switch (number) {
    1040:	63 30       	cpi	r22, 0x03	; 3
    1042:	71 05       	cpc	r23, r1
    1044:	a9 f0       	breq	.+42     	; 0x1070 <_ZN4Tone10playMelodyEi+0x30>
    1046:	3c f4       	brge	.+14     	; 0x1056 <_ZN4Tone10playMelodyEi+0x16>
    1048:	61 30       	cpi	r22, 0x01	; 1
    104a:	71 05       	cpc	r23, r1
    104c:	59 f0       	breq	.+22     	; 0x1064 <_ZN4Tone10playMelodyEi+0x24>
    104e:	62 30       	cpi	r22, 0x02	; 2
    1050:	71 05       	cpc	r23, r1
    1052:	59 f0       	breq	.+22     	; 0x106a <_ZN4Tone10playMelodyEi+0x2a>
    1054:	08 95       	ret
    1056:	64 30       	cpi	r22, 0x04	; 4
    1058:	71 05       	cpc	r23, r1
    105a:	69 f0       	breq	.+26     	; 0x1076 <_ZN4Tone10playMelodyEi+0x36>
    105c:	65 30       	cpi	r22, 0x05	; 5
    105e:	71 05       	cpc	r23, r1
    1060:	69 f0       	breq	.+26     	; 0x107c <_ZN4Tone10playMelodyEi+0x3c>
    1062:	08 95       	ret
		case 1:
		melody1();
    1064:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4Tone7melody1Ev>
		break;
    1068:	08 95       	ret
		case 2:
		melody2();
    106a:	0e 94 14 04 	call	0x828	; 0x828 <_ZN4Tone7melody2Ev>
		break;
    106e:	08 95       	ret
		case 3:
		melody3();
    1070:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN4Tone7melody3Ev>
		break;
    1074:	08 95       	ret
		case 4:
		melody4();
    1076:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN4Tone7melody4Ev>
		break;
    107a:	08 95       	ret
		case 5:
		melody5();
    107c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN4Tone7melody5Ev>
    1080:	08 95       	ret

00001082 <__subsf3>:
    1082:	50 58       	subi	r21, 0x80	; 128

00001084 <__addsf3>:
    1084:	bb 27       	eor	r27, r27
    1086:	aa 27       	eor	r26, r26
    1088:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__addsf3x>
    108c:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_round>
    1090:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscA>
    1094:	38 f0       	brcs	.+14     	; 0x10a4 <__addsf3+0x20>
    1096:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_pscB>
    109a:	20 f0       	brcs	.+8      	; 0x10a4 <__addsf3+0x20>
    109c:	39 f4       	brne	.+14     	; 0x10ac <__addsf3+0x28>
    109e:	9f 3f       	cpi	r25, 0xFF	; 255
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <__addsf3+0x24>
    10a2:	26 f4       	brtc	.+8      	; 0x10ac <__addsf3+0x28>
    10a4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_nan>
    10a8:	0e f4       	brtc	.+2      	; 0x10ac <__addsf3+0x28>
    10aa:	e0 95       	com	r30
    10ac:	e7 fb       	bst	r30, 7
    10ae:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>

000010b2 <__addsf3x>:
    10b2:	e9 2f       	mov	r30, r25
    10b4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_split3>
    10b8:	58 f3       	brcs	.-42     	; 0x1090 <__addsf3+0xc>
    10ba:	ba 17       	cp	r27, r26
    10bc:	62 07       	cpc	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	95 07       	cpc	r25, r21
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__addsf3x+0x1c>
    10c6:	79 f4       	brne	.+30     	; 0x10e6 <__addsf3x+0x34>
    10c8:	a6 f5       	brtc	.+104    	; 0x1132 <__addsf3x+0x80>
    10ca:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_zero>
    10ce:	0e f4       	brtc	.+2      	; 0x10d2 <__addsf3x+0x20>
    10d0:	e0 95       	com	r30
    10d2:	0b 2e       	mov	r0, r27
    10d4:	ba 2f       	mov	r27, r26
    10d6:	a0 2d       	mov	r26, r0
    10d8:	0b 01       	movw	r0, r22
    10da:	b9 01       	movw	r22, r18
    10dc:	90 01       	movw	r18, r0
    10de:	0c 01       	movw	r0, r24
    10e0:	ca 01       	movw	r24, r20
    10e2:	a0 01       	movw	r20, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ff 27       	eor	r31, r31
    10e8:	59 1b       	sub	r21, r25
    10ea:	99 f0       	breq	.+38     	; 0x1112 <__addsf3x+0x60>
    10ec:	59 3f       	cpi	r21, 0xF9	; 249
    10ee:	50 f4       	brcc	.+20     	; 0x1104 <__addsf3x+0x52>
    10f0:	50 3e       	cpi	r21, 0xE0	; 224
    10f2:	68 f1       	brcs	.+90     	; 0x114e <__addsf3x+0x9c>
    10f4:	1a 16       	cp	r1, r26
    10f6:	f0 40       	sbci	r31, 0x00	; 0
    10f8:	a2 2f       	mov	r26, r18
    10fa:	23 2f       	mov	r18, r19
    10fc:	34 2f       	mov	r19, r20
    10fe:	44 27       	eor	r20, r20
    1100:	58 5f       	subi	r21, 0xF8	; 248
    1102:	f3 cf       	rjmp	.-26     	; 0x10ea <__addsf3x+0x38>
    1104:	46 95       	lsr	r20
    1106:	37 95       	ror	r19
    1108:	27 95       	ror	r18
    110a:	a7 95       	ror	r26
    110c:	f0 40       	sbci	r31, 0x00	; 0
    110e:	53 95       	inc	r21
    1110:	c9 f7       	brne	.-14     	; 0x1104 <__addsf3x+0x52>
    1112:	7e f4       	brtc	.+30     	; 0x1132 <__addsf3x+0x80>
    1114:	1f 16       	cp	r1, r31
    1116:	ba 0b       	sbc	r27, r26
    1118:	62 0b       	sbc	r22, r18
    111a:	73 0b       	sbc	r23, r19
    111c:	84 0b       	sbc	r24, r20
    111e:	ba f0       	brmi	.+46     	; 0x114e <__addsf3x+0x9c>
    1120:	91 50       	subi	r25, 0x01	; 1
    1122:	a1 f0       	breq	.+40     	; 0x114c <__addsf3x+0x9a>
    1124:	ff 0f       	add	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	c2 f7       	brpl	.-16     	; 0x1120 <__addsf3x+0x6e>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <__addsf3x+0x9c>
    1132:	ba 0f       	add	r27, r26
    1134:	62 1f       	adc	r22, r18
    1136:	73 1f       	adc	r23, r19
    1138:	84 1f       	adc	r24, r20
    113a:	48 f4       	brcc	.+18     	; 0x114e <__addsf3x+0x9c>
    113c:	87 95       	ror	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b7 95       	ror	r27
    1144:	f7 95       	ror	r31
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	08 f0       	brcs	.+2      	; 0x114c <__addsf3x+0x9a>
    114a:	b0 cf       	rjmp	.-160    	; 0x10ac <__addsf3+0x28>
    114c:	93 95       	inc	r25
    114e:	88 0f       	add	r24, r24
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__addsf3x+0xa2>
    1152:	99 27       	eor	r25, r25
    1154:	ee 0f       	add	r30, r30
    1156:	97 95       	ror	r25
    1158:	87 95       	ror	r24
    115a:	08 95       	ret

0000115c <__cmpsf2>:
    115c:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_cmp>
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__cmpsf2+0x8>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	08 95       	ret

00001166 <__divsf3>:
    1166:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3x>
    116a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_round>
    116e:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_pscB>
    1172:	58 f0       	brcs	.+22     	; 0x118a <__divsf3+0x24>
    1174:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscA>
    1178:	40 f0       	brcs	.+16     	; 0x118a <__divsf3+0x24>
    117a:	29 f4       	brne	.+10     	; 0x1186 <__divsf3+0x20>
    117c:	5f 3f       	cpi	r21, 0xFF	; 255
    117e:	29 f0       	breq	.+10     	; 0x118a <__divsf3+0x24>
    1180:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    1184:	51 11       	cpse	r21, r1
    1186:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    118a:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_nan>

0000118e <__divsf3x>:
    118e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_split3>
    1192:	68 f3       	brcs	.-38     	; 0x116e <__divsf3+0x8>

00001194 <__divsf3_pse>:
    1194:	99 23       	and	r25, r25
    1196:	b1 f3       	breq	.-20     	; 0x1184 <__divsf3+0x1e>
    1198:	55 23       	and	r21, r21
    119a:	91 f3       	breq	.-28     	; 0x1180 <__divsf3+0x1a>
    119c:	95 1b       	sub	r25, r21
    119e:	55 0b       	sbc	r21, r21
    11a0:	bb 27       	eor	r27, r27
    11a2:	aa 27       	eor	r26, r26
    11a4:	62 17       	cp	r22, r18
    11a6:	73 07       	cpc	r23, r19
    11a8:	84 07       	cpc	r24, r20
    11aa:	38 f0       	brcs	.+14     	; 0x11ba <__divsf3_pse+0x26>
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	44 1f       	adc	r20, r20
    11b6:	aa 1f       	adc	r26, r26
    11b8:	a9 f3       	breq	.-22     	; 0x11a4 <__divsf3_pse+0x10>
    11ba:	35 d0       	rcall	.+106    	; 0x1226 <__divsf3_pse+0x92>
    11bc:	0e 2e       	mov	r0, r30
    11be:	3a f0       	brmi	.+14     	; 0x11ce <__divsf3_pse+0x3a>
    11c0:	e0 e8       	ldi	r30, 0x80	; 128
    11c2:	32 d0       	rcall	.+100    	; 0x1228 <__divsf3_pse+0x94>
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	e6 95       	lsr	r30
    11ca:	00 1c       	adc	r0, r0
    11cc:	ca f7       	brpl	.-14     	; 0x11c0 <__divsf3_pse+0x2c>
    11ce:	2b d0       	rcall	.+86     	; 0x1226 <__divsf3_pse+0x92>
    11d0:	fe 2f       	mov	r31, r30
    11d2:	29 d0       	rcall	.+82     	; 0x1226 <__divsf3_pse+0x92>
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	bb 1f       	adc	r27, r27
    11dc:	26 17       	cp	r18, r22
    11de:	37 07       	cpc	r19, r23
    11e0:	48 07       	cpc	r20, r24
    11e2:	ab 07       	cpc	r26, r27
    11e4:	b0 e8       	ldi	r27, 0x80	; 128
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__divsf3_pse+0x56>
    11e8:	bb 0b       	sbc	r27, r27
    11ea:	80 2d       	mov	r24, r0
    11ec:	bf 01       	movw	r22, r30
    11ee:	ff 27       	eor	r31, r31
    11f0:	93 58       	subi	r25, 0x83	; 131
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	3a f0       	brmi	.+14     	; 0x1204 <__divsf3_pse+0x70>
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	51 05       	cpc	r21, r1
    11fa:	78 f0       	brcs	.+30     	; 0x121a <__divsf3_pse+0x86>
    11fc:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    1200:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	e4 f3       	brlt	.-8      	; 0x1200 <__divsf3_pse+0x6c>
    1208:	98 3e       	cpi	r25, 0xE8	; 232
    120a:	d4 f3       	brlt	.-12     	; 0x1200 <__divsf3_pse+0x6c>
    120c:	86 95       	lsr	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	b7 95       	ror	r27
    1214:	f7 95       	ror	r31
    1216:	9f 5f       	subi	r25, 0xFF	; 255
    1218:	c9 f7       	brne	.-14     	; 0x120c <__divsf3_pse+0x78>
    121a:	88 0f       	add	r24, r24
    121c:	91 1d       	adc	r25, r1
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret
    1226:	e1 e0       	ldi	r30, 0x01	; 1
    1228:	66 0f       	add	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	bb 1f       	adc	r27, r27
    1230:	62 17       	cp	r22, r18
    1232:	73 07       	cpc	r23, r19
    1234:	84 07       	cpc	r24, r20
    1236:	ba 07       	cpc	r27, r26
    1238:	20 f0       	brcs	.+8      	; 0x1242 <__divsf3_pse+0xae>
    123a:	62 1b       	sub	r22, r18
    123c:	73 0b       	sbc	r23, r19
    123e:	84 0b       	sbc	r24, r20
    1240:	ba 0b       	sbc	r27, r26
    1242:	ee 1f       	adc	r30, r30
    1244:	88 f7       	brcc	.-30     	; 0x1228 <__divsf3_pse+0x94>
    1246:	e0 95       	com	r30
    1248:	08 95       	ret

0000124a <__fixsfsi>:
    124a:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
    124e:	68 94       	set
    1250:	b1 11       	cpse	r27, r1
    1252:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    1256:	08 95       	ret

00001258 <__fixunssfsi>:
    1258:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__fp_splitA>
    125c:	88 f0       	brcs	.+34     	; 0x1280 <__fixunssfsi+0x28>
    125e:	9f 57       	subi	r25, 0x7F	; 127
    1260:	98 f0       	brcs	.+38     	; 0x1288 <__fixunssfsi+0x30>
    1262:	b9 2f       	mov	r27, r25
    1264:	99 27       	eor	r25, r25
    1266:	b7 51       	subi	r27, 0x17	; 23
    1268:	b0 f0       	brcs	.+44     	; 0x1296 <__fixunssfsi+0x3e>
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <__fixunssfsi+0x4c>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	1a f0       	brmi	.+6      	; 0x127c <__fixunssfsi+0x24>
    1276:	ba 95       	dec	r27
    1278:	c9 f7       	brne	.-14     	; 0x126c <__fixunssfsi+0x14>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <__fixunssfsi+0x4c>
    127c:	b1 30       	cpi	r27, 0x01	; 1
    127e:	91 f0       	breq	.+36     	; 0x12a4 <__fixunssfsi+0x4c>
    1280:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_zero>
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	08 95       	ret
    1288:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_zero>
    128c:	67 2f       	mov	r22, r23
    128e:	78 2f       	mov	r23, r24
    1290:	88 27       	eor	r24, r24
    1292:	b8 5f       	subi	r27, 0xF8	; 248
    1294:	39 f0       	breq	.+14     	; 0x12a4 <__fixunssfsi+0x4c>
    1296:	b9 3f       	cpi	r27, 0xF9	; 249
    1298:	cc f3       	brlt	.-14     	; 0x128c <__fixunssfsi+0x34>
    129a:	86 95       	lsr	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b3 95       	inc	r27
    12a2:	d9 f7       	brne	.-10     	; 0x129a <__fixunssfsi+0x42>
    12a4:	3e f4       	brtc	.+14     	; 0x12b4 <__fixunssfsi+0x5c>
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <__floatunsisf>:
    12b6:	e8 94       	clt
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <__floatsisf+0x12>

000012ba <__floatsisf>:
    12ba:	97 fb       	bst	r25, 7
    12bc:	3e f4       	brtc	.+14     	; 0x12cc <__floatsisf+0x12>
    12be:	90 95       	com	r25
    12c0:	80 95       	com	r24
    12c2:	70 95       	com	r23
    12c4:	61 95       	neg	r22
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	99 23       	and	r25, r25
    12ce:	a9 f0       	breq	.+42     	; 0x12fa <__floatsisf+0x40>
    12d0:	f9 2f       	mov	r31, r25
    12d2:	96 e9       	ldi	r25, 0x96	; 150
    12d4:	bb 27       	eor	r27, r27
    12d6:	93 95       	inc	r25
    12d8:	f6 95       	lsr	r31
    12da:	87 95       	ror	r24
    12dc:	77 95       	ror	r23
    12de:	67 95       	ror	r22
    12e0:	b7 95       	ror	r27
    12e2:	f1 11       	cpse	r31, r1
    12e4:	f8 cf       	rjmp	.-16     	; 0x12d6 <__floatsisf+0x1c>
    12e6:	fa f4       	brpl	.+62     	; 0x1326 <__floatsisf+0x6c>
    12e8:	bb 0f       	add	r27, r27
    12ea:	11 f4       	brne	.+4      	; 0x12f0 <__floatsisf+0x36>
    12ec:	60 ff       	sbrs	r22, 0
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <__floatsisf+0x6c>
    12f0:	6f 5f       	subi	r22, 0xFF	; 255
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	8f 4f       	sbci	r24, 0xFF	; 255
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <__floatsisf+0x6c>
    12fa:	88 23       	and	r24, r24
    12fc:	11 f0       	breq	.+4      	; 0x1302 <__floatsisf+0x48>
    12fe:	96 e9       	ldi	r25, 0x96	; 150
    1300:	11 c0       	rjmp	.+34     	; 0x1324 <__floatsisf+0x6a>
    1302:	77 23       	and	r23, r23
    1304:	21 f0       	breq	.+8      	; 0x130e <__floatsisf+0x54>
    1306:	9e e8       	ldi	r25, 0x8E	; 142
    1308:	87 2f       	mov	r24, r23
    130a:	76 2f       	mov	r23, r22
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <__floatsisf+0x5e>
    130e:	66 23       	and	r22, r22
    1310:	71 f0       	breq	.+28     	; 0x132e <__floatsisf+0x74>
    1312:	96 e8       	ldi	r25, 0x86	; 134
    1314:	86 2f       	mov	r24, r22
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	2a f0       	brmi	.+10     	; 0x1326 <__floatsisf+0x6c>
    131c:	9a 95       	dec	r25
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	da f7       	brpl	.-10     	; 0x131c <__floatsisf+0x62>
    1326:	88 0f       	add	r24, r24
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	97 f9       	bld	r25, 7
    132e:	08 95       	ret

00001330 <__fp_cmp>:
    1330:	99 0f       	add	r25, r25
    1332:	00 08       	sbc	r0, r0
    1334:	55 0f       	add	r21, r21
    1336:	aa 0b       	sbc	r26, r26
    1338:	e0 e8       	ldi	r30, 0x80	; 128
    133a:	fe ef       	ldi	r31, 0xFE	; 254
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	e8 07       	cpc	r30, r24
    1342:	f9 07       	cpc	r31, r25
    1344:	c0 f0       	brcs	.+48     	; 0x1376 <__fp_cmp+0x46>
    1346:	12 16       	cp	r1, r18
    1348:	13 06       	cpc	r1, r19
    134a:	e4 07       	cpc	r30, r20
    134c:	f5 07       	cpc	r31, r21
    134e:	98 f0       	brcs	.+38     	; 0x1376 <__fp_cmp+0x46>
    1350:	62 1b       	sub	r22, r18
    1352:	73 0b       	sbc	r23, r19
    1354:	84 0b       	sbc	r24, r20
    1356:	95 0b       	sbc	r25, r21
    1358:	39 f4       	brne	.+14     	; 0x1368 <__fp_cmp+0x38>
    135a:	0a 26       	eor	r0, r26
    135c:	61 f0       	breq	.+24     	; 0x1376 <__fp_cmp+0x46>
    135e:	23 2b       	or	r18, r19
    1360:	24 2b       	or	r18, r20
    1362:	25 2b       	or	r18, r21
    1364:	21 f4       	brne	.+8      	; 0x136e <__fp_cmp+0x3e>
    1366:	08 95       	ret
    1368:	0a 26       	eor	r0, r26
    136a:	09 f4       	brne	.+2      	; 0x136e <__fp_cmp+0x3e>
    136c:	a1 40       	sbci	r26, 0x01	; 1
    136e:	a6 95       	lsr	r26
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	81 1d       	adc	r24, r1
    1374:	81 1d       	adc	r24, r1
    1376:	08 95       	ret

00001378 <__fp_inf>:
    1378:	97 f9       	bld	r25, 7
    137a:	9f 67       	ori	r25, 0x7F	; 127
    137c:	80 e8       	ldi	r24, 0x80	; 128
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	08 95       	ret

00001384 <__fp_nan>:
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	80 ec       	ldi	r24, 0xC0	; 192
    1388:	08 95       	ret

0000138a <__fp_pscA>:
    138a:	00 24       	eor	r0, r0
    138c:	0a 94       	dec	r0
    138e:	16 16       	cp	r1, r22
    1390:	17 06       	cpc	r1, r23
    1392:	18 06       	cpc	r1, r24
    1394:	09 06       	cpc	r0, r25
    1396:	08 95       	ret

00001398 <__fp_pscB>:
    1398:	00 24       	eor	r0, r0
    139a:	0a 94       	dec	r0
    139c:	12 16       	cp	r1, r18
    139e:	13 06       	cpc	r1, r19
    13a0:	14 06       	cpc	r1, r20
    13a2:	05 06       	cpc	r0, r21
    13a4:	08 95       	ret

000013a6 <__fp_round>:
    13a6:	09 2e       	mov	r0, r25
    13a8:	03 94       	inc	r0
    13aa:	00 0c       	add	r0, r0
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__fp_round+0xc>
    13ae:	88 23       	and	r24, r24
    13b0:	52 f0       	brmi	.+20     	; 0x13c6 <__fp_round+0x20>
    13b2:	bb 0f       	add	r27, r27
    13b4:	40 f4       	brcc	.+16     	; 0x13c6 <__fp_round+0x20>
    13b6:	bf 2b       	or	r27, r31
    13b8:	11 f4       	brne	.+4      	; 0x13be <__fp_round+0x18>
    13ba:	60 ff       	sbrs	r22, 0
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__fp_round+0x20>
    13be:	6f 5f       	subi	r22, 0xFF	; 255
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	08 95       	ret

000013c8 <__fp_split3>:
    13c8:	57 fd       	sbrc	r21, 7
    13ca:	90 58       	subi	r25, 0x80	; 128
    13cc:	44 0f       	add	r20, r20
    13ce:	55 1f       	adc	r21, r21
    13d0:	59 f0       	breq	.+22     	; 0x13e8 <__fp_splitA+0x10>
    13d2:	5f 3f       	cpi	r21, 0xFF	; 255
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <__fp_splitA+0x1a>
    13d6:	47 95       	ror	r20

000013d8 <__fp_splitA>:
    13d8:	88 0f       	add	r24, r24
    13da:	97 fb       	bst	r25, 7
    13dc:	99 1f       	adc	r25, r25
    13de:	61 f0       	breq	.+24     	; 0x13f8 <__fp_splitA+0x20>
    13e0:	9f 3f       	cpi	r25, 0xFF	; 255
    13e2:	79 f0       	breq	.+30     	; 0x1402 <__fp_splitA+0x2a>
    13e4:	87 95       	ror	r24
    13e6:	08 95       	ret
    13e8:	12 16       	cp	r1, r18
    13ea:	13 06       	cpc	r1, r19
    13ec:	14 06       	cpc	r1, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	f2 cf       	rjmp	.-28     	; 0x13d6 <__fp_split3+0xe>
    13f2:	46 95       	lsr	r20
    13f4:	f1 df       	rcall	.-30     	; 0x13d8 <__fp_splitA>
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <__fp_splitA+0x30>
    13f8:	16 16       	cp	r1, r22
    13fa:	17 06       	cpc	r1, r23
    13fc:	18 06       	cpc	r1, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	f1 cf       	rjmp	.-30     	; 0x13e4 <__fp_splitA+0xc>
    1402:	86 95       	lsr	r24
    1404:	71 05       	cpc	r23, r1
    1406:	61 05       	cpc	r22, r1
    1408:	08 94       	sec
    140a:	08 95       	ret

0000140c <__fp_zero>:
    140c:	e8 94       	clt

0000140e <__fp_szero>:
    140e:	bb 27       	eor	r27, r27
    1410:	66 27       	eor	r22, r22
    1412:	77 27       	eor	r23, r23
    1414:	cb 01       	movw	r24, r22
    1416:	97 f9       	bld	r25, 7
    1418:	08 95       	ret

0000141a <__gesf2>:
    141a:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_cmp>
    141e:	08 f4       	brcc	.+2      	; 0x1422 <__gesf2+0x8>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	08 95       	ret

00001424 <__mulsf3>:
    1424:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3x>
    1428:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_round>
    142c:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscA>
    1430:	38 f0       	brcs	.+14     	; 0x1440 <__mulsf3+0x1c>
    1432:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_pscB>
    1436:	20 f0       	brcs	.+8      	; 0x1440 <__mulsf3+0x1c>
    1438:	95 23       	and	r25, r21
    143a:	11 f0       	breq	.+4      	; 0x1440 <__mulsf3+0x1c>
    143c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    1440:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_nan>
    1444:	11 24       	eor	r1, r1
    1446:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>

0000144a <__mulsf3x>:
    144a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_split3>
    144e:	70 f3       	brcs	.-36     	; 0x142c <__mulsf3+0x8>

00001450 <__mulsf3_pse>:
    1450:	95 9f       	mul	r25, r21
    1452:	c1 f3       	breq	.-16     	; 0x1444 <__mulsf3+0x20>
    1454:	95 0f       	add	r25, r21
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	55 1f       	adc	r21, r21
    145a:	62 9f       	mul	r22, r18
    145c:	f0 01       	movw	r30, r0
    145e:	72 9f       	mul	r23, r18
    1460:	bb 27       	eor	r27, r27
    1462:	f0 0d       	add	r31, r0
    1464:	b1 1d       	adc	r27, r1
    1466:	63 9f       	mul	r22, r19
    1468:	aa 27       	eor	r26, r26
    146a:	f0 0d       	add	r31, r0
    146c:	b1 1d       	adc	r27, r1
    146e:	aa 1f       	adc	r26, r26
    1470:	64 9f       	mul	r22, r20
    1472:	66 27       	eor	r22, r22
    1474:	b0 0d       	add	r27, r0
    1476:	a1 1d       	adc	r26, r1
    1478:	66 1f       	adc	r22, r22
    147a:	82 9f       	mul	r24, r18
    147c:	22 27       	eor	r18, r18
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	62 1f       	adc	r22, r18
    1484:	73 9f       	mul	r23, r19
    1486:	b0 0d       	add	r27, r0
    1488:	a1 1d       	adc	r26, r1
    148a:	62 1f       	adc	r22, r18
    148c:	83 9f       	mul	r24, r19
    148e:	a0 0d       	add	r26, r0
    1490:	61 1d       	adc	r22, r1
    1492:	22 1f       	adc	r18, r18
    1494:	74 9f       	mul	r23, r20
    1496:	33 27       	eor	r19, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	23 1f       	adc	r18, r19
    149e:	84 9f       	mul	r24, r20
    14a0:	60 0d       	add	r22, r0
    14a2:	21 1d       	adc	r18, r1
    14a4:	82 2f       	mov	r24, r18
    14a6:	76 2f       	mov	r23, r22
    14a8:	6a 2f       	mov	r22, r26
    14aa:	11 24       	eor	r1, r1
    14ac:	9f 57       	subi	r25, 0x7F	; 127
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	9a f0       	brmi	.+38     	; 0x14d8 <__mulsf3_pse+0x88>
    14b2:	f1 f0       	breq	.+60     	; 0x14f0 <__mulsf3_pse+0xa0>
    14b4:	88 23       	and	r24, r24
    14b6:	4a f0       	brmi	.+18     	; 0x14ca <__mulsf3_pse+0x7a>
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	bb 1f       	adc	r27, r27
    14be:	66 1f       	adc	r22, r22
    14c0:	77 1f       	adc	r23, r23
    14c2:	88 1f       	adc	r24, r24
    14c4:	91 50       	subi	r25, 0x01	; 1
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	a9 f7       	brne	.-22     	; 0x14b4 <__mulsf3_pse+0x64>
    14ca:	9e 3f       	cpi	r25, 0xFE	; 254
    14cc:	51 05       	cpc	r21, r1
    14ce:	80 f0       	brcs	.+32     	; 0x14f0 <__mulsf3_pse+0xa0>
    14d0:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    14d4:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    14d8:	5f 3f       	cpi	r21, 0xFF	; 255
    14da:	e4 f3       	brlt	.-8      	; 0x14d4 <__mulsf3_pse+0x84>
    14dc:	98 3e       	cpi	r25, 0xE8	; 232
    14de:	d4 f3       	brlt	.-12     	; 0x14d4 <__mulsf3_pse+0x84>
    14e0:	86 95       	lsr	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	b7 95       	ror	r27
    14e8:	f7 95       	ror	r31
    14ea:	e7 95       	ror	r30
    14ec:	9f 5f       	subi	r25, 0xFF	; 255
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <__mulsf3_pse+0x90>
    14f0:	fe 2b       	or	r31, r30
    14f2:	88 0f       	add	r24, r24
    14f4:	91 1d       	adc	r25, r1
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	97 f9       	bld	r25, 7
    14fc:	08 95       	ret

000014fe <__divmodhi4>:
    14fe:	97 fb       	bst	r25, 7
    1500:	07 2e       	mov	r0, r23
    1502:	16 f4       	brtc	.+4      	; 0x1508 <__divmodhi4+0xa>
    1504:	00 94       	com	r0
    1506:	07 d0       	rcall	.+14     	; 0x1516 <__divmodhi4_neg1>
    1508:	77 fd       	sbrc	r23, 7
    150a:	09 d0       	rcall	.+18     	; 0x151e <__divmodhi4_neg2>
    150c:	0e 94 93 0a 	call	0x1526	; 0x1526 <__udivmodhi4>
    1510:	07 fc       	sbrc	r0, 7
    1512:	05 d0       	rcall	.+10     	; 0x151e <__divmodhi4_neg2>
    1514:	3e f4       	brtc	.+14     	; 0x1524 <__divmodhi4_exit>

00001516 <__divmodhi4_neg1>:
    1516:	90 95       	com	r25
    1518:	81 95       	neg	r24
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	08 95       	ret

0000151e <__divmodhi4_neg2>:
    151e:	70 95       	com	r23
    1520:	61 95       	neg	r22
    1522:	7f 4f       	sbci	r23, 0xFF	; 255

00001524 <__divmodhi4_exit>:
    1524:	08 95       	ret

00001526 <__udivmodhi4>:
    1526:	aa 1b       	sub	r26, r26
    1528:	bb 1b       	sub	r27, r27
    152a:	51 e1       	ldi	r21, 0x11	; 17
    152c:	07 c0       	rjmp	.+14     	; 0x153c <__udivmodhi4_ep>

0000152e <__udivmodhi4_loop>:
    152e:	aa 1f       	adc	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	a6 17       	cp	r26, r22
    1534:	b7 07       	cpc	r27, r23
    1536:	10 f0       	brcs	.+4      	; 0x153c <__udivmodhi4_ep>
    1538:	a6 1b       	sub	r26, r22
    153a:	b7 0b       	sbc	r27, r23

0000153c <__udivmodhi4_ep>:
    153c:	88 1f       	adc	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	5a 95       	dec	r21
    1542:	a9 f7       	brne	.-22     	; 0x152e <__udivmodhi4_loop>
    1544:	80 95       	com	r24
    1546:	90 95       	com	r25
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	08 95       	ret

0000154e <__tablejump2__>:
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	05 90       	lpm	r0, Z+
    1554:	f4 91       	lpm	r31, Z
    1556:	e0 2d       	mov	r30, r0
    1558:	09 94       	ijmp

0000155a <_exit>:
    155a:	f8 94       	cli

0000155c <__stop_program>:
    155c:	ff cf       	rjmp	.-2      	; 0x155c <__stop_program>
