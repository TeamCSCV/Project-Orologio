
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ba  00800100  00002f60  00002ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008005ba  008005ba  000034ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00003520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069fb  00000000  00000000  00003790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ec  00000000  00000000  0000a18b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000263d  00000000  00000000  0000b577  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  0000dbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c72  00000000  00000000  0000e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003efa  00000000  00000000  0000f066  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00012f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	3a 02       	muls	r19, r26
      6a:	04 0e       	add	r0, r20

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	15 e0       	ldi	r17, 0x05	; 5
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e0 e6       	ldi	r30, 0x60	; 96
      80:	ff e2       	ldi	r31, 0x2F	; 47
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	aa 3b       	cpi	r26, 0xBA	; 186
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	25 e0       	ldi	r18, 0x05	; 5
      90:	aa eb       	ldi	r26, 0xBA	; 186
      92:	b5 e0       	ldi	r27, 0x05	; 5
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a6 3d       	cpi	r26, 0xD6	; 214
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c6 e3       	ldi	r28, 0x36	; 54
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
      b8:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_Z14ds1307_dec2bcdh>:




uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
      c0:	9d ec       	ldi	r25, 0xCD	; 205
      c2:	89 9f       	mul	r24, r25
      c4:	91 2d       	mov	r25, r1
      c6:	11 24       	eor	r1, r1
      c8:	96 95       	lsr	r25
      ca:	96 95       	lsr	r25
      cc:	96 95       	lsr	r25
      ce:	29 2f       	mov	r18, r25
      d0:	22 0f       	add	r18, r18
      d2:	92 0f       	add	r25, r18
      d4:	29 2f       	mov	r18, r25
      d6:	22 0f       	add	r18, r18
}
      d8:	82 0f       	add	r24, r18
      da:	08 95       	ret

000000dc <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
      dc:	28 2f       	mov	r18, r24
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	35 95       	asr	r19
      e2:	27 95       	ror	r18
      e4:	35 95       	asr	r19
      e6:	27 95       	ror	r18
      e8:	35 95       	asr	r19
      ea:	27 95       	ror	r18
      ec:	35 95       	asr	r19
      ee:	27 95       	ror	r18
      f0:	92 2f       	mov	r25, r18
      f2:	99 0f       	add	r25, r25
      f4:	29 0f       	add	r18, r25
      f6:	92 2f       	mov	r25, r18
      f8:	99 0f       	add	r25, r25
}
      fa:	89 1b       	sub	r24, r25
      fc:	08 95       	ret

000000fe <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
      fe:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z8i2c_initv>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	8a 95       	dec	r24
     106:	f1 f7       	brne	.-4      	; 0x104 <_Z11ds1307_initv+0x6>
     108:	08 95       	ret

0000010a <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
     10a:	cf 92       	push	r12
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	c8 2f       	mov	r28, r24
     11a:	d6 2f       	mov	r29, r22
     11c:	14 2f       	mov	r17, r20
     11e:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
     120:	80 ed       	ldi	r24, 0xD0	; 208
     122:	0e 94 4a 01 	call	0x294	; 0x294 <_Z14i2c_start_waith>
	i2c_write(0x00);
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
     12c:	8c 2d       	mov	r24, r12
     12e:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     132:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
     136:	8e 2d       	mov	r24, r14
     138:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     13c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
     140:	80 2f       	mov	r24, r16
     142:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     146:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
     14a:	8f 2d       	mov	r24, r15
     14c:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     150:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
     154:	81 2f       	mov	r24, r17
     156:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     15a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
     15e:	8d 2f       	mov	r24, r29
     160:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     164:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
     168:	8c 2f       	mov	r24, r28
     16a:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     16e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(0x00);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_stop();
     178:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	cf 90       	pop	r12
     18a:	08 95       	ret

0000018c <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
     18c:	6f 92       	push	r6
     18e:	7f 92       	push	r7
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
     1aa:	3b 01       	movw	r6, r22
     1ac:	5a 01       	movw	r10, r20
     1ae:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
     1b0:	80 ed       	ldi	r24, 0xD0	; 208
     1b2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z14i2c_start_waith>
	i2c_write(0x00);
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_stop();
     1bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
     1c0:	81 ed       	ldi	r24, 0xD1	; 209
     1c2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     1c6:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1ca:	8f 77       	andi	r24, 0x7F	; 127
     1cc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1d0:	f6 01       	movw	r30, r12
     1d2:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
     1d4:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1d8:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1dc:	f7 01       	movw	r30, r14
     1de:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
     1e0:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1e4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1e8:	f8 01       	movw	r30, r16
     1ea:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
     1ec:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1f0:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1f4:	f4 01       	movw	r30, r8
     1f6:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
     1f8:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1fc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     200:	f5 01       	movw	r30, r10
     202:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
     204:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     208:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     20c:	f3 01       	movw	r30, r6
     20e:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
     210:	0e 94 98 01 	call	0x330	; 0x330 <_Z11i2c_readNakv>
     214:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     218:	88 83       	st	Y, r24
	i2c_stop();
     21a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	8f 90       	pop	r8
     236:	7f 90       	pop	r7
     238:	6f 90       	pop	r6
     23a:	08 95       	ret

0000023c <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     23c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     240:	8d ef       	ldi	r24, 0xFD	; 253
     242:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     246:	08 95       	ret

00000248 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     248:	94 ea       	ldi	r25, 0xA4	; 164
     24a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     24e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     252:	99 23       	and	r25, r25
     254:	e4 f7       	brge	.-8      	; 0x24e <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     256:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     25a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     25c:	98 30       	cpi	r25, 0x08	; 8
     25e:	11 f0       	breq	.+4      	; 0x264 <_Z9i2c_starth+0x1c>
     260:	90 31       	cpi	r25, 0x10	; 16
     262:	91 f4       	brne	.+36     	; 0x288 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
     264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     268:	84 e8       	ldi	r24, 0x84	; 132
     26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     26e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     272:	88 23       	and	r24, r24
     274:	e4 f7       	brge	.-8      	; 0x26e <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     27a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     27c:	88 31       	cpi	r24, 0x18	; 24
     27e:	31 f0       	breq	.+12     	; 0x28c <_Z9i2c_starth+0x44>
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	31 f4       	brne	.+12     	; 0x290 <_Z9i2c_starth+0x48>

	return 0;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     290:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     292:	08 95       	ret

00000294 <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     294:	94 ea       	ldi	r25, 0xA4	; 164
     296:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     29a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29e:	99 23       	and	r25, r25
     2a0:	e4 f7       	brge	.-8      	; 0x29a <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2a6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     2a8:	98 30       	cpi	r25, 0x08	; 8
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <_Z14i2c_start_waith+0x1c>
     2ac:	90 31       	cpi	r25, 0x10	; 16
     2ae:	91 f7       	brne	.-28     	; 0x294 <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
     2b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
     2b4:	94 e8       	ldi	r25, 0x84	; 132
     2b6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     2ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2be:	99 23       	and	r25, r25
     2c0:	e4 f7       	brge	.-8      	; 0x2ba <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2c6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     2c8:	90 32       	cpi	r25, 0x20	; 32
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <_Z14i2c_start_waith+0x3c>
     2cc:	98 35       	cpi	r25, 0x58	; 88
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2d0:	94 e9       	ldi	r25, 0x94	; 148
     2d2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2d6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2da:	94 fd       	sbrc	r25, 4
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <_Z14i2c_start_waith+0x42>
     2de:	da cf       	rjmp	.-76     	; 0x294 <_Z14i2c_start_waith>
     2e0:	08 95       	ret

000002e2 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2e2:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_starth>

}/* i2c_rep_start */
     2e6:	08 95       	ret

000002e8 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2e8:	84 e9       	ldi	r24, 0x94	; 148
     2ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2f2:	84 fd       	sbrc	r24, 4
     2f4:	fc cf       	rjmp	.-8      	; 0x2ee <_Z8i2c_stopv+0x6>

}/* i2c_stop */
     2f6:	08 95       	ret

000002f8 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     2fc:	84 e8       	ldi	r24, 0x84	; 132
     2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     302:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     306:	88 23       	and	r24, r24
     308:	e4 f7       	brge	.-8      	; 0x302 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     30a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     30e:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     310:	88 32       	cpi	r24, 0x28	; 40
     312:	11 f0       	breq	.+4      	; 0x318 <_Z9i2c_writeh+0x20>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	08 95       	ret
	return 0;
     318:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
     31a:	08 95       	ret

0000031c <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     31c:	84 ec       	ldi	r24, 0xC4	; 196
     31e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     322:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     326:	88 23       	and	r24, r24
     328:	e4 f7       	brge	.-8      	; 0x322 <_Z11i2c_readAckv+0x6>

    return TWDR;
     32a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     32e:	08 95       	ret

00000330 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     330:	84 e8       	ldi	r24, 0x84	; 132
     332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     336:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     33a:	88 23       	and	r24, r24
     33c:	e4 f7       	brge	.-8      	; 0x336 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
     33e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     342:	08 95       	ret

00000344 <_ZN7Key_Pad8keyInputEv>:
char keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	while (1){
		if (sc2.pressedBack()){
     344:	8a eb       	ldi	r24, 0xBA	; 186
     346:	95 e0       	ldi	r25, 0x05	; 5
     348:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6Screen11pressedBackEv>
     34c:	88 23       	and	r24, r24
     34e:	51 f0       	breq	.+20     	; 0x364 <_ZN7Key_Pad8keyInputEv+0x20>
			sc2.stopBlink();
     350:	8a eb       	ldi	r24, 0xBA	; 186
     352:	95 e0       	ldi	r25, 0x05	; 5
     354:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
			sc2.LCD_clear();
     358:	8a eb       	ldi	r24, 0xBA	; 186
     35a:	95 e0       	ldi	r25, 0x05	; 5
     35c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
			return 'Y';
     360:	89 e5       	ldi	r24, 0x59	; 89
     362:	08 95       	ret
		}
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
     364:	88 b1       	in	r24, 0x08	; 8
     366:	8f 60       	ori	r24, 0x0F	; 15
     368:	88 b9       	out	0x08, r24	; 8
		for (int r=0; r<=3; r++){
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	44 30       	cpi	r20, 0x04	; 4
     370:	51 05       	cpc	r21, r1
     372:	0c f0       	brlt	.+2      	; 0x376 <_ZN7Key_Pad8keyInputEv+0x32>
     374:	4f c0       	rjmp	.+158    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
     376:	87 b1       	in	r24, 0x07	; 7
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	87 b9       	out	0x07, r24	; 7
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
     37c:	84 b1       	in	r24, 0x04	; 4
     37e:	88 7f       	andi	r24, 0xF8	; 248
     380:	84 b9       	out	0x04, r24	; 4
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
     382:	27 b1       	in	r18, 0x07	; 7
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	04 2e       	mov	r0, r20
     38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN7Key_Pad8keyInputEv+0x4c>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN7Key_Pad8keyInputEv+0x48>
     394:	92 2f       	mov	r25, r18
     396:	98 2b       	or	r25, r24
     398:	97 b9       	out	0x07, r25	; 7
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
     39a:	98 b1       	in	r25, 0x08	; 8
     39c:	80 95       	com	r24
     39e:	89 23       	and	r24, r25
     3a0:	88 b9       	out	0x08, r24	; 8
			for (int c=0; c<=2; c++){
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	23 30       	cpi	r18, 0x03	; 3
     3a8:	31 05       	cpc	r19, r1
     3aa:	8c f5       	brge	.+98     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				KEYCOL_PORT |= (0b00000001 << c);
     3ac:	65 b1       	in	r22, 0x05	; 5
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 2e       	mov	r0, r18
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <_ZN7Key_Pad8keyInputEv+0x76>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <_ZN7Key_Pad8keyInputEv+0x72>
     3be:	86 2b       	or	r24, r22
     3c0:	85 b9       	out	0x05, r24	; 5
				if (!(KEYCOL_PIN & (0b00000001 << c))){ // check each column in the respective row for a pressed key
     3c2:	83 b1       	in	r24, 0x03	; 3
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 2e       	mov	r0, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_ZN7Key_Pad8keyInputEv+0x8a>
     3ca:	95 95       	asr	r25
     3cc:	87 95       	ror	r24
     3ce:	0a 94       	dec	r0
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_ZN7Key_Pad8keyInputEv+0x86>
     3d2:	80 fd       	sbrc	r24, 0
     3d4:	19 c0       	rjmp	.+50     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					char pressed = keys[r][c]; // obtain the pressed key
     3d6:	ca 01       	movw	r24, r20
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	48 0f       	add	r20, r24
     3de:	59 1f       	adc	r21, r25
     3e0:	40 50       	subi	r20, 0x00	; 0
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	fa 01       	movw	r30, r20
     3e6:	e2 0f       	add	r30, r18
     3e8:	f3 1f       	adc	r31, r19
     3ea:	80 81       	ld	r24, Z
					if ((pressed!='*') & (pressed!='#')){
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	8a 32       	cpi	r24, 0x2A	; 42
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <_ZN7Key_Pad8keyInputEv+0xb0>
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	99 23       	and	r25, r25
     3f6:	31 f0       	breq	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	83 32       	cpi	r24, 0x23	; 35
     3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	91 11       	cpse	r25, r1
     402:	09 c0       	rjmp	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
						return pressed;
					}
					return 'X';
     404:	88 e5       	ldi	r24, 0x58	; 88
     406:	08 95       	ret
		for (int r=0; r<=3; r++){
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
			for (int c=0; c<=2; c++){
     408:	2f 5f       	subi	r18, 0xFF	; 255
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	cc cf       	rjmp	.-104    	; 0x3a6 <_ZN7Key_Pad8keyInputEv+0x62>
			sc2.stopBlink();
			sc2.LCD_clear();
			return 'Y';
		}
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
		for (int r=0; r<=3; r++){
     40e:	4f 5f       	subi	r20, 0xFF	; 255
     410:	5f 4f       	sbci	r21, 0xFF	; 255
     412:	ad cf       	rjmp	.-166    	; 0x36e <_ZN7Key_Pad8keyInputEv+0x2a>
					}
					return 'X';
				}
			}
		}
	return 'X';}
     414:	88 e5       	ldi	r24, 0x58	; 88
}
     416:	08 95       	ret

00000418 <_ZN7Key_Pad10pressedKeyEv>:

char Key_Pad :: pressedKey(){
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
	while (1){
	char key = keyInput();
     41e:	ce 01       	movw	r24, r28
     420:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN7Key_Pad8keyInputEv>
	if (key != 'X'){
     424:	88 35       	cpi	r24, 0x58	; 88
     426:	d9 f3       	breq	.-10     	; 0x41e <_ZN7Key_Pad10pressedKeyEv+0x6>
     428:	20 e2       	ldi	r18, 0x20	; 32
     42a:	3e e4       	ldi	r19, 0x4E	; 78
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     42c:	21 15       	cp	r18, r1
     42e:	31 05       	cpc	r19, r1
     430:	39 f0       	breq	.+14     	; 0x440 <_ZN7Key_Pad10pressedKeyEv+0x28>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     432:	e9 e1       	ldi	r30, 0x19	; 25
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <_ZN7Key_Pad10pressedKeyEv+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	31 09       	sbc	r19, r1
     43e:	f6 cf       	rjmp	.-20     	; 0x42c <_ZN7Key_Pad10pressedKeyEv+0x14>
		_delay_ms(2000);
		return key; // if a number is pressed return the pressed key
	 }
	}
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <_Z41__static_initialization_and_destruction_0ii>:
			
	
	}
		
	
}
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	49 f4       	brne	.+18     	; 0x45c <_Z41__static_initialization_and_destruction_0ii+0x16>
     44a:	6f 3f       	cpi	r22, 0xFF	; 255
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	31 f4       	brne	.+12     	; 0x45c <_Z41__static_initialization_and_destruction_0ii+0x16>
#include "Tone.h"


Screen scrn;
Key_Pad key;
Tone t(3);
     450:	63 e0       	ldi	r22, 0x03	; 3
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	8b eb       	ldi	r24, 0xBB	; 187
     456:	95 e0       	ldi	r25, 0x05	; 5
     458:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN4ToneC1Ei>
     45c:	08 95       	ret

0000045e <main>:


int main(void)
{
	ds1307_init();
     45e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z11ds1307_initv>
	scrn.LCD_Init();
     462:	8d eb       	ldi	r24, 0xBD	; 189
     464:	95 e0       	ldi	r25, 0x05	; 5
     466:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN6Screen8LCD_InitEv>
	while (1)
	{
		
		idle();
     46a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_Z4idlev>
		mainLoop();
     46e:	0e 94 3f 0c 	call	0x187e	; 0x187e <_Z8mainLoopv>
     472:	fb cf       	rjmp	.-10     	; 0x46a <main+0xc>

00000474 <_GLOBAL__sub_I_scrn>:
			
	
	}
		
	
}
     474:	6f ef       	ldi	r22, 0xFF	; 255
     476:	7f ef       	ldi	r23, 0xFF	; 255
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 23 02 	call	0x446	; 0x446 <_Z41__static_initialization_and_destruction_0ii>
     480:	08 95       	ret

00000482 <_ZN6Screen11LCD_CommandEh>:
int _a=0 , _b=0 , _c=0 , _d=0;   //assume that the Time is in ab:cd format

//this command is use to send a command to the LCD as an unsigned char
void Screen::LCD_Command(unsigned char cmnd)      
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
     482:	8b b1       	in	r24, 0x0b	; 11
     484:	8f 70       	andi	r24, 0x0F	; 15
     486:	96 2f       	mov	r25, r22
     488:	90 7f       	andi	r25, 0xF0	; 240
     48a:	89 2b       	or	r24, r25
     48c:	8b b9       	out	0x0b, r24	; 11
	LCD_Port &= ~ (1<<RS);
     48e:	8b b1       	in	r24, 0x0b	; 11
     490:	8e 7f       	andi	r24, 0xFE	; 254
     492:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
     494:	8b b1       	in	r24, 0x0b	; 11
     496:	82 60       	ori	r24, 0x02	; 2
     498:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	98 2f       	mov	r25, r24
     49e:	9a 95       	dec	r25
     4a0:	f1 f7       	brne	.-4      	; 0x49e <_ZN6Screen11LCD_CommandEh+0x1c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4a2:	9b b1       	in	r25, 0x0b	; 11
     4a4:	9d 7f       	andi	r25, 0xFD	; 253
     4a6:	9b b9       	out	0x0b, r25	; 11
     4a8:	92 e4       	ldi	r25, 0x42	; 66
     4aa:	9a 95       	dec	r25
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <_ZN6Screen11LCD_CommandEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
     4ae:	9b b1       	in	r25, 0x0b	; 11
     4b0:	20 e1       	ldi	r18, 0x10	; 16
     4b2:	62 9f       	mul	r22, r18
     4b4:	b0 01       	movw	r22, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	9f 70       	andi	r25, 0x0F	; 15
     4ba:	69 2b       	or	r22, r25
     4bc:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
     4be:	9b b1       	in	r25, 0x0b	; 11
     4c0:	92 60       	ori	r25, 0x02	; 2
     4c2:	9b b9       	out	0x0b, r25	; 11
     4c4:	8a 95       	dec	r24
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <_ZN6Screen11LCD_CommandEh+0x42>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4c8:	8b b1       	in	r24, 0x0b	; 11
     4ca:	8d 7f       	andi	r24, 0xFD	; 253
     4cc:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     4ce:	84 ef       	ldi	r24, 0xF4	; 244
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <_ZN6Screen11LCD_CommandEh+0x50>
     4d6:	08 95       	ret

000004d8 <_ZN6Screen8LCD_CharEh>:
	_delay_ms(2);
}

void Screen::LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
     4d8:	8b b1       	in	r24, 0x0b	; 11
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	96 2f       	mov	r25, r22
     4de:	90 7f       	andi	r25, 0xF0	; 240
     4e0:	89 2b       	or	r24, r25
     4e2:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<RS);		//RS = 1
     4e4:	8b b1       	in	r24, 0x0b	; 11
     4e6:	81 60       	ori	r24, 0x01	; 1
     4e8:	8b b9       	out	0x0b, r24	; 11
	LCD_Port|= (1<<EN);
     4ea:	8b b1       	in	r24, 0x0b	; 11
     4ec:	82 60       	ori	r24, 0x02	; 2
     4ee:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	98 2f       	mov	r25, r24
     4f4:	9a 95       	dec	r25
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <_ZN6Screen8LCD_CharEh+0x1c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4f8:	9b b1       	in	r25, 0x0b	; 11
     4fa:	9d 7f       	andi	r25, 0xFD	; 253
     4fc:	9b b9       	out	0x0b, r25	; 11
     4fe:	92 e4       	ldi	r25, 0x42	; 66
     500:	9a 95       	dec	r25
     502:	f1 f7       	brne	.-4      	; 0x500 <_ZN6Screen8LCD_CharEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
     504:	9b b1       	in	r25, 0x0b	; 11
     506:	20 e1       	ldi	r18, 0x10	; 16
     508:	62 9f       	mul	r22, r18
     50a:	b0 01       	movw	r22, r0
     50c:	11 24       	eor	r1, r1
     50e:	9f 70       	andi	r25, 0x0F	; 15
     510:	69 2b       	or	r22, r25
     512:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
     514:	9b b1       	in	r25, 0x0b	; 11
     516:	92 60       	ori	r25, 0x02	; 2
     518:	9b b9       	out	0x0b, r25	; 11
     51a:	8a 95       	dec	r24
     51c:	f1 f7       	brne	.-4      	; 0x51a <_ZN6Screen8LCD_CharEh+0x42>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     51e:	8b b1       	in	r24, 0x0b	; 11
     520:	8d 7f       	andi	r24, 0xFD	; 253
     522:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     524:	84 ef       	ldi	r24, 0xF4	; 244
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <_ZN6Screen8LCD_CharEh+0x50>
     52c:	08 95       	ret

0000052e <_ZN6Screen10LCD_StringEPc>:
}


//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	7c 01       	movw	r14, r24
     53c:	8b 01       	movw	r16, r22
	int i;
	for(i=0;str[i]!=0;i++)
     53e:	c0 e0       	ldi	r28, 0x00	; 0
     540:	d0 e0       	ldi	r29, 0x00	; 0
     542:	f8 01       	movw	r30, r16
     544:	ec 0f       	add	r30, r28
     546:	fd 1f       	adc	r31, r29
     548:	60 81       	ld	r22, Z
     54a:	66 23       	and	r22, r22
     54c:	29 f0       	breq	.+10     	; 0x558 <_ZN6Screen10LCD_StringEPc+0x2a>
	{
		LCD_Char (str[i]);
     54e:	c7 01       	movw	r24, r14
     550:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>

//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
     554:	21 96       	adiw	r28, 0x01	; 1
     556:	f5 cf       	rjmp	.-22     	; 0x542 <_ZN6Screen10LCD_StringEPc+0x14>
	{
		LCD_Char (str[i]);
	}
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	08 95       	ret

00000566 <_ZN6Screen8LCD_InitEv>:
}


//function to initialize the LCD dispay
void Screen::LCD_Init(void)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;			//LCD data direction is output
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	8a b9       	out	0x0a, r24	; 10
     570:	88 e8       	ldi	r24, 0x88	; 136
     572:	93 e1       	ldi	r25, 0x13	; 19
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <_ZN6Screen8LCD_InitEv+0xe>
	_delay_ms(20);
	
	LCD_Command(0x02);
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x28);
     580:	68 e2       	ldi	r22, 0x28	; 40
     582:	ce 01       	movw	r24, r28
     584:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
     588:	6c e0       	ldi	r22, 0x0C	; 12
     58a:	ce 01       	movw	r24, r28
     58c:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x06);              //Command - shift cursor to right
     590:	66 e0       	ldi	r22, 0x06	; 6
     592:	ce 01       	movw	r24, r28
     594:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x01);              //Command - Clear display
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	ce 01       	movw	r24, r28
     59c:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	
	LCD_String("Welcome");
     5a0:	68 e8       	ldi	r22, 0x88	; 136
     5a2:	74 e0       	ldi	r23, 0x04	; 4
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	80 e1       	ldi	r24, 0x10	; 16
     5ac:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
     5ae:	00 97       	sbiw	r24, 0x00	; 0
     5b0:	31 f0       	breq	.+12     	; 0x5be <_ZN6Screen8LCD_InitEv+0x58>
     5b2:	e9 e1       	ldi	r30, 0x19	; 25
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <_ZN6Screen8LCD_InitEv+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f8 cf       	rjmp	.-16     	; 0x5ae <_ZN6Screen8LCD_InitEv+0x48>
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);*/
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <_ZN6Screen9LCD_clearEv>:
}


//function to clear the display
void Screen::LCD_clear()
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24
	LCD_Command (0x01);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     5d0:	84 ef       	ldi	r24, 0xF4	; 244
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <_ZN6Screen9LCD_clearEv+0x10>
	_delay_ms(2);
	LCD_Command (0x80);
     5d8:	60 e8       	ldi	r22, 0x80	; 128
     5da:	ce 01       	movw	r24, r28
     5dc:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_ZN6Screen15Control_buttonsEv>:


char Screen::Control_buttons(){
	DDRB = 0xCF;
     5e6:	8f ec       	ldi	r24, 0xCF	; 207
     5e8:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011;
     5ea:	8a b1       	in	r24, 0x0a	; 10
     5ec:	83 7f       	andi	r24, 0xF3	; 243
     5ee:	8a b9       	out	0x0a, r24	; 10
	while (1)
	{
		if (PINB & 0b00010000){
     5f0:	1c 9b       	sbis	0x03, 4	; 3
     5f2:	0a c0       	rjmp	.+20     	; 0x608 <_ZN6Screen15Control_buttonsEv+0x22>
     5f4:	88 e9       	ldi	r24, 0x98	; 152
     5f6:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	51 f1       	breq	.+84     	; 0x650 <_ZN6Screen15Control_buttonsEv+0x6a>
     5fc:	e9 e1       	ldi	r30, 0x19	; 25
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <_ZN6Screen15Control_buttonsEv+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     604:	01 97       	sbiw	r24, 0x01	; 1
     606:	f8 cf       	rjmp	.-16     	; 0x5f8 <_ZN6Screen15Control_buttonsEv+0x12>
			_delay_ms(1500);
			return 's' ;
			break;
		}
		else if (PINB & 0b00100000){
     608:	1d 9b       	sbis	0x03, 5	; 3
     60a:	0a c0       	rjmp	.+20     	; 0x620 <_ZN6Screen15Control_buttonsEv+0x3a>
     60c:	88 e9       	ldi	r24, 0x98	; 152
     60e:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	01 f1       	breq	.+64     	; 0x654 <_ZN6Screen15Control_buttonsEv+0x6e>
     614:	e9 e1       	ldi	r30, 0x19	; 25
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <_ZN6Screen15Control_buttonsEv+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f8 cf       	rjmp	.-16     	; 0x610 <_ZN6Screen15Control_buttonsEv+0x2a>
			_delay_ms(1500);
			return 'b';
			break;
		}
		else if (PIND & 0b000000100){
     620:	4a 9b       	sbis	0x09, 2	; 9
     622:	0a c0       	rjmp	.+20     	; 0x638 <_ZN6Screen15Control_buttonsEv+0x52>
     624:	88 e9       	ldi	r24, 0x98	; 152
     626:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	b1 f0       	breq	.+44     	; 0x658 <_ZN6Screen15Control_buttonsEv+0x72>
     62c:	e9 e1       	ldi	r30, 0x19	; 25
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <_ZN6Screen15Control_buttonsEv+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	f8 cf       	rjmp	.-16     	; 0x628 <_ZN6Screen15Control_buttonsEv+0x42>
			_delay_ms(1500);
			return 'u';
			break;
		}
		else if (PIND & 0b000001000){
     638:	4b 9b       	sbis	0x09, 3	; 9
     63a:	da cf       	rjmp	.-76     	; 0x5f0 <_ZN6Screen15Control_buttonsEv+0xa>
     63c:	88 e9       	ldi	r24, 0x98	; 152
     63e:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	61 f0       	breq	.+24     	; 0x65c <_ZN6Screen15Control_buttonsEv+0x76>
     644:	e9 e1       	ldi	r30, 0x19	; 25
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <_ZN6Screen15Control_buttonsEv+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f8 cf       	rjmp	.-16     	; 0x640 <_ZN6Screen15Control_buttonsEv+0x5a>
	DDRD &= 0b11110011;
	while (1)
	{
		if (PINB & 0b00010000){
			_delay_ms(1500);
			return 's' ;
     650:	83 e7       	ldi	r24, 0x73	; 115
     652:	08 95       	ret
			break;
		}
		else if (PINB & 0b00100000){
			_delay_ms(1500);
			return 'b';
     654:	82 e6       	ldi	r24, 0x62	; 98
     656:	08 95       	ret
			break;
		}
		else if (PIND & 0b000000100){
			_delay_ms(1500);
			return 'u';
     658:	85 e7       	ldi	r24, 0x75	; 117
     65a:	08 95       	ret
			break;
		}
		else if (PIND & 0b000001000){
			_delay_ms(1500);
			return 'd';
     65c:	84 e6       	ldi	r24, 0x64	; 100
			break;
		}
		
	}
	
}
     65e:	08 95       	ret

00000660 <_ZN6Screen13pressedButtonEv>:

char Screen::pressedButton(){
	DDRB = 0xCF;
     660:	8f ec       	ldi	r24, 0xCF	; 207
     662:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011;
     664:	8a b1       	in	r24, 0x0a	; 10
     666:	83 7f       	andi	r24, 0xF3	; 243
     668:	8a b9       	out	0x0a, r24	; 10
		if (PINB & 0b00010000){
     66a:	1c 9b       	sbis	0x03, 4	; 3
     66c:	0a c0       	rjmp	.+20     	; 0x682 <_ZN6Screen13pressedButtonEv+0x22>
     66e:	88 e9       	ldi	r24, 0x98	; 152
     670:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	51 f1       	breq	.+84     	; 0x6ca <_ZN6Screen13pressedButtonEv+0x6a>
     676:	e9 e1       	ldi	r30, 0x19	; 25
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <_ZN6Screen13pressedButtonEv+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f8 cf       	rjmp	.-16     	; 0x672 <_ZN6Screen13pressedButtonEv+0x12>
			_delay_ms(1500);
			return 's' ;
		}
		else if (PINB & 0b00100000){
     682:	1d 9b       	sbis	0x03, 5	; 3
     684:	0a c0       	rjmp	.+20     	; 0x69a <_ZN6Screen13pressedButtonEv+0x3a>
     686:	88 e9       	ldi	r24, 0x98	; 152
     688:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	01 f1       	breq	.+64     	; 0x6ce <_ZN6Screen13pressedButtonEv+0x6e>
     68e:	e9 e1       	ldi	r30, 0x19	; 25
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <_ZN6Screen13pressedButtonEv+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f8 cf       	rjmp	.-16     	; 0x68a <_ZN6Screen13pressedButtonEv+0x2a>
			_delay_ms(1500);
			return 'b';
		}
		else if (PIND & 0b000000100){
     69a:	4a 9b       	sbis	0x09, 2	; 9
     69c:	0a c0       	rjmp	.+20     	; 0x6b2 <_ZN6Screen13pressedButtonEv+0x52>
     69e:	88 e9       	ldi	r24, 0x98	; 152
     6a0:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	b1 f0       	breq	.+44     	; 0x6d2 <_ZN6Screen13pressedButtonEv+0x72>
     6a6:	e9 e1       	ldi	r30, 0x19	; 25
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <_ZN6Screen13pressedButtonEv+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <_ZN6Screen13pressedButtonEv+0x42>
			_delay_ms(1500);
			return 'u';
		}
		else if (PIND & 0b000001000){
     6b2:	4b 9b       	sbis	0x09, 3	; 9
     6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <_ZN6Screen13pressedButtonEv+0x76>
     6b6:	88 e9       	ldi	r24, 0x98	; 152
     6b8:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ba:	00 97       	sbiw	r24, 0x00	; 0
     6bc:	71 f0       	breq	.+28     	; 0x6da <_ZN6Screen13pressedButtonEv+0x7a>
     6be:	e9 e1       	ldi	r30, 0x19	; 25
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_ZN6Screen13pressedButtonEv+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f8 cf       	rjmp	.-16     	; 0x6ba <_ZN6Screen13pressedButtonEv+0x5a>
char Screen::pressedButton(){
	DDRB = 0xCF;
	DDRD &= 0b11110011;
		if (PINB & 0b00010000){
			_delay_ms(1500);
			return 's' ;
     6ca:	83 e7       	ldi	r24, 0x73	; 115
     6cc:	08 95       	ret
		}
		else if (PINB & 0b00100000){
			_delay_ms(1500);
			return 'b';
     6ce:	82 e6       	ldi	r24, 0x62	; 98
     6d0:	08 95       	ret
		}
		else if (PIND & 0b000000100){
			_delay_ms(1500);
			return 'u';
     6d2:	85 e7       	ldi	r24, 0x75	; 117
     6d4:	08 95       	ret
		else if (PIND & 0b000001000){
			_delay_ms(1500);
			return 'd';
		}
		else{
			return '0';
     6d6:	80 e3       	ldi	r24, 0x30	; 48
     6d8:	08 95       	ret
			_delay_ms(1500);
			return 'u';
		}
		else if (PIND & 0b000001000){
			_delay_ms(1500);
			return 'd';
     6da:	84 e6       	ldi	r24, 0x64	; 100
		}
		else{
			return '0';
		}
	
}
     6dc:	08 95       	ret

000006de <_ZN6Screen5blinkEv>:



void Screen::blink(){
	LCD_Command(0x0F);
     6de:	6f e0       	ldi	r22, 0x0F	; 15
     6e0:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     6e4:	08 95       	ret

000006e6 <_ZN6Screen9stopBlinkEv>:
}

void Screen::stopBlink(){
	LCD_Command(0x0c);
     6e6:	6c e0       	ldi	r22, 0x0C	; 12
     6e8:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     6ec:	08 95       	ret

000006ee <_ZN6Screen13pressedSelectEv>:
}

bool  Screen::pressedSelect(){
	if (PINB & 0b00010000) {
     6ee:	1c 9b       	sbis	0x03, 4	; 3
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <_ZN6Screen13pressedSelectEv+0x18>
     6f2:	80 e1       	ldi	r24, 0x10	; 16
     6f4:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	41 f0       	breq	.+16     	; 0x70a <_ZN6Screen13pressedSelectEv+0x1c>
     6fa:	e9 e1       	ldi	r30, 0x19	; 25
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <_ZN6Screen13pressedSelectEv+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f8 cf       	rjmp	.-16     	; 0x6f6 <_ZN6Screen13pressedSelectEv+0x8>
		_delay_ms(1000);
		return true;
	}
	else {
		return false;
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	08 95       	ret
}

bool  Screen::pressedSelect(){
	if (PINB & 0b00010000) {
		_delay_ms(1000);
		return true;
     70a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else {
		return false;
	}
}
     70c:	08 95       	ret

0000070e <_ZN6Screen11pressedBackEv>:

bool  Screen::pressedBack(){
	if (PINB & 0b00100000){
     70e:	1d 9b       	sbis	0x03, 5	; 3
     710:	0a c0       	rjmp	.+20     	; 0x726 <_ZN6Screen11pressedBackEv+0x18>
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	9e e4       	ldi	r25, 0x4E	; 78
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	41 f0       	breq	.+16     	; 0x72a <_ZN6Screen11pressedBackEv+0x1c>
     71a:	e9 e1       	ldi	r30, 0x19	; 25
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	31 97       	sbiw	r30, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <_ZN6Screen11pressedBackEv+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f8 cf       	rjmp	.-16     	; 0x716 <_ZN6Screen11pressedBackEv+0x8>
		_delay_ms(2000);
		return true;
	}
	else{
		return false;
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	08 95       	ret
}

bool  Screen::pressedBack(){
	if (PINB & 0b00100000){
		_delay_ms(2000);
		return true;
     72a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
     72c:	08 95       	ret

0000072e <_Z41__static_initialization_and_destruction_0ii>:
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	49 f4       	brne	.+18     	; 0x744 <_Z41__static_initialization_and_destruction_0ii+0x16>
     732:	6f 3f       	cpi	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	31 f4       	brne	.+12     	; 0x744 <_Z41__static_initialization_and_destruction_0ii+0x16>
     738:	63 e0       	ldi	r22, 0x03	; 3
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	83 ed       	ldi	r24, 0xD3	; 211
     73e:	95 e0       	ldi	r25, 0x05	; 5
     740:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN4ToneC1Ei>
     744:	08 95       	ret

00000746 <_Z8showTimev>:
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	60 e8       	ldi	r22, 0x80	; 128
     756:	82 ed       	ldi	r24, 0xD2	; 210
     758:	95 e0       	ldi	r25, 0x05	; 5
     75a:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     75e:	0f 2e       	mov	r0, r31
     760:	fa ec       	ldi	r31, 0xCA	; 202
     762:	cf 2e       	mov	r12, r31
     764:	f5 e0       	ldi	r31, 0x05	; 5
     766:	df 2e       	mov	r13, r31
     768:	f0 2d       	mov	r31, r0
     76a:	0f 2e       	mov	r0, r31
     76c:	fb ec       	ldi	r31, 0xCB	; 203
     76e:	ef 2e       	mov	r14, r31
     770:	f5 e0       	ldi	r31, 0x05	; 5
     772:	ff 2e       	mov	r15, r31
     774:	f0 2d       	mov	r31, r0
     776:	0c ec       	ldi	r16, 0xCC	; 204
     778:	15 e0       	ldi	r17, 0x05	; 5
     77a:	2d ec       	ldi	r18, 0xCD	; 205
     77c:	35 e0       	ldi	r19, 0x05	; 5
     77e:	4e ec       	ldi	r20, 0xCE	; 206
     780:	55 e0       	ldi	r21, 0x05	; 5
     782:	6f ec       	ldi	r22, 0xCF	; 207
     784:	75 e0       	ldi	r23, 0x05	; 5
     786:	80 ed       	ldi	r24, 0xD0	; 208
     788:	95 e0       	ldi	r25, 0x05	; 5
     78a:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z14ds1307_getdatePhS_S_S_S_S_S_>
     78e:	60 e9       	ldi	r22, 0x90	; 144
     790:	74 e0       	ldi	r23, 0x04	; 4
     792:	82 ed       	ldi	r24, 0xD2	; 210
     794:	95 e0       	ldi	r25, 0x05	; 5
     796:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     79a:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <hour>
     79e:	cd ec       	ldi	r28, 0xCD	; 205
     7a0:	6c 9f       	mul	r22, r28
     7a2:	61 2d       	mov	r22, r1
     7a4:	11 24       	eor	r1, r1
     7a6:	66 95       	lsr	r22
     7a8:	66 95       	lsr	r22
     7aa:	66 95       	lsr	r22
     7ac:	60 5d       	subi	r22, 0xD0	; 208
     7ae:	82 ed       	ldi	r24, 0xD2	; 210
     7b0:	95 e0       	ldi	r25, 0x05	; 5
     7b2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     7b6:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <hour>
     7ba:	6c 9f       	mul	r22, r28
     7bc:	81 2d       	mov	r24, r1
     7be:	11 24       	eor	r1, r1
     7c0:	86 95       	lsr	r24
     7c2:	86 95       	lsr	r24
     7c4:	86 95       	lsr	r24
     7c6:	88 0f       	add	r24, r24
     7c8:	98 2f       	mov	r25, r24
     7ca:	99 0f       	add	r25, r25
     7cc:	99 0f       	add	r25, r25
     7ce:	89 0f       	add	r24, r25
     7d0:	68 1b       	sub	r22, r24
     7d2:	60 5d       	subi	r22, 0xD0	; 208
     7d4:	82 ed       	ldi	r24, 0xD2	; 210
     7d6:	95 e0       	ldi	r25, 0x05	; 5
     7d8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     7dc:	67 e9       	ldi	r22, 0x97	; 151
     7de:	74 e0       	ldi	r23, 0x04	; 4
     7e0:	82 ed       	ldi	r24, 0xD2	; 210
     7e2:	95 e0       	ldi	r25, 0x05	; 5
     7e4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     7e8:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <minute>
     7ec:	6c 9f       	mul	r22, r28
     7ee:	61 2d       	mov	r22, r1
     7f0:	11 24       	eor	r1, r1
     7f2:	66 95       	lsr	r22
     7f4:	66 95       	lsr	r22
     7f6:	66 95       	lsr	r22
     7f8:	60 5d       	subi	r22, 0xD0	; 208
     7fa:	82 ed       	ldi	r24, 0xD2	; 210
     7fc:	95 e0       	ldi	r25, 0x05	; 5
     7fe:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     802:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <minute>
     806:	6c 9f       	mul	r22, r28
     808:	81 2d       	mov	r24, r1
     80a:	11 24       	eor	r1, r1
     80c:	86 95       	lsr	r24
     80e:	86 95       	lsr	r24
     810:	86 95       	lsr	r24
     812:	88 0f       	add	r24, r24
     814:	98 2f       	mov	r25, r24
     816:	99 0f       	add	r25, r25
     818:	99 0f       	add	r25, r25
     81a:	89 0f       	add	r24, r25
     81c:	68 1b       	sub	r22, r24
     81e:	60 5d       	subi	r22, 0xD0	; 208
     820:	82 ed       	ldi	r24, 0xD2	; 210
     822:	95 e0       	ldi	r25, 0x05	; 5
     824:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     828:	67 e9       	ldi	r22, 0x97	; 151
     82a:	74 e0       	ldi	r23, 0x04	; 4
     82c:	82 ed       	ldi	r24, 0xD2	; 210
     82e:	95 e0       	ldi	r25, 0x05	; 5
     830:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     834:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <second>
     838:	6c 9f       	mul	r22, r28
     83a:	61 2d       	mov	r22, r1
     83c:	11 24       	eor	r1, r1
     83e:	66 95       	lsr	r22
     840:	66 95       	lsr	r22
     842:	66 95       	lsr	r22
     844:	60 5d       	subi	r22, 0xD0	; 208
     846:	82 ed       	ldi	r24, 0xD2	; 210
     848:	95 e0       	ldi	r25, 0x05	; 5
     84a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     84e:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <second>
     852:	6c 9f       	mul	r22, r28
     854:	81 2d       	mov	r24, r1
     856:	11 24       	eor	r1, r1
     858:	86 95       	lsr	r24
     85a:	86 95       	lsr	r24
     85c:	86 95       	lsr	r24
     85e:	88 0f       	add	r24, r24
     860:	98 2f       	mov	r25, r24
     862:	99 0f       	add	r25, r25
     864:	99 0f       	add	r25, r25
     866:	89 0f       	add	r24, r25
     868:	68 1b       	sub	r22, r24
     86a:	60 5d       	subi	r22, 0xD0	; 208
     86c:	82 ed       	ldi	r24, 0xD2	; 210
     86e:	95 e0       	ldi	r25, 0x05	; 5
     870:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     874:	60 ec       	ldi	r22, 0xC0	; 192
     876:	82 ed       	ldi	r24, 0xD2	; 210
     878:	95 e0       	ldi	r25, 0x05	; 5
     87a:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     87e:	69 e9       	ldi	r22, 0x99	; 153
     880:	74 e0       	ldi	r23, 0x04	; 4
     882:	82 ed       	ldi	r24, 0xD2	; 210
     884:	95 e0       	ldi	r25, 0x05	; 5
     886:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     88a:	60 ea       	ldi	r22, 0xA0	; 160
     88c:	74 e0       	ldi	r23, 0x04	; 4
     88e:	82 ed       	ldi	r24, 0xD2	; 210
     890:	95 e0       	ldi	r25, 0x05	; 5
     892:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     896:	60 91 d0 05 	lds	r22, 0x05D0	; 0x8005d0 <year>
     89a:	6c 9f       	mul	r22, r28
     89c:	61 2d       	mov	r22, r1
     89e:	11 24       	eor	r1, r1
     8a0:	66 95       	lsr	r22
     8a2:	66 95       	lsr	r22
     8a4:	66 95       	lsr	r22
     8a6:	60 5d       	subi	r22, 0xD0	; 208
     8a8:	82 ed       	ldi	r24, 0xD2	; 210
     8aa:	95 e0       	ldi	r25, 0x05	; 5
     8ac:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     8b0:	60 91 d0 05 	lds	r22, 0x05D0	; 0x8005d0 <year>
     8b4:	6c 9f       	mul	r22, r28
     8b6:	81 2d       	mov	r24, r1
     8b8:	11 24       	eor	r1, r1
     8ba:	86 95       	lsr	r24
     8bc:	86 95       	lsr	r24
     8be:	86 95       	lsr	r24
     8c0:	88 0f       	add	r24, r24
     8c2:	98 2f       	mov	r25, r24
     8c4:	99 0f       	add	r25, r25
     8c6:	99 0f       	add	r25, r25
     8c8:	89 0f       	add	r24, r25
     8ca:	68 1b       	sub	r22, r24
     8cc:	60 5d       	subi	r22, 0xD0	; 208
     8ce:	82 ed       	ldi	r24, 0xD2	; 210
     8d0:	95 e0       	ldi	r25, 0x05	; 5
     8d2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     8d6:	63 ea       	ldi	r22, 0xA3	; 163
     8d8:	74 e0       	ldi	r23, 0x04	; 4
     8da:	82 ed       	ldi	r24, 0xD2	; 210
     8dc:	95 e0       	ldi	r25, 0x05	; 5
     8de:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     8e2:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <month>
     8e6:	6c 9f       	mul	r22, r28
     8e8:	61 2d       	mov	r22, r1
     8ea:	11 24       	eor	r1, r1
     8ec:	66 95       	lsr	r22
     8ee:	66 95       	lsr	r22
     8f0:	66 95       	lsr	r22
     8f2:	60 5d       	subi	r22, 0xD0	; 208
     8f4:	82 ed       	ldi	r24, 0xD2	; 210
     8f6:	95 e0       	ldi	r25, 0x05	; 5
     8f8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     8fc:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <month>
     900:	6c 9f       	mul	r22, r28
     902:	81 2d       	mov	r24, r1
     904:	11 24       	eor	r1, r1
     906:	86 95       	lsr	r24
     908:	86 95       	lsr	r24
     90a:	86 95       	lsr	r24
     90c:	88 0f       	add	r24, r24
     90e:	98 2f       	mov	r25, r24
     910:	99 0f       	add	r25, r25
     912:	99 0f       	add	r25, r25
     914:	89 0f       	add	r24, r25
     916:	68 1b       	sub	r22, r24
     918:	60 5d       	subi	r22, 0xD0	; 208
     91a:	82 ed       	ldi	r24, 0xD2	; 210
     91c:	95 e0       	ldi	r25, 0x05	; 5
     91e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     922:	63 ea       	ldi	r22, 0xA3	; 163
     924:	74 e0       	ldi	r23, 0x04	; 4
     926:	82 ed       	ldi	r24, 0xD2	; 210
     928:	95 e0       	ldi	r25, 0x05	; 5
     92a:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     92e:	60 91 ce 05 	lds	r22, 0x05CE	; 0x8005ce <day>
     932:	6c 9f       	mul	r22, r28
     934:	61 2d       	mov	r22, r1
     936:	11 24       	eor	r1, r1
     938:	66 95       	lsr	r22
     93a:	66 95       	lsr	r22
     93c:	66 95       	lsr	r22
     93e:	60 5d       	subi	r22, 0xD0	; 208
     940:	82 ed       	ldi	r24, 0xD2	; 210
     942:	95 e0       	ldi	r25, 0x05	; 5
     944:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     948:	60 91 ce 05 	lds	r22, 0x05CE	; 0x8005ce <day>
     94c:	6c 9f       	mul	r22, r28
     94e:	c1 2d       	mov	r28, r1
     950:	11 24       	eor	r1, r1
     952:	c6 95       	lsr	r28
     954:	c6 95       	lsr	r28
     956:	c6 95       	lsr	r28
     958:	cc 0f       	add	r28, r28
     95a:	8c 2f       	mov	r24, r28
     95c:	88 0f       	add	r24, r24
     95e:	88 0f       	add	r24, r24
     960:	c8 0f       	add	r28, r24
     962:	6c 1b       	sub	r22, r28
     964:	60 5d       	subi	r22, 0xD0	; 208
     966:	82 ed       	ldi	r24, 0xD2	; 210
     968:	95 e0       	ldi	r25, 0x05	; 5
     96a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	df 90       	pop	r13
     97a:	cf 90       	pop	r12
     97c:	08 95       	ret

0000097e <_Z6getDayiii>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
     984:	21 e0       	ldi	r18, 0x01	; 1
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	e0 e0       	ldi	r30, 0x00	; 0
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	c2 17       	cp	r28, r18
     98e:	d3 07       	cpc	r29, r19
     990:	6c f0       	brlt	.+26     	; 0x9ac <_Z6getDayiii+0x2e>
     992:	c9 01       	movw	r24, r18
     994:	83 70       	andi	r24, 0x03	; 3
     996:	99 27       	eor	r25, r25
     998:	89 2b       	or	r24, r25
     99a:	19 f4       	brne	.+6      	; 0x9a2 <_Z6getDayiii+0x24>
     99c:	e2 59       	subi	r30, 0x92	; 146
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <_Z6getDayiii+0x28>
     9a2:	e3 59       	subi	r30, 0x93	; 147
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	2f 5f       	subi	r18, 0xFF	; 255
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	f0 cf       	rjmp	.-32     	; 0x98c <_Z6getDayiii+0xe>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	db 01       	movw	r26, r22
     9b2:	11 97       	sbiw	r26, 0x01	; 1
     9b4:	2a 17       	cp	r18, r26
     9b6:	3b 07       	cpc	r19, r27
     9b8:	3c f5       	brge	.+78     	; 0xa08 <_Z6getDayiii+0x8a>
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	de 01       	movw	r26, r28
     9be:	a3 70       	andi	r26, 0x03	; 3
     9c0:	bb 27       	eor	r27, r27
     9c2:	ab 2b       	or	r26, r27
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <_Z6getDayiii+0x4a>
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	99 23       	and	r25, r25
     9ca:	91 f0       	breq	.+36     	; 0x9f0 <_Z6getDayiii+0x72>
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	21 30       	cpi	r18, 0x01	; 1
     9d0:	31 05       	cpc	r19, r1
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <_Z6getDayiii+0x58>
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	99 23       	and	r25, r25
     9d8:	59 f0       	breq	.+22     	; 0x9f0 <_Z6getDayiii+0x72>
     9da:	d9 01       	movw	r26, r18
     9dc:	aa 0f       	add	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	a4 55       	subi	r26, 0x54	; 84
     9e2:	be 4f       	sbci	r27, 0xFE	; 254
     9e4:	8d 91       	ld	r24, X+
     9e6:	9c 91       	ld	r25, X
     9e8:	e8 0f       	add	r30, r24
     9ea:	f9 1f       	adc	r31, r25
     9ec:	31 96       	adiw	r30, 0x01	; 1
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <_Z6getDayiii+0x84>
     9f0:	d9 01       	movw	r26, r18
     9f2:	aa 0f       	add	r26, r26
     9f4:	bb 1f       	adc	r27, r27
     9f6:	a4 55       	subi	r26, 0x54	; 84
     9f8:	be 4f       	sbci	r27, 0xFE	; 254
     9fa:	8d 91       	ld	r24, X+
     9fc:	9c 91       	ld	r25, X
     9fe:	e8 0f       	add	r30, r24
     a00:	f9 1f       	adc	r31, r25
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	d4 cf       	rjmp	.-88     	; 0x9b0 <_Z6getDayiii+0x32>
     a08:	4e 0f       	add	r20, r30
     a0a:	5f 1f       	adc	r21, r31
     a0c:	ca 01       	movw	r24, r20
     a0e:	05 96       	adiw	r24, 0x05	; 5
     a10:	67 e0       	ldi	r22, 0x07	; 7
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <_Z9set_alarmv>:
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <ith_alarm>
     a36:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <ith_alarm+0x1>
     a3a:	05 97       	sbiw	r24, 0x05	; 5
     a3c:	01 f5       	brne	.+64     	; 0xa7e <_Z9set_alarmv+0x60>
     a3e:	82 ed       	ldi	r24, 0xD2	; 210
     a40:	95 e0       	ldi	r25, 0x05	; 5
     a42:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     a46:	65 ea       	ldi	r22, 0xA5	; 165
     a48:	74 e0       	ldi	r23, 0x04	; 4
     a4a:	82 ed       	ldi	r24, 0xD2	; 210
     a4c:	95 e0       	ldi	r25, 0x05	; 5
     a4e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     a52:	60 ec       	ldi	r22, 0xC0	; 192
     a54:	82 ed       	ldi	r24, 0xD2	; 210
     a56:	95 e0       	ldi	r25, 0x05	; 5
     a58:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     a5c:	63 eb       	ldi	r22, 0xB3	; 179
     a5e:	74 e0       	ldi	r23, 0x04	; 4
     a60:	82 ed       	ldi	r24, 0xD2	; 210
     a62:	95 e0       	ldi	r25, 0x05	; 5
     a64:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     a68:	80 e2       	ldi	r24, 0x20	; 32
     a6a:	9e e4       	ldi	r25, 0x4E	; 78
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	09 f4       	brne	.+2      	; 0xa72 <_Z9set_alarmv+0x54>
     a70:	44 c1       	rjmp	.+648    	; 0xcfa <_Z9set_alarmv+0x2dc>
     a72:	e9 e1       	ldi	r30, 0x19	; 25
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	31 97       	sbiw	r30, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <_Z9set_alarmv+0x58>
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f7 cf       	rjmp	.-18     	; 0xa6c <_Z9set_alarmv+0x4e>
     a7e:	82 ed       	ldi	r24, 0xD2	; 210
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     a86:	6c eb       	ldi	r22, 0xBC	; 188
     a88:	74 e0       	ldi	r23, 0x04	; 4
     a8a:	82 ed       	ldi	r24, 0xD2	; 210
     a8c:	95 e0       	ldi	r25, 0x05	; 5
     a8e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     a92:	60 e8       	ldi	r22, 0x80	; 128
     a94:	82 ed       	ldi	r24, 0xD2	; 210
     a96:	95 e0       	ldi	r25, 0x05	; 5
     a98:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     a9c:	82 ed       	ldi	r24, 0xD2	; 210
     a9e:	95 e0       	ldi	r25, 0x05	; 5
     aa0:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Screen5blinkEv>
     aa4:	81 ed       	ldi	r24, 0xD1	; 209
     aa6:	95 e0       	ldi	r25, 0x05	; 5
     aa8:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     aac:	c8 2f       	mov	r28, r24
     aae:	89 35       	cpi	r24, 0x59	; 89
     ab0:	09 f4       	brne	.+2      	; 0xab4 <_Z9set_alarmv+0x96>
     ab2:	23 c1       	rjmp	.+582    	; 0xcfa <_Z9set_alarmv+0x2dc>
     ab4:	68 2f       	mov	r22, r24
     ab6:	82 ed       	ldi	r24, 0xD2	; 210
     ab8:	95 e0       	ldi	r25, 0x05	; 5
     aba:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     abe:	81 ed       	ldi	r24, 0xD1	; 209
     ac0:	95 e0       	ldi	r25, 0x05	; 5
     ac2:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     ac6:	08 2f       	mov	r16, r24
     ac8:	89 35       	cpi	r24, 0x59	; 89
     aca:	09 f4       	brne	.+2      	; 0xace <_Z9set_alarmv+0xb0>
     acc:	16 c1       	rjmp	.+556    	; 0xcfa <_Z9set_alarmv+0x2dc>
     ace:	68 2f       	mov	r22, r24
     ad0:	82 ed       	ldi	r24, 0xD2	; 210
     ad2:	95 e0       	ldi	r25, 0x05	; 5
     ad4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     ad8:	64 ec       	ldi	r22, 0xC4	; 196
     ada:	74 e0       	ldi	r23, 0x04	; 4
     adc:	82 ed       	ldi	r24, 0xD2	; 210
     ade:	95 e0       	ldi	r25, 0x05	; 5
     ae0:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     ae4:	81 ed       	ldi	r24, 0xD1	; 209
     ae6:	95 e0       	ldi	r25, 0x05	; 5
     ae8:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     aec:	f8 2e       	mov	r15, r24
     aee:	89 e5       	ldi	r24, 0x59	; 89
     af0:	f8 16       	cp	r15, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <_Z9set_alarmv+0xd8>
     af4:	02 c1       	rjmp	.+516    	; 0xcfa <_Z9set_alarmv+0x2dc>
     af6:	6f 2d       	mov	r22, r15
     af8:	82 ed       	ldi	r24, 0xD2	; 210
     afa:	95 e0       	ldi	r25, 0x05	; 5
     afc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     b00:	81 ed       	ldi	r24, 0xD1	; 209
     b02:	95 e0       	ldi	r25, 0x05	; 5
     b04:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     b08:	d8 2e       	mov	r13, r24
     b0a:	89 e5       	ldi	r24, 0x59	; 89
     b0c:	d8 16       	cp	r13, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <_Z9set_alarmv+0xf4>
     b10:	f4 c0       	rjmp	.+488    	; 0xcfa <_Z9set_alarmv+0x2dc>
     b12:	6d 2d       	mov	r22, r13
     b14:	82 ed       	ldi	r24, 0xD2	; 210
     b16:	95 e0       	ldi	r25, 0x05	; 5
     b18:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     b1c:	82 ed       	ldi	r24, 0xD2	; 210
     b1e:	95 e0       	ldi	r25, 0x05	; 5
     b20:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
     b24:	80 e2       	ldi	r24, 0x20	; 32
     b26:	9e e4       	ldi	r25, 0x4E	; 78
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	31 f0       	breq	.+12     	; 0xb38 <_Z9set_alarmv+0x11a>
     b2c:	e9 e1       	ldi	r30, 0x19	; 25
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <_Z9set_alarmv+0x112>
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	f8 cf       	rjmp	.-16     	; 0xb28 <_Z9set_alarmv+0x10a>
     b38:	d0 e0       	ldi	r29, 0x00	; 0
     b3a:	e0 97       	sbiw	r28, 0x30	; 48
     b3c:	9e 01       	movw	r18, r28
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	ce 01       	movw	r24, r28
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	00 53       	subi	r16, 0x30	; 48
     b58:	11 09       	sbc	r17, r1
     b5a:	80 0f       	add	r24, r16
     b5c:	91 1f       	adc	r25, r17
     b5e:	48 97       	sbiw	r24, 0x18	; 24
     b60:	c4 f4       	brge	.+48     	; 0xb92 <_Z9set_alarmv+0x174>
     b62:	8f 2d       	mov	r24, r15
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	c0 97       	sbiw	r24, 0x30	; 48
     b68:	7c 01       	movw	r14, r24
     b6a:	ee 0c       	add	r14, r14
     b6c:	ff 1c       	adc	r15, r15
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	e8 0e       	add	r14, r24
     b7c:	f9 1e       	adc	r15, r25
     b7e:	cd 2c       	mov	r12, r13
     b80:	d1 2c       	mov	r13, r1
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	c8 1a       	sub	r12, r24
     b86:	d1 08       	sbc	r13, r1
     b88:	c7 01       	movw	r24, r14
     b8a:	8c 0d       	add	r24, r12
     b8c:	9d 1d       	adc	r25, r13
     b8e:	cc 97       	sbiw	r24, 0x3c	; 60
     b90:	bc f0       	brlt	.+46     	; 0xbc0 <_Z9set_alarmv+0x1a2>
     b92:	82 ed       	ldi	r24, 0xD2	; 210
     b94:	95 e0       	ldi	r25, 0x05	; 5
     b96:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     b9a:	68 ec       	ldi	r22, 0xC8	; 200
     b9c:	74 e0       	ldi	r23, 0x04	; 4
     b9e:	82 ed       	ldi	r24, 0xD2	; 210
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     ba6:	80 e1       	ldi	r24, 0x10	; 16
     ba8:	97 e2       	ldi	r25, 0x27	; 39
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	31 f0       	breq	.+12     	; 0xbba <_Z9set_alarmv+0x19c>
     bae:	e9 e1       	ldi	r30, 0x19	; 25
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <_Z9set_alarmv+0x194>
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f8 cf       	rjmp	.-16     	; 0xbaa <_Z9set_alarmv+0x18c>
     bba:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_Z9set_alarmv>
     bbe:	9d c0       	rjmp	.+314    	; 0xcfa <_Z9set_alarmv+0x2dc>
     bc0:	82 ed       	ldi	r24, 0xD2	; 210
     bc2:	95 e0       	ldi	r25, 0x05	; 5
     bc4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     bc8:	69 ed       	ldi	r22, 0xD9	; 217
     bca:	74 e0       	ldi	r23, 0x04	; 4
     bcc:	82 ed       	ldi	r24, 0xD2	; 210
     bce:	95 e0       	ldi	r25, 0x05	; 5
     bd0:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     bd4:	80 e1       	ldi	r24, 0x10	; 16
     bd6:	97 e2       	ldi	r25, 0x27	; 39
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	31 f0       	breq	.+12     	; 0xbe8 <_Z9set_alarmv+0x1ca>
     bdc:	e9 e1       	ldi	r30, 0x19	; 25
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <_Z9set_alarmv+0x1c2>
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f8 cf       	rjmp	.-16     	; 0xbd8 <_Z9set_alarmv+0x1ba>
     be8:	82 ed       	ldi	r24, 0xD2	; 210
     bea:	95 e0       	ldi	r25, 0x05	; 5
     bec:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     bf0:	6c e0       	ldi	r22, 0x0C	; 12
     bf2:	71 e0       	ldi	r23, 0x01	; 1
     bf4:	82 ed       	ldi	r24, 0xD2	; 210
     bf6:	95 e0       	ldi	r25, 0x05	; 5
     bf8:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     bfc:	a1 2c       	mov	r10, r1
     bfe:	b1 2c       	mov	r11, r1
     c00:	b5 01       	movw	r22, r10
     c02:	83 ed       	ldi	r24, 0xD3	; 211
     c04:	95 e0       	ldi	r25, 0x05	; 5
     c06:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN4Tone10playMelodyEi>
     c0a:	84 36       	cpi	r24, 0x64	; 100
     c0c:	49 f4       	brne	.+18     	; 0xc20 <_Z9set_alarmv+0x202>
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	a8 16       	cp	r10, r24
     c12:	b1 04       	cpc	r11, r1
     c14:	09 f4       	brne	.+2      	; 0xc18 <_Z9set_alarmv+0x1fa>
     c16:	58 c0       	rjmp	.+176    	; 0xcc8 <_Z9set_alarmv+0x2aa>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	a8 1a       	sub	r10, r24
     c1c:	b8 0a       	sbc	r11, r24
     c1e:	5b c0       	rjmp	.+182    	; 0xcd6 <_Z9set_alarmv+0x2b8>
     c20:	85 37       	cpi	r24, 0x75	; 117
     c22:	41 f4       	brne	.+16     	; 0xc34 <_Z9set_alarmv+0x216>
     c24:	a1 14       	cp	r10, r1
     c26:	b1 04       	cpc	r11, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <_Z9set_alarmv+0x20e>
     c2a:	51 c0       	rjmp	.+162    	; 0xcce <_Z9set_alarmv+0x2b0>
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	a8 1a       	sub	r10, r24
     c30:	b1 08       	sbc	r11, r1
     c32:	51 c0       	rjmp	.+162    	; 0xcd6 <_Z9set_alarmv+0x2b8>
     c34:	82 36       	cpi	r24, 0x62	; 98
     c36:	09 f4       	brne	.+2      	; 0xc3a <_Z9set_alarmv+0x21c>
     c38:	60 c0       	rjmp	.+192    	; 0xcfa <_Z9set_alarmv+0x2dc>
     c3a:	83 37       	cpi	r24, 0x73	; 115
     c3c:	09 f0       	breq	.+2      	; 0xc40 <_Z9set_alarmv+0x222>
     c3e:	4b c0       	rjmp	.+150    	; 0xcd6 <_Z9set_alarmv+0x2b8>
     c40:	20 91 be 05 	lds	r18, 0x05BE	; 0x8005be <ith_alarm>
     c44:	30 91 bf 05 	lds	r19, 0x05BF	; 0x8005bf <ith_alarm+0x1>
     c48:	88 ee       	ldi	r24, 0xE8	; 232
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	c8 9f       	mul	r28, r24
     c4e:	a0 01       	movw	r20, r0
     c50:	c9 9f       	mul	r28, r25
     c52:	50 0d       	add	r21, r0
     c54:	d8 9f       	mul	r29, r24
     c56:	50 0d       	add	r21, r0
     c58:	11 24       	eor	r1, r1
     c5a:	64 e6       	ldi	r22, 0x64	; 100
     c5c:	60 9f       	mul	r22, r16
     c5e:	c0 01       	movw	r24, r0
     c60:	61 9f       	mul	r22, r17
     c62:	90 0d       	add	r25, r0
     c64:	11 24       	eor	r1, r1
     c66:	84 0f       	add	r24, r20
     c68:	95 1f       	adc	r25, r21
     c6a:	e8 0e       	add	r14, r24
     c6c:	f9 1e       	adc	r15, r25
     c6e:	ce 0c       	add	r12, r14
     c70:	df 1c       	adc	r13, r15
     c72:	c9 01       	movw	r24, r18
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	fc 01       	movw	r30, r24
     c7a:	e2 53       	subi	r30, 0x32	; 50
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	d1 82       	std	Z+1, r13	; 0x01
     c80:	c0 82       	st	Z, r12
     c82:	fc 01       	movw	r30, r24
     c84:	ec 53       	subi	r30, 0x3C	; 60
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	b1 82       	std	Z+1, r11	; 0x01
     c8a:	a0 82       	st	Z, r10
     c8c:	82 ed       	ldi	r24, 0xD2	; 210
     c8e:	95 e0       	ldi	r25, 0x05	; 5
     c90:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     c94:	67 ee       	ldi	r22, 0xE7	; 231
     c96:	74 e0       	ldi	r23, 0x04	; 4
     c98:	82 ed       	ldi	r24, 0xD2	; 210
     c9a:	95 e0       	ldi	r25, 0x05	; 5
     c9c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     ca0:	80 e1       	ldi	r24, 0x10	; 16
     ca2:	97 e2       	ldi	r25, 0x27	; 39
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	31 f0       	breq	.+12     	; 0xcb4 <_Z9set_alarmv+0x296>
     ca8:	e9 e1       	ldi	r30, 0x19	; 25
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <_Z9set_alarmv+0x28e>
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f8 cf       	rjmp	.-16     	; 0xca4 <_Z9set_alarmv+0x286>
     cb4:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <ith_alarm>
     cb8:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <ith_alarm+0x1>
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <ith_alarm+0x1>
     cc2:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <ith_alarm>
     cc6:	19 c0       	rjmp	.+50     	; 0xcfa <_Z9set_alarmv+0x2dc>
     cc8:	a1 2c       	mov	r10, r1
     cca:	b1 2c       	mov	r11, r1
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <_Z9set_alarmv+0x2b8>
     cce:	68 94       	set
     cd0:	aa 24       	eor	r10, r10
     cd2:	a2 f8       	bld	r10, 2
     cd4:	b1 2c       	mov	r11, r1
     cd6:	82 ed       	ldi	r24, 0xD2	; 210
     cd8:	95 e0       	ldi	r25, 0x05	; 5
     cda:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     cde:	b5 01       	movw	r22, r10
     ce0:	62 95       	swap	r22
     ce2:	72 95       	swap	r23
     ce4:	70 7f       	andi	r23, 0xF0	; 240
     ce6:	76 27       	eor	r23, r22
     ce8:	60 7f       	andi	r22, 0xF0	; 240
     cea:	76 27       	eor	r23, r22
     cec:	64 5f       	subi	r22, 0xF4	; 244
     cee:	7e 4f       	sbci	r23, 0xFE	; 254
     cf0:	82 ed       	ldi	r24, 0xD2	; 210
     cf2:	95 e0       	ldi	r25, 0x05	; 5
     cf4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     cf8:	83 cf       	rjmp	.-250    	; 0xc00 <_Z9set_alarmv+0x1e2>
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	08 95       	ret

00000d10 <_Z11deleteAlarmv>:
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <alarmArray>
     d24:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <alarmArray+0x1>
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	b1 f4       	brne	.+44     	; 0xd58 <_Z11deleteAlarmv+0x48>
     d2c:	82 ed       	ldi	r24, 0xD2	; 210
     d2e:	95 e0       	ldi	r25, 0x05	; 5
     d30:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     d34:	66 ef       	ldi	r22, 0xF6	; 246
     d36:	74 e0       	ldi	r23, 0x04	; 4
     d38:	82 ed       	ldi	r24, 0xD2	; 210
     d3a:	95 e0       	ldi	r25, 0x05	; 5
     d3c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     d40:	61 e3       	ldi	r22, 0x31	; 49
     d42:	82 ed       	ldi	r24, 0xD2	; 210
     d44:	95 e0       	ldi	r25, 0x05	; 5
     d46:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     d4a:	68 ef       	ldi	r22, 0xF8	; 248
     d4c:	74 e0       	ldi	r23, 0x04	; 4
     d4e:	82 ed       	ldi	r24, 0xD2	; 210
     d50:	95 e0       	ldi	r25, 0x05	; 5
     d52:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     d56:	4c c0       	rjmp	.+152    	; 0xdf0 <_Z11deleteAlarmv+0xe0>
     d58:	82 ed       	ldi	r24, 0xD2	; 210
     d5a:	95 e0       	ldi	r25, 0x05	; 5
     d5c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     d60:	66 ef       	ldi	r22, 0xF6	; 246
     d62:	74 e0       	ldi	r23, 0x04	; 4
     d64:	82 ed       	ldi	r24, 0xD2	; 210
     d66:	95 e0       	ldi	r25, 0x05	; 5
     d68:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     d6c:	61 e3       	ldi	r22, 0x31	; 49
     d6e:	82 ed       	ldi	r24, 0xD2	; 210
     d70:	95 e0       	ldi	r25, 0x05	; 5
     d72:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     d76:	6f ef       	ldi	r22, 0xFF	; 255
     d78:	74 e0       	ldi	r23, 0x04	; 4
     d7a:	82 ed       	ldi	r24, 0xD2	; 210
     d7c:	95 e0       	ldi	r25, 0x05	; 5
     d7e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     d82:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <alarmArray>
     d86:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <alarmArray+0x1>
     d8a:	c9 01       	movw	r24, r18
     d8c:	64 e6       	ldi	r22, 0x64	; 100
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     d94:	7b 01       	movw	r14, r22
     d96:	8c 01       	movw	r16, r24
     d98:	c9 01       	movw	r24, r18
     d9a:	68 ee       	ldi	r22, 0xE8	; 232
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     da2:	60 5d       	subi	r22, 0xD0	; 208
     da4:	82 ed       	ldi	r24, 0xD2	; 210
     da6:	95 e0       	ldi	r25, 0x05	; 5
     da8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     dac:	ca e0       	ldi	r28, 0x0A	; 10
     dae:	d0 e0       	ldi	r29, 0x00	; 0
     db0:	c7 01       	movw	r24, r14
     db2:	be 01       	movw	r22, r28
     db4:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     db8:	60 e3       	ldi	r22, 0x30	; 48
     dba:	68 0f       	add	r22, r24
     dbc:	82 ed       	ldi	r24, 0xD2	; 210
     dbe:	95 e0       	ldi	r25, 0x05	; 5
     dc0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     dc4:	67 e9       	ldi	r22, 0x97	; 151
     dc6:	74 e0       	ldi	r23, 0x04	; 4
     dc8:	82 ed       	ldi	r24, 0xD2	; 210
     dca:	95 e0       	ldi	r25, 0x05	; 5
     dcc:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     dd0:	c8 01       	movw	r24, r16
     dd2:	be 01       	movw	r22, r28
     dd4:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     dd8:	c8 2f       	mov	r28, r24
     dda:	60 5d       	subi	r22, 0xD0	; 208
     ddc:	82 ed       	ldi	r24, 0xD2	; 210
     dde:	95 e0       	ldi	r25, 0x05	; 5
     de0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     de4:	60 e3       	ldi	r22, 0x30	; 48
     de6:	6c 0f       	add	r22, r28
     de8:	82 ed       	ldi	r24, 0xD2	; 210
     dea:	95 e0       	ldi	r25, 0x05	; 5
     dec:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     df0:	c0 e0       	ldi	r28, 0x00	; 0
     df2:	d0 e0       	ldi	r29, 0x00	; 0
     df4:	82 ed       	ldi	r24, 0xD2	; 210
     df6:	95 e0       	ldi	r25, 0x05	; 5
     df8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN6Screen15Control_buttonsEv>
     dfc:	84 36       	cpi	r24, 0x64	; 100
     dfe:	31 f4       	brne	.+12     	; 0xe0c <_Z11deleteAlarmv+0xfc>
     e00:	c4 30       	cpi	r28, 0x04	; 4
     e02:	d1 05       	cpc	r29, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <_Z11deleteAlarmv+0xf8>
     e06:	68 c0       	rjmp	.+208    	; 0xed8 <_Z11deleteAlarmv+0x1c8>
     e08:	21 96       	adiw	r28, 0x01	; 1
     e0a:	6b c0       	rjmp	.+214    	; 0xee2 <_Z11deleteAlarmv+0x1d2>
     e0c:	85 37       	cpi	r24, 0x75	; 117
     e0e:	29 f4       	brne	.+10     	; 0xe1a <_Z11deleteAlarmv+0x10a>
     e10:	20 97       	sbiw	r28, 0x00	; 0
     e12:	09 f4       	brne	.+2      	; 0xe16 <_Z11deleteAlarmv+0x106>
     e14:	64 c0       	rjmp	.+200    	; 0xede <_Z11deleteAlarmv+0x1ce>
     e16:	21 97       	sbiw	r28, 0x01	; 1
     e18:	64 c0       	rjmp	.+200    	; 0xee2 <_Z11deleteAlarmv+0x1d2>
     e1a:	83 37       	cpi	r24, 0x73	; 115
     e1c:	09 f0       	breq	.+2      	; 0xe20 <_Z11deleteAlarmv+0x110>
     e1e:	59 c0       	rjmp	.+178    	; 0xed2 <_Z11deleteAlarmv+0x1c2>
     e20:	82 ed       	ldi	r24, 0xD2	; 210
     e22:	95 e0       	ldi	r25, 0x05	; 5
     e24:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     e28:	62 e0       	ldi	r22, 0x02	; 2
     e2a:	75 e0       	ldi	r23, 0x05	; 5
     e2c:	82 ed       	ldi	r24, 0xD2	; 210
     e2e:	95 e0       	ldi	r25, 0x05	; 5
     e30:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     e34:	60 ec       	ldi	r22, 0xC0	; 192
     e36:	82 ed       	ldi	r24, 0xD2	; 210
     e38:	95 e0       	ldi	r25, 0x05	; 5
     e3a:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     e3e:	60 e1       	ldi	r22, 0x10	; 16
     e40:	75 e0       	ldi	r23, 0x05	; 5
     e42:	82 ed       	ldi	r24, 0xD2	; 210
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     e4a:	82 ed       	ldi	r24, 0xD2	; 210
     e4c:	95 e0       	ldi	r25, 0x05	; 5
     e4e:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
     e52:	88 23       	and	r24, r24
     e54:	b1 f1       	breq	.+108    	; 0xec2 <_Z11deleteAlarmv+0x1b2>
     e56:	ce 01       	movw	r24, r28
     e58:	84 30       	cpi	r24, 0x04	; 4
     e5a:	91 05       	cpc	r25, r1
     e5c:	f4 f4       	brge	.+60     	; 0xe9a <_Z11deleteAlarmv+0x18a>
     e5e:	ac 01       	movw	r20, r24
     e60:	4f 5f       	subi	r20, 0xFF	; 255
     e62:	5f 4f       	sbci	r21, 0xFF	; 255
     e64:	9a 01       	movw	r18, r20
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	f9 01       	movw	r30, r18
     e6c:	e2 53       	subi	r30, 0x32	; 50
     e6e:	fe 4f       	sbci	r31, 0xFE	; 254
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	fc 01       	movw	r30, r24
     e7a:	e2 53       	subi	r30, 0x32	; 50
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	71 83       	std	Z+1, r23	; 0x01
     e80:	60 83       	st	Z, r22
     e82:	f9 01       	movw	r30, r18
     e84:	ec 53       	subi	r30, 0x3C	; 60
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	20 81       	ld	r18, Z
     e8a:	31 81       	ldd	r19, Z+1	; 0x01
     e8c:	fc 01       	movw	r30, r24
     e8e:	ec 53       	subi	r30, 0x3C	; 60
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	31 83       	std	Z+1, r19	; 0x01
     e94:	20 83       	st	Z, r18
     e96:	ca 01       	movw	r24, r20
     e98:	df cf       	rjmp	.-66     	; 0xe58 <_Z11deleteAlarmv+0x148>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	9f ef       	ldi	r25, 0xFF	; 255
     e9e:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <alarmArray+0x9>
     ea2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <alarmArray+0x8>
     ea6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <alarmToneArray+0x9>
     eaa:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <alarmToneArray+0x8>
     eae:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <ith_alarm>
     eb2:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <ith_alarm+0x1>
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <ith_alarm+0x1>
     ebc:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <ith_alarm>
     ec0:	10 c0       	rjmp	.+32     	; 0xee2 <_Z11deleteAlarmv+0x1d2>
     ec2:	82 ed       	ldi	r24, 0xD2	; 210
     ec4:	95 e0       	ldi	r25, 0x05	; 5
     ec6:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6Screen11pressedBackEv>
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <_Z11deleteAlarmv+0x1c0>
     ece:	bd cf       	rjmp	.-134    	; 0xe4a <_Z11deleteAlarmv+0x13a>
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <_Z11deleteAlarmv+0x1d2>
     ed2:	82 36       	cpi	r24, 0x62	; 98
     ed4:	31 f4       	brne	.+12     	; 0xee2 <_Z11deleteAlarmv+0x1d2>
     ed6:	76 c0       	rjmp	.+236    	; 0xfc4 <_Z11deleteAlarmv+0x2b4>
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	d0 e0       	ldi	r29, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_Z11deleteAlarmv+0x1d2>
     ede:	c4 e0       	ldi	r28, 0x04	; 4
     ee0:	d0 e0       	ldi	r29, 0x00	; 0
     ee2:	fe 01       	movw	r30, r28
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	e2 53       	subi	r30, 0x32	; 50
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	b9 f4       	brne	.+46     	; 0xf22 <_Z11deleteAlarmv+0x212>
     ef4:	82 ed       	ldi	r24, 0xD2	; 210
     ef6:	95 e0       	ldi	r25, 0x05	; 5
     ef8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     efc:	66 ef       	ldi	r22, 0xF6	; 246
     efe:	74 e0       	ldi	r23, 0x04	; 4
     f00:	82 ed       	ldi	r24, 0xD2	; 210
     f02:	95 e0       	ldi	r25, 0x05	; 5
     f04:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     f08:	6c 2f       	mov	r22, r28
     f0a:	6f 5c       	subi	r22, 0xCF	; 207
     f0c:	82 ed       	ldi	r24, 0xD2	; 210
     f0e:	95 e0       	ldi	r25, 0x05	; 5
     f10:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     f14:	68 ef       	ldi	r22, 0xF8	; 248
     f16:	74 e0       	ldi	r23, 0x04	; 4
     f18:	82 ed       	ldi	r24, 0xD2	; 210
     f1a:	95 e0       	ldi	r25, 0x05	; 5
     f1c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     f20:	69 cf       	rjmp	.-302    	; 0xdf4 <_Z11deleteAlarmv+0xe4>
     f22:	82 ed       	ldi	r24, 0xD2	; 210
     f24:	95 e0       	ldi	r25, 0x05	; 5
     f26:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     f2a:	66 ef       	ldi	r22, 0xF6	; 246
     f2c:	74 e0       	ldi	r23, 0x04	; 4
     f2e:	82 ed       	ldi	r24, 0xD2	; 210
     f30:	95 e0       	ldi	r25, 0x05	; 5
     f32:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     f36:	6c 2f       	mov	r22, r28
     f38:	6f 5c       	subi	r22, 0xCF	; 207
     f3a:	82 ed       	ldi	r24, 0xD2	; 210
     f3c:	95 e0       	ldi	r25, 0x05	; 5
     f3e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	74 e0       	ldi	r23, 0x04	; 4
     f46:	82 ed       	ldi	r24, 0xD2	; 210
     f48:	95 e0       	ldi	r25, 0x05	; 5
     f4a:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     f4e:	fe 01       	movw	r30, r28
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	e2 53       	subi	r30, 0x32	; 50
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	20 81       	ld	r18, Z
     f5a:	31 81       	ldd	r19, Z+1	; 0x01
     f5c:	c9 01       	movw	r24, r18
     f5e:	64 e6       	ldi	r22, 0x64	; 100
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     f66:	6b 01       	movw	r12, r22
     f68:	7c 01       	movw	r14, r24
     f6a:	c9 01       	movw	r24, r18
     f6c:	68 ee       	ldi	r22, 0xE8	; 232
     f6e:	73 e0       	ldi	r23, 0x03	; 3
     f70:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     f74:	60 5d       	subi	r22, 0xD0	; 208
     f76:	82 ed       	ldi	r24, 0xD2	; 210
     f78:	95 e0       	ldi	r25, 0x05	; 5
     f7a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     f7e:	0a e0       	ldi	r16, 0x0A	; 10
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	c6 01       	movw	r24, r12
     f84:	b8 01       	movw	r22, r16
     f86:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     f8a:	60 e3       	ldi	r22, 0x30	; 48
     f8c:	68 0f       	add	r22, r24
     f8e:	82 ed       	ldi	r24, 0xD2	; 210
     f90:	95 e0       	ldi	r25, 0x05	; 5
     f92:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     f96:	67 e9       	ldi	r22, 0x97	; 151
     f98:	74 e0       	ldi	r23, 0x04	; 4
     f9a:	82 ed       	ldi	r24, 0xD2	; 210
     f9c:	95 e0       	ldi	r25, 0x05	; 5
     f9e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     fa2:	c7 01       	movw	r24, r14
     fa4:	b8 01       	movw	r22, r16
     fa6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
     faa:	18 2f       	mov	r17, r24
     fac:	60 5d       	subi	r22, 0xD0	; 208
     fae:	82 ed       	ldi	r24, 0xD2	; 210
     fb0:	95 e0       	ldi	r25, 0x05	; 5
     fb2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     fb6:	60 e3       	ldi	r22, 0x30	; 48
     fb8:	61 0f       	add	r22, r17
     fba:	82 ed       	ldi	r24, 0xD2	; 210
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
     fc2:	18 cf       	rjmp	.-464    	; 0xdf4 <_Z11deleteAlarmv+0xe4>
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	df 90       	pop	r13
     fd2:	cf 90       	pop	r12
     fd4:	08 95       	ret

00000fd6 <_Z12factoryResetv>:
     fd6:	cf 92       	push	r12
     fd8:	ef 92       	push	r14
     fda:	0f 93       	push	r16
     fdc:	82 ed       	ldi	r24, 0xD2	; 210
     fde:	95 e0       	ldi	r25, 0x05	; 5
     fe0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
     fe4:	62 e0       	ldi	r22, 0x02	; 2
     fe6:	75 e0       	ldi	r23, 0x05	; 5
     fe8:	82 ed       	ldi	r24, 0xD2	; 210
     fea:	95 e0       	ldi	r25, 0x05	; 5
     fec:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
     ff0:	60 ec       	ldi	r22, 0xC0	; 192
     ff2:	82 ed       	ldi	r24, 0xD2	; 210
     ff4:	95 e0       	ldi	r25, 0x05	; 5
     ff6:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
     ffa:	60 e1       	ldi	r22, 0x10	; 16
     ffc:	75 e0       	ldi	r23, 0x05	; 5
     ffe:	82 ed       	ldi	r24, 0xD2	; 210
    1000:	95 e0       	ldi	r25, 0x05	; 5
    1002:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1006:	82 ed       	ldi	r24, 0xD2	; 210
    1008:	95 e0       	ldi	r25, 0x05	; 5
    100a:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    100e:	88 23       	and	r24, r24
    1010:	09 f4       	brne	.+2      	; 0x1014 <_Z12factoryResetv+0x3e>
    1012:	aa c0       	rjmp	.+340    	; 0x1168 <_Z12factoryResetv+0x192>
    1014:	c1 2c       	mov	r12, r1
    1016:	e1 2c       	mov	r14, r1
    1018:	00 e0       	ldi	r16, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14ds1307_setdatehhhhhhh>
    1026:	61 e2       	ldi	r22, 0x21	; 33
    1028:	75 e0       	ldi	r23, 0x05	; 5
    102a:	82 ed       	ldi	r24, 0xD2	; 210
    102c:	95 e0       	ldi	r25, 0x05	; 5
    102e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1032:	80 e1       	ldi	r24, 0x10	; 16
    1034:	97 e2       	ldi	r25, 0x27	; 39
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	31 f0       	breq	.+12     	; 0x1046 <_Z12factoryResetv+0x70>
    103a:	e9 e1       	ldi	r30, 0x19	; 25
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <_Z12factoryResetv+0x68>
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f8 cf       	rjmp	.-16     	; 0x1036 <_Z12factoryResetv+0x60>
    1046:	6d e2       	ldi	r22, 0x2D	; 45
    1048:	75 e0       	ldi	r23, 0x05	; 5
    104a:	82 ed       	ldi	r24, 0xD2	; 210
    104c:	95 e0       	ldi	r25, 0x05	; 5
    104e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1052:	80 e1       	ldi	r24, 0x10	; 16
    1054:	97 e2       	ldi	r25, 0x27	; 39
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	31 f0       	breq	.+12     	; 0x1066 <_Z12factoryResetv+0x90>
    105a:	e9 e1       	ldi	r30, 0x19	; 25
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <_Z12factoryResetv+0x88>
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f8 cf       	rjmp	.-16     	; 0x1056 <_Z12factoryResetv+0x80>
    1066:	6d e2       	ldi	r22, 0x2D	; 45
    1068:	75 e0       	ldi	r23, 0x05	; 5
    106a:	82 ed       	ldi	r24, 0xD2	; 210
    106c:	95 e0       	ldi	r25, 0x05	; 5
    106e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1072:	80 e1       	ldi	r24, 0x10	; 16
    1074:	97 e2       	ldi	r25, 0x27	; 39
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	31 f0       	breq	.+12     	; 0x1086 <_Z12factoryResetv+0xb0>
    107a:	e9 e1       	ldi	r30, 0x19	; 25
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	31 97       	sbiw	r30, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <_Z12factoryResetv+0xa8>
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f8 cf       	rjmp	.-16     	; 0x1076 <_Z12factoryResetv+0xa0>
    1086:	6d e2       	ldi	r22, 0x2D	; 45
    1088:	75 e0       	ldi	r23, 0x05	; 5
    108a:	82 ed       	ldi	r24, 0xD2	; 210
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1092:	80 e1       	ldi	r24, 0x10	; 16
    1094:	97 e2       	ldi	r25, 0x27	; 39
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	31 f0       	breq	.+12     	; 0x10a6 <_Z12factoryResetv+0xd0>
    109a:	e9 e1       	ldi	r30, 0x19	; 25
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <_Z12factoryResetv+0xc8>
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	f8 cf       	rjmp	.-16     	; 0x1096 <_Z12factoryResetv+0xc0>
    10a6:	82 ed       	ldi	r24, 0xD2	; 210
    10a8:	95 e0       	ldi	r25, 0x05	; 5
    10aa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
    10ae:	84 ec       	ldi	r24, 0xC4	; 196
    10b0:	99 e0       	ldi	r25, 0x09	; 9
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <_Z12factoryResetv+0xdc>
    10b6:	61 e2       	ldi	r22, 0x21	; 33
    10b8:	75 e0       	ldi	r23, 0x05	; 5
    10ba:	82 ed       	ldi	r24, 0xD2	; 210
    10bc:	95 e0       	ldi	r25, 0x05	; 5
    10be:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    10c2:	80 e1       	ldi	r24, 0x10	; 16
    10c4:	97 e2       	ldi	r25, 0x27	; 39
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <_Z12factoryResetv+0x100>
    10ca:	e9 e1       	ldi	r30, 0x19	; 25
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	31 97       	sbiw	r30, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <_Z12factoryResetv+0xf8>
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f8 cf       	rjmp	.-16     	; 0x10c6 <_Z12factoryResetv+0xf0>
    10d6:	6d e2       	ldi	r22, 0x2D	; 45
    10d8:	75 e0       	ldi	r23, 0x05	; 5
    10da:	82 ed       	ldi	r24, 0xD2	; 210
    10dc:	95 e0       	ldi	r25, 0x05	; 5
    10de:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    10e2:	80 e1       	ldi	r24, 0x10	; 16
    10e4:	97 e2       	ldi	r25, 0x27	; 39
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <_Z12factoryResetv+0x120>
    10ea:	e9 e1       	ldi	r30, 0x19	; 25
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <_Z12factoryResetv+0x118>
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f8 cf       	rjmp	.-16     	; 0x10e6 <_Z12factoryResetv+0x110>
    10f6:	6d e2       	ldi	r22, 0x2D	; 45
    10f8:	75 e0       	ldi	r23, 0x05	; 5
    10fa:	82 ed       	ldi	r24, 0xD2	; 210
    10fc:	95 e0       	ldi	r25, 0x05	; 5
    10fe:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1102:	80 e1       	ldi	r24, 0x10	; 16
    1104:	97 e2       	ldi	r25, 0x27	; 39
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	31 f0       	breq	.+12     	; 0x1116 <_Z12factoryResetv+0x140>
    110a:	e9 e1       	ldi	r30, 0x19	; 25
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <_Z12factoryResetv+0x138>
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f8 cf       	rjmp	.-16     	; 0x1106 <_Z12factoryResetv+0x130>
    1116:	6d e2       	ldi	r22, 0x2D	; 45
    1118:	75 e0       	ldi	r23, 0x05	; 5
    111a:	82 ed       	ldi	r24, 0xD2	; 210
    111c:	95 e0       	ldi	r25, 0x05	; 5
    111e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1122:	80 e1       	ldi	r24, 0x10	; 16
    1124:	97 e2       	ldi	r25, 0x27	; 39
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	31 f0       	breq	.+12     	; 0x1136 <_Z12factoryResetv+0x160>
    112a:	e9 e1       	ldi	r30, 0x19	; 25
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <_Z12factoryResetv+0x158>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f8 cf       	rjmp	.-16     	; 0x1126 <_Z12factoryResetv+0x150>
    1136:	82 ed       	ldi	r24, 0xD2	; 210
    1138:	95 e0       	ldi	r25, 0x05	; 5
    113a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
    113e:	6f e2       	ldi	r22, 0x2F	; 47
    1140:	75 e0       	ldi	r23, 0x05	; 5
    1142:	82 ed       	ldi	r24, 0xD2	; 210
    1144:	95 e0       	ldi	r25, 0x05	; 5
    1146:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	97 e2       	ldi	r25, 0x27	; 39
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	31 f0       	breq	.+12     	; 0x115e <_Z12factoryResetv+0x188>
    1152:	e9 e1       	ldi	r30, 0x19	; 25
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	31 97       	sbiw	r30, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <_Z12factoryResetv+0x180>
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f8 cf       	rjmp	.-16     	; 0x114e <_Z12factoryResetv+0x178>
    115e:	82 ed       	ldi	r24, 0xD2	; 210
    1160:	95 e0       	ldi	r25, 0x05	; 5
    1162:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <_Z12factoryResetv+0x1a0>
    1168:	82 ed       	ldi	r24, 0xD2	; 210
    116a:	95 e0       	ldi	r25, 0x05	; 5
    116c:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN6Screen11pressedBackEv>
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <_Z12factoryResetv+0x1a0>
    1174:	48 cf       	rjmp	.-368    	; 0x1006 <_Z12factoryResetv+0x30>
    1176:	0f 91       	pop	r16
    1178:	ef 90       	pop	r14
    117a:	cf 90       	pop	r12
    117c:	08 95       	ret

0000117e <_Z10checkAlarmv>:
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	0f 2e       	mov	r0, r31
    1190:	fa ec       	ldi	r31, 0xCA	; 202
    1192:	cf 2e       	mov	r12, r31
    1194:	f5 e0       	ldi	r31, 0x05	; 5
    1196:	df 2e       	mov	r13, r31
    1198:	f0 2d       	mov	r31, r0
    119a:	0f 2e       	mov	r0, r31
    119c:	fb ec       	ldi	r31, 0xCB	; 203
    119e:	ef 2e       	mov	r14, r31
    11a0:	f5 e0       	ldi	r31, 0x05	; 5
    11a2:	ff 2e       	mov	r15, r31
    11a4:	f0 2d       	mov	r31, r0
    11a6:	0c ec       	ldi	r16, 0xCC	; 204
    11a8:	15 e0       	ldi	r17, 0x05	; 5
    11aa:	2d ec       	ldi	r18, 0xCD	; 205
    11ac:	35 e0       	ldi	r19, 0x05	; 5
    11ae:	4e ec       	ldi	r20, 0xCE	; 206
    11b0:	55 e0       	ldi	r21, 0x05	; 5
    11b2:	6f ec       	ldi	r22, 0xCF	; 207
    11b4:	75 e0       	ldi	r23, 0x05	; 5
    11b6:	80 ed       	ldi	r24, 0xD0	; 208
    11b8:	95 e0       	ldi	r25, 0x05	; 5
    11ba:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z14ds1307_getdatePhS_S_S_S_S_S_>
    11be:	c0 e0       	ldi	r28, 0x00	; 0
    11c0:	d0 e0       	ldi	r29, 0x00	; 0
    11c2:	c5 30       	cpi	r28, 0x05	; 5
    11c4:	d1 05       	cpc	r29, r1
    11c6:	0c f0       	brlt	.+2      	; 0x11ca <_Z10checkAlarmv+0x4c>
    11c8:	bc c0       	rjmp	.+376    	; 0x1342 <_Z10checkAlarmv+0x1c4>
    11ca:	fe 01       	movw	r30, r28
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	e2 53       	subi	r30, 0x32	; 50
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	20 81       	ld	r18, Z
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	2f 3f       	cpi	r18, 0xFF	; 255
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	38 07       	cpc	r19, r24
    11de:	09 f4       	brne	.+2      	; 0x11e2 <_Z10checkAlarmv+0x64>
    11e0:	b0 c0       	rjmp	.+352    	; 0x1342 <_Z10checkAlarmv+0x1c4>
    11e2:	c9 01       	movw	r24, r18
    11e4:	64 e6       	ldi	r22, 0x64	; 100
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    11ec:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <hour>
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	68 17       	cp	r22, r24
    11f4:	79 07       	cpc	r23, r25
    11f6:	09 f0       	breq	.+2      	; 0x11fa <_Z10checkAlarmv+0x7c>
    11f8:	a2 c0       	rjmp	.+324    	; 0x133e <_Z10checkAlarmv+0x1c0>
    11fa:	c9 01       	movw	r24, r18
    11fc:	64 e6       	ldi	r22, 0x64	; 100
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    1204:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <minute>
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	82 17       	cp	r24, r18
    120c:	93 07       	cpc	r25, r19
    120e:	09 f0       	breq	.+2      	; 0x1212 <_Z10checkAlarmv+0x94>
    1210:	96 c0       	rjmp	.+300    	; 0x133e <_Z10checkAlarmv+0x1c0>
    1212:	82 ed       	ldi	r24, 0xD2	; 210
    1214:	95 e0       	ldi	r25, 0x05	; 5
    1216:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
    121a:	67 e3       	ldi	r22, 0x37	; 55
    121c:	75 e0       	ldi	r23, 0x05	; 5
    121e:	82 ed       	ldi	r24, 0xD2	; 210
    1220:	95 e0       	ldi	r25, 0x05	; 5
    1222:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1226:	60 91 cc 05 	lds	r22, 0x05CC	; 0x8005cc <hour>
    122a:	1d ec       	ldi	r17, 0xCD	; 205
    122c:	61 9f       	mul	r22, r17
    122e:	61 2d       	mov	r22, r1
    1230:	11 24       	eor	r1, r1
    1232:	66 95       	lsr	r22
    1234:	66 95       	lsr	r22
    1236:	66 95       	lsr	r22
    1238:	60 5d       	subi	r22, 0xD0	; 208
    123a:	82 ed       	ldi	r24, 0xD2	; 210
    123c:	95 e0       	ldi	r25, 0x05	; 5
    123e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    1242:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <hour>
    1246:	81 9f       	mul	r24, r17
    1248:	91 2d       	mov	r25, r1
    124a:	11 24       	eor	r1, r1
    124c:	96 95       	lsr	r25
    124e:	96 95       	lsr	r25
    1250:	96 95       	lsr	r25
    1252:	99 0f       	add	r25, r25
    1254:	29 2f       	mov	r18, r25
    1256:	22 0f       	add	r18, r18
    1258:	22 0f       	add	r18, r18
    125a:	92 0f       	add	r25, r18
    125c:	89 1b       	sub	r24, r25
    125e:	60 e3       	ldi	r22, 0x30	; 48
    1260:	68 0f       	add	r22, r24
    1262:	82 ed       	ldi	r24, 0xD2	; 210
    1264:	95 e0       	ldi	r25, 0x05	; 5
    1266:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    126a:	67 e9       	ldi	r22, 0x97	; 151
    126c:	74 e0       	ldi	r23, 0x04	; 4
    126e:	82 ed       	ldi	r24, 0xD2	; 210
    1270:	95 e0       	ldi	r25, 0x05	; 5
    1272:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1276:	60 91 cb 05 	lds	r22, 0x05CB	; 0x8005cb <minute>
    127a:	61 9f       	mul	r22, r17
    127c:	61 2d       	mov	r22, r1
    127e:	11 24       	eor	r1, r1
    1280:	66 95       	lsr	r22
    1282:	66 95       	lsr	r22
    1284:	66 95       	lsr	r22
    1286:	60 5d       	subi	r22, 0xD0	; 208
    1288:	82 ed       	ldi	r24, 0xD2	; 210
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    1290:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <minute>
    1294:	91 9f       	mul	r25, r17
    1296:	81 2d       	mov	r24, r1
    1298:	11 24       	eor	r1, r1
    129a:	86 95       	lsr	r24
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	88 0f       	add	r24, r24
    12a2:	28 2f       	mov	r18, r24
    12a4:	22 0f       	add	r18, r18
    12a6:	22 0f       	add	r18, r18
    12a8:	82 0f       	add	r24, r18
    12aa:	98 1b       	sub	r25, r24
    12ac:	60 e3       	ldi	r22, 0x30	; 48
    12ae:	69 0f       	add	r22, r25
    12b0:	82 ed       	ldi	r24, 0xD2	; 210
    12b2:	95 e0       	ldi	r25, 0x05	; 5
    12b4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    12b8:	fe 01       	movw	r30, r28
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	ec 53       	subi	r30, 0x3C	; 60
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	83 ed       	ldi	r24, 0xD3	; 211
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN4Tone10playMelodyEi>
    12ce:	82 ed       	ldi	r24, 0xD2	; 210
    12d0:	95 e0       	ldi	r25, 0x05	; 5
    12d2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
    12d6:	c4 30       	cpi	r28, 0x04	; 4
    12d8:	d1 05       	cpc	r29, r1
    12da:	ec f4       	brge	.+58     	; 0x1316 <_Z10checkAlarmv+0x198>
    12dc:	9e 01       	movw	r18, r28
    12de:	2f 5f       	subi	r18, 0xFF	; 255
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	c9 01       	movw	r24, r18
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	fc 01       	movw	r30, r24
    12ea:	e2 53       	subi	r30, 0x32	; 50
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	40 81       	ld	r20, Z
    12f0:	51 81       	ldd	r21, Z+1	; 0x01
    12f2:	cc 0f       	add	r28, r28
    12f4:	dd 1f       	adc	r29, r29
    12f6:	fe 01       	movw	r30, r28
    12f8:	e2 53       	subi	r30, 0x32	; 50
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
    12fc:	51 83       	std	Z+1, r21	; 0x01
    12fe:	40 83       	st	Z, r20
    1300:	fc 01       	movw	r30, r24
    1302:	ec 53       	subi	r30, 0x3C	; 60
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	cc 53       	subi	r28, 0x3C	; 60
    130c:	de 4f       	sbci	r29, 0xFE	; 254
    130e:	99 83       	std	Y+1, r25	; 0x01
    1310:	88 83       	st	Y, r24
    1312:	e9 01       	movw	r28, r18
    1314:	e0 cf       	rjmp	.-64     	; 0x12d6 <_Z10checkAlarmv+0x158>
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <alarmArray+0x9>
    131e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <alarmArray+0x8>
    1322:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <alarmToneArray+0x9>
    1326:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <alarmToneArray+0x8>
    132a:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <ith_alarm>
    132e:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <ith_alarm+0x1>
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <ith_alarm+0x1>
    1338:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <ith_alarm>
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <_Z10checkAlarmv+0x1c4>
    133e:	21 96       	adiw	r28, 0x01	; 1
    1340:	40 cf       	rjmp	.-384    	; 0x11c2 <_Z10checkAlarmv+0x44>
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	08 95       	ret

00001354 <_Z15moveCursorRighti>:
	_delay_ms(1000);
}



void moveCursorRight(int i){
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	8c 01       	movw	r16, r24
	for (int l=0; l<i;l++){
    135e:	c0 e0       	ldi	r28, 0x00	; 0
    1360:	d0 e0       	ldi	r29, 0x00	; 0
    1362:	c0 17       	cp	r28, r16
    1364:	d1 07       	cpc	r29, r17
    1366:	3c f4       	brge	.+14     	; 0x1376 <_Z15moveCursorRighti+0x22>
		sc.LCD_Command(0x14);
    1368:	64 e1       	ldi	r22, 0x14	; 20
    136a:	82 ed       	ldi	r24, 0xD2	; 210
    136c:	95 e0       	ldi	r25, 0x05	; 5
    136e:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
}



void moveCursorRight(int i){
	for (int l=0; l<i;l++){
    1372:	21 96       	adiw	r28, 0x01	; 1
    1374:	f6 cf       	rjmp	.-20     	; 0x1362 <_Z15moveCursorRighti+0xe>
		sc.LCD_Command(0x14);
	}
}
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <_Z14moveCursorLefti>:

void moveCursorLeft(int j){
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	8c 01       	movw	r16, r24
	for (int k =0; k<j; k++){
    138a:	c0 e0       	ldi	r28, 0x00	; 0
    138c:	d0 e0       	ldi	r29, 0x00	; 0
    138e:	c0 17       	cp	r28, r16
    1390:	d1 07       	cpc	r29, r17
    1392:	3c f4       	brge	.+14     	; 0x13a2 <_Z14moveCursorLefti+0x22>
		sc.LCD_Command(0x10);
    1394:	60 e1       	ldi	r22, 0x10	; 16
    1396:	82 ed       	ldi	r24, 0xD2	; 210
    1398:	95 e0       	ldi	r25, 0x05	; 5
    139a:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_Command(0x14);
	}
}

void moveCursorLeft(int j){
	for (int k =0; k<j; k++){
    139e:	21 96       	adiw	r28, 0x01	; 1
    13a0:	f6 cf       	rjmp	.-20     	; 0x138e <_Z14moveCursorLefti+0xe>
		sc.LCD_Command(0x10);
	}
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <_Z12setClockTimev>:
		return false;
	}
}

//----------------------------------------------------------------------------------------------------------------------
void setClockTime(){
    13ac:	8f 92       	push	r8
    13ae:	9f 92       	push	r9
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	ef 92       	push	r14
    13b8:	0f 93       	push	r16
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
	sc.LCD_clear();
    13be:	82 ed       	ldi	r24, 0xD2	; 210
    13c0:	95 e0       	ldi	r25, 0x05	; 5
    13c2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("Set time here");
    13c6:	66 e4       	ldi	r22, 0x46	; 70
    13c8:	75 e0       	ldi	r23, 0x05	; 5
    13ca:	82 ed       	ldi	r24, 0xD2	; 210
    13cc:	95 e0       	ldi	r25, 0x05	; 5
    13ce:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    13d2:	60 ec       	ldi	r22, 0xC0	; 192
    13d4:	82 ed       	ldi	r24, 0xD2	; 210
    13d6:	95 e0       	ldi	r25, 0x05	; 5
    13d8:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("hh : mm");
    13dc:	6c eb       	ldi	r22, 0xBC	; 188
    13de:	74 e0       	ldi	r23, 0x04	; 4
    13e0:	82 ed       	ldi	r24, 0xD2	; 210
    13e2:	95 e0       	ldi	r25, 0x05	; 5
    13e4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	//sc.LCD_Command(0XC0);
	//sc.LCD_String("YY : MM : DD");
	//sc.LCD_Command(0x80);
	
	while (1){
		sc.LCD_Command(0xc0);
    13e8:	60 ec       	ldi	r22, 0xC0	; 192
    13ea:	82 ed       	ldi	r24, 0xD2	; 210
    13ec:	95 e0       	ldi	r25, 0x05	; 5
    13ee:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.blink();
    13f2:	82 ed       	ldi	r24, 0xD2	; 210
    13f4:	95 e0       	ldi	r25, 0x05	; 5
    13f6:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Screen5blinkEv>
		h = (int (kp.pressedKey())-48)*10;
    13fa:	81 ed       	ldi	r24, 0xD1	; 209
    13fc:	95 e0       	ldi	r25, 0x05	; 5
    13fe:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	20 53       	subi	r18, 0x30	; 48
    1408:	31 09       	sbc	r19, r1
    140a:	c9 01       	movw	r24, r18
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <h+0x1>
    1424:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <h>
		if (h==410){return;}
    1428:	8a 39       	cpi	r24, 0x9A	; 154
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	92 07       	cpc	r25, r18
    142e:	09 f4       	brne	.+2      	; 0x1432 <_Z12setClockTimev+0x86>
    1430:	1c c2       	rjmp	.+1080   	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (h/10)+48);
    1432:	6a e0       	ldi	r22, 0x0A	; 10
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    143a:	60 5d       	subi	r22, 0xD0	; 208
    143c:	82 ed       	ldi	r24, 0xD2	; 210
    143e:	95 e0       	ldi	r25, 0x05	; 5
    1440:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
		h += (int (kp.pressedKey()) -48);
    1444:	81 ed       	ldi	r24, 0xD1	; 209
    1446:	95 e0       	ldi	r25, 0x05	; 5
    1448:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	c0 97       	sbiw	r24, 0x30	; 48
    1450:	20 91 c4 05 	lds	r18, 0x05C4	; 0x8005c4 <h>
    1454:	30 91 c5 05 	lds	r19, 0x05C5	; 0x8005c5 <h+0x1>
    1458:	82 0f       	add	r24, r18
    145a:	93 1f       	adc	r25, r19
    145c:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <h+0x1>
    1460:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <h>
		if (h==451){return;}
    1464:	83 3c       	cpi	r24, 0xC3	; 195
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	92 07       	cpc	r25, r18
    146a:	09 f4       	brne	.+2      	; 0x146e <_Z12setClockTimev+0xc2>
    146c:	fe c1       	rjmp	.+1020   	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (h%10)+48);
    146e:	6a e0       	ldi	r22, 0x0A	; 10
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    1476:	60 e3       	ldi	r22, 0x30	; 48
    1478:	68 0f       	add	r22, r24
    147a:	82 ed       	ldi	r24, 0xD2	; 210
    147c:	95 e0       	ldi	r25, 0x05	; 5
    147e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
		sc.stopBlink();
    1482:	82 ed       	ldi	r24, 0xD2	; 210
    1484:	95 e0       	ldi	r25, 0x05	; 5
    1486:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
    148a:	84 e2       	ldi	r24, 0x24	; 36
    148c:	94 ef       	ldi	r25, 0xF4	; 244
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <_Z12setClockTimev+0xe2>
		_delay_ms(250);
		
		if(h<24){
    1492:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <h>
    1496:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <h+0x1>
    149a:	48 97       	sbiw	r24, 0x18	; 24
    149c:	64 f0       	brlt	.+24     	; 0x14b6 <_Z12setClockTimev+0x10a>
			break;
		}
		sc.LCD_Command(0xc0); 
    149e:	60 ec       	ldi	r22, 0xC0	; 192
    14a0:	82 ed       	ldi	r24, 0xD2	; 210
    14a2:	95 e0       	ldi	r25, 0x05	; 5
    14a4:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("hh");
    14a8:	64 e5       	ldi	r22, 0x54	; 84
    14aa:	75 e0       	ldi	r23, 0x05	; 5
    14ac:	82 ed       	ldi	r24, 0xD2	; 210
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	sc.LCD_String("hh : mm");
	//sc.LCD_Command(0XC0);
	//sc.LCD_String("YY : MM : DD");
	//sc.LCD_Command(0x80);
	
	while (1){
    14b4:	99 cf       	rjmp	.-206    	; 0x13e8 <_Z12setClockTimev+0x3c>
		}
		sc.LCD_Command(0xc0); 
		sc.LCD_String("hh");
		}
	
	sc.LCD_String(" : ");
    14b6:	64 ec       	ldi	r22, 0xC4	; 196
    14b8:	74 e0       	ldi	r23, 0x04	; 4
    14ba:	82 ed       	ldi	r24, 0xD2	; 210
    14bc:	95 e0       	ldi	r25, 0x05	; 5
    14be:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	while(1){
		sc.blink();
    14c2:	82 ed       	ldi	r24, 0xD2	; 210
    14c4:	95 e0       	ldi	r25, 0x05	; 5
    14c6:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Screen5blinkEv>
		M = (int (kp.pressedKey())-48)*10;
    14ca:	81 ed       	ldi	r24, 0xD1	; 209
    14cc:	95 e0       	ldi	r25, 0x05	; 5
    14ce:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	20 53       	subi	r18, 0x30	; 48
    14d8:	31 09       	sbc	r19, r1
    14da:	c9 01       	movw	r24, r18
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	22 0f       	add	r18, r18
    14e2:	33 1f       	adc	r19, r19
    14e4:	22 0f       	add	r18, r18
    14e6:	33 1f       	adc	r19, r19
    14e8:	22 0f       	add	r18, r18
    14ea:	33 1f       	adc	r19, r19
    14ec:	82 0f       	add	r24, r18
    14ee:	93 1f       	adc	r25, r19
    14f0:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <M+0x1>
    14f4:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <M>
		if (M==410){return;}
    14f8:	8a 39       	cpi	r24, 0x9A	; 154
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	92 07       	cpc	r25, r18
    14fe:	09 f4       	brne	.+2      	; 0x1502 <_Z12setClockTimev+0x156>
    1500:	b4 c1       	rjmp	.+872    	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (M/10)+48);
    1502:	6a e0       	ldi	r22, 0x0A	; 10
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    150a:	60 5d       	subi	r22, 0xD0	; 208
    150c:	82 ed       	ldi	r24, 0xD2	; 210
    150e:	95 e0       	ldi	r25, 0x05	; 5
    1510:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
		M += (int (kp.pressedKey()) -48);
    1514:	81 ed       	ldi	r24, 0xD1	; 209
    1516:	95 e0       	ldi	r25, 0x05	; 5
    1518:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	c0 97       	sbiw	r24, 0x30	; 48
    1520:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <M>
    1524:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <M+0x1>
    1528:	82 0f       	add	r24, r18
    152a:	93 1f       	adc	r25, r19
    152c:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <M+0x1>
    1530:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <M>
		if (M==451){return;}
    1534:	83 3c       	cpi	r24, 0xC3	; 195
    1536:	21 e0       	ldi	r18, 0x01	; 1
    1538:	92 07       	cpc	r25, r18
    153a:	09 f4       	brne	.+2      	; 0x153e <_Z12setClockTimev+0x192>
    153c:	96 c1       	rjmp	.+812    	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (M%10)+48);
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    1546:	60 e3       	ldi	r22, 0x30	; 48
    1548:	68 0f       	add	r22, r24
    154a:	82 ed       	ldi	r24, 0xD2	; 210
    154c:	95 e0       	ldi	r25, 0x05	; 5
    154e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    1552:	84 e2       	ldi	r24, 0x24	; 36
    1554:	94 ef       	ldi	r25, 0xF4	; 244
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <_Z12setClockTimev+0x1aa>
		_delay_ms(250);
		sc.stopBlink();
    155a:	82 ed       	ldi	r24, 0xD2	; 210
    155c:	95 e0       	ldi	r25, 0x05	; 5
    155e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
		
		if (M<60){
    1562:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <M>
    1566:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <M+0x1>
    156a:	cc 97       	sbiw	r24, 0x3c	; 60
    156c:	a4 f0       	brlt	.+40     	; 0x1596 <_Z12setClockTimev+0x1ea>
			break;
		}
		sc.LCD_Command(0xc0);  
    156e:	60 ec       	ldi	r22, 0xC0	; 192
    1570:	82 ed       	ldi	r24, 0xD2	; 210
    1572:	95 e0       	ldi	r25, 0x05	; 5
    1574:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(5);
    1578:	85 e0       	ldi	r24, 0x05	; 5
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 aa 09 	call	0x1354	; 0x1354 <_Z15moveCursorRighti>
		sc.LCD_String("mm");
    1580:	61 ec       	ldi	r22, 0xC1	; 193
    1582:	74 e0       	ldi	r23, 0x04	; 4
    1584:	82 ed       	ldi	r24, 0xD2	; 210
    1586:	95 e0       	ldi	r25, 0x05	; 5
    1588:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
		moveCursorLeft(2);}
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 c0 09 	call	0x1380	; 0x1380 <_Z14moveCursorLefti>
		sc.LCD_Command(0xc0); 
		sc.LCD_String("hh");
		}
	
	sc.LCD_String(" : ");
	while(1){
    1594:	96 cf       	rjmp	.-212    	; 0x14c2 <_Z12setClockTimev+0x116>
    1596:	88 e8       	ldi	r24, 0x88	; 136
    1598:	93 e1       	ldi	r25, 0x13	; 19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	31 f0       	breq	.+12     	; 0x15aa <_Z12setClockTimev+0x1fe>
    159e:	e9 e1       	ldi	r30, 0x19	; 25
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <_Z12setClockTimev+0x1f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f8 cf       	rjmp	.-16     	; 0x159a <_Z12setClockTimev+0x1ee>
	
	int s=0;
	
	_delay_ms(500);
	
	sc.LCD_clear();
    15aa:	82 ed       	ldi	r24, 0xD2	; 210
    15ac:	95 e0       	ldi	r25, 0x05	; 5
    15ae:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("Set date here");
    15b2:	67 e5       	ldi	r22, 0x57	; 87
    15b4:	75 e0       	ldi	r23, 0x05	; 5
    15b6:	82 ed       	ldi	r24, 0xD2	; 210
    15b8:	95 e0       	ldi	r25, 0x05	; 5
    15ba:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    15be:	60 ec       	ldi	r22, 0xC0	; 192
    15c0:	82 ed       	ldi	r24, 0xD2	; 210
    15c2:	95 e0       	ldi	r25, 0x05	; 5
    15c4:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("YY : MM : DD");
    15c8:	65 e6       	ldi	r22, 0x65	; 101
    15ca:	75 e0       	ldi	r23, 0x05	; 5
    15cc:	82 ed       	ldi	r24, 0xD2	; 210
    15ce:	95 e0       	ldi	r25, 0x05	; 5
    15d0:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    15d4:	60 ec       	ldi	r22, 0xC0	; 192
    15d6:	82 ed       	ldi	r24, 0xD2	; 210
    15d8:	95 e0       	ldi	r25, 0x05	; 5
    15da:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>

	sc.blink();
    15de:	82 ed       	ldi	r24, 0xD2	; 210
    15e0:	95 e0       	ldi	r25, 0x05	; 5
    15e2:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Screen5blinkEv>
	int y = (int (kp.pressedKey())-48)*10;
    15e6:	81 ed       	ldi	r24, 0xD1	; 209
    15e8:	95 e0       	ldi	r25, 0x05	; 5
    15ea:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	c0 97       	sbiw	r24, 0x30	; 48
    15f2:	ec 01       	movw	r28, r24
    15f4:	cc 0f       	add	r28, r28
    15f6:	dd 1f       	adc	r29, r29
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	c8 0f       	add	r28, r24
    1606:	d9 1f       	adc	r29, r25
	if (y==410){return;}
    1608:	ca 39       	cpi	r28, 0x9A	; 154
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	d8 07       	cpc	r29, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <_Z12setClockTimev+0x266>
    1610:	2c c1       	rjmp	.+600    	; 0x186a <_Z12setClockTimev+0x4be>
	sc.LCD_Char((char) (y/10)+48);
    1612:	ce 01       	movw	r24, r28
    1614:	6a e0       	ldi	r22, 0x0A	; 10
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    161c:	60 5d       	subi	r22, 0xD0	; 208
    161e:	82 ed       	ldi	r24, 0xD2	; 210
    1620:	95 e0       	ldi	r25, 0x05	; 5
    1622:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
	y += (int (kp.pressedKey()) -48);
    1626:	81 ed       	ldi	r24, 0xD1	; 209
    1628:	95 e0       	ldi	r25, 0x05	; 5
    162a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	c0 97       	sbiw	r24, 0x30	; 48
    1632:	c8 0f       	add	r28, r24
    1634:	d9 1f       	adc	r29, r25
	if (h==451){return;}
    1636:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <h>
    163a:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <h+0x1>
    163e:	83 3c       	cpi	r24, 0xC3	; 195
    1640:	91 40       	sbci	r25, 0x01	; 1
    1642:	09 f4       	brne	.+2      	; 0x1646 <_Z12setClockTimev+0x29a>
    1644:	12 c1       	rjmp	.+548    	; 0x186a <_Z12setClockTimev+0x4be>
	sc.LCD_Char((char) (y%10)+48);
    1646:	ce 01       	movw	r24, r28
    1648:	6a e0       	ldi	r22, 0x0A	; 10
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    1650:	60 e3       	ldi	r22, 0x30	; 48
    1652:	68 0f       	add	r22, r24
    1654:	82 ed       	ldi	r24, 0xD2	; 210
    1656:	95 e0       	ldi	r25, 0x05	; 5
    1658:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
	sc.stopBlink();
    165c:	82 ed       	ldi	r24, 0xD2	; 210
    165e:	95 e0       	ldi	r25, 0x05	; 5
    1660:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
    1664:	84 e2       	ldi	r24, 0x24	; 36
    1666:	94 ef       	ldi	r25, 0xF4	; 244
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <_Z12setClockTimev+0x2bc>
	_delay_ms(250);
	
	sc.LCD_String(" : ");
    166c:	64 ec       	ldi	r22, 0xC4	; 196
    166e:	74 e0       	ldi	r23, 0x04	; 4
    1670:	82 ed       	ldi	r24, 0xD2	; 210
    1672:	95 e0       	ldi	r25, 0x05	; 5
    1674:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		sc.blink();
    1678:	82 ed       	ldi	r24, 0xD2	; 210
    167a:	95 e0       	ldi	r25, 0x05	; 5
    167c:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Screen5blinkEv>
		m = (int (kp.pressedKey())-48)*10;
    1680:	81 ed       	ldi	r24, 0xD1	; 209
    1682:	95 e0       	ldi	r25, 0x05	; 5
    1684:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	20 53       	subi	r18, 0x30	; 48
    168e:	31 09       	sbc	r19, r1
    1690:	c9 01       	movw	r24, r18
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	22 0f       	add	r18, r18
    16a0:	33 1f       	adc	r19, r19
    16a2:	82 0f       	add	r24, r18
    16a4:	93 1f       	adc	r25, r19
    16a6:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <m+0x1>
    16aa:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <m>
		if (m==410){return;}
    16ae:	8a 39       	cpi	r24, 0x9A	; 154
    16b0:	21 e0       	ldi	r18, 0x01	; 1
    16b2:	92 07       	cpc	r25, r18
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <_Z12setClockTimev+0x30c>
    16b6:	d9 c0       	rjmp	.+434    	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (m/10)+48);
    16b8:	6a e0       	ldi	r22, 0x0A	; 10
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    16c0:	60 5d       	subi	r22, 0xD0	; 208
    16c2:	82 ed       	ldi	r24, 0xD2	; 210
    16c4:	95 e0       	ldi	r25, 0x05	; 5
    16c6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
		m += (int (kp.pressedKey()) -48);
    16ca:	81 ed       	ldi	r24, 0xD1	; 209
    16cc:	95 e0       	ldi	r25, 0x05	; 5
    16ce:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	c0 97       	sbiw	r24, 0x30	; 48
    16d6:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <m>
    16da:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <m+0x1>
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <m+0x1>
    16e6:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <m>
		if (m==451){return;}
    16ea:	83 3c       	cpi	r24, 0xC3	; 195
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	92 07       	cpc	r25, r18
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <_Z12setClockTimev+0x348>
    16f2:	bb c0       	rjmp	.+374    	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (m%10)+48);
    16f4:	6a e0       	ldi	r22, 0x0A	; 10
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    16fc:	60 e3       	ldi	r22, 0x30	; 48
    16fe:	68 0f       	add	r22, r24
    1700:	82 ed       	ldi	r24, 0xD2	; 210
    1702:	95 e0       	ldi	r25, 0x05	; 5
    1704:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    1708:	84 e2       	ldi	r24, 0x24	; 36
    170a:	94 ef       	ldi	r25, 0xF4	; 244
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <_Z12setClockTimev+0x360>
		_delay_ms(250);
		sc.stopBlink();
    1710:	82 ed       	ldi	r24, 0xD2	; 210
    1712:	95 e0       	ldi	r25, 0x05	; 5
    1714:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
		
		if (m<13){
    1718:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <m>
    171c:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <m+0x1>
    1720:	0d 97       	sbiw	r24, 0x0d	; 13
    1722:	a4 f0       	brlt	.+40     	; 0x174c <_Z12setClockTimev+0x3a0>
			break;
		}
		sc.LCD_Command(0xc0);
    1724:	60 ec       	ldi	r22, 0xC0	; 192
    1726:	82 ed       	ldi	r24, 0xD2	; 210
    1728:	95 e0       	ldi	r25, 0x05	; 5
    172a:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(5);
    172e:	85 e0       	ldi	r24, 0x05	; 5
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 aa 09 	call	0x1354	; 0x1354 <_Z15moveCursorRighti>
		sc.LCD_String("MM");
    1736:	62 e7       	ldi	r22, 0x72	; 114
    1738:	75 e0       	ldi	r23, 0x05	; 5
    173a:	82 ed       	ldi	r24, 0xD2	; 210
    173c:	95 e0       	ldi	r25, 0x05	; 5
    173e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	moveCursorLeft(2);}
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 c0 09 	call	0x1380	; 0x1380 <_Z14moveCursorLefti>
	sc.stopBlink();
	_delay_ms(250);
	
	sc.LCD_String(" : ");
	
	while(1){
    174a:	96 cf       	rjmp	.-212    	; 0x1678 <_Z12setClockTimev+0x2cc>
		moveCursorRight(5);
		sc.LCD_String("MM");
	moveCursorLeft(2);}
	
	
	sc.LCD_String(" : ");
    174c:	64 ec       	ldi	r22, 0xC4	; 196
    174e:	74 e0       	ldi	r23, 0x04	; 4
    1750:	82 ed       	ldi	r24, 0xD2	; 210
    1752:	95 e0       	ldi	r25, 0x05	; 5
    1754:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		sc.blink();
    1758:	82 ed       	ldi	r24, 0xD2	; 210
    175a:	95 e0       	ldi	r25, 0x05	; 5
    175c:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Screen5blinkEv>
		d = (int (kp.pressedKey())-48)*10;
    1760:	81 ed       	ldi	r24, 0xD1	; 209
    1762:	95 e0       	ldi	r25, 0x05	; 5
    1764:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	20 53       	subi	r18, 0x30	; 48
    176e:	31 09       	sbc	r19, r1
    1770:	c9 01       	movw	r24, r18
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	22 0f       	add	r18, r18
    1780:	33 1f       	adc	r19, r19
    1782:	82 0f       	add	r24, r18
    1784:	93 1f       	adc	r25, r19
    1786:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <d+0x1>
    178a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <d>
		if (d==410){return;}
    178e:	8a 39       	cpi	r24, 0x9A	; 154
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	92 07       	cpc	r25, r18
    1794:	09 f4       	brne	.+2      	; 0x1798 <_Z12setClockTimev+0x3ec>
    1796:	69 c0       	rjmp	.+210    	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (d/10)+48);
    1798:	6a e0       	ldi	r22, 0x0A	; 10
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    17a0:	60 5d       	subi	r22, 0xD0	; 208
    17a2:	82 ed       	ldi	r24, 0xD2	; 210
    17a4:	95 e0       	ldi	r25, 0x05	; 5
    17a6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
		d += (int (kp.pressedKey()) -48);
    17aa:	81 ed       	ldi	r24, 0xD1	; 209
    17ac:	95 e0       	ldi	r25, 0x05	; 5
    17ae:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 01       	movw	r18, r24
    17b6:	20 53       	subi	r18, 0x30	; 48
    17b8:	31 09       	sbc	r19, r1
    17ba:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <d>
    17be:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <d+0x1>
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <d+0x1>
    17ca:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <d>
		if (d==451){return;}
    17ce:	83 3c       	cpi	r24, 0xC3	; 195
    17d0:	21 e0       	ldi	r18, 0x01	; 1
    17d2:	92 07       	cpc	r25, r18
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <_Z12setClockTimev+0x42c>
    17d6:	49 c0       	rjmp	.+146    	; 0x186a <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (d%10)+48);
    17d8:	6a e0       	ldi	r22, 0x0A	; 10
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    17e0:	60 e3       	ldi	r22, 0x30	; 48
    17e2:	68 0f       	add	r22, r24
    17e4:	82 ed       	ldi	r24, 0xD2	; 210
    17e6:	95 e0       	ldi	r25, 0x05	; 5
    17e8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN6Screen8LCD_CharEh>
    17ec:	84 e2       	ldi	r24, 0x24	; 36
    17ee:	94 ef       	ldi	r25, 0xF4	; 244
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <_Z12setClockTimev+0x444>
		_delay_ms(250);
		sc.stopBlink();
    17f4:	82 ed       	ldi	r24, 0xD2	; 210
    17f6:	95 e0       	ldi	r25, 0x05	; 5
    17f8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_ZN6Screen9stopBlinkEv>
		
		if (d<monthsDays[m-1]){
    17fc:	a0 90 c8 05 	lds	r10, 0x05C8	; 0x8005c8 <m>
    1800:	b0 90 c9 05 	lds	r11, 0x05C9	; 0x8005c9 <m+0x1>
    1804:	f5 01       	movw	r30, r10
    1806:	31 97       	sbiw	r30, 0x01	; 1
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	e4 55       	subi	r30, 0x54	; 84
    180e:	fe 4f       	sbci	r31, 0xFE	; 254
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	80 90 c6 05 	lds	r8, 0x05C6	; 0x8005c6 <d>
    1818:	90 90 c7 05 	lds	r9, 0x05C7	; 0x8005c7 <d+0x1>
    181c:	88 16       	cp	r8, r24
    181e:	99 06       	cpc	r9, r25
    1820:	a4 f0       	brlt	.+40     	; 0x184a <_Z12setClockTimev+0x49e>
			break;
		}
		sc.LCD_Command(0xc0);
    1822:	60 ec       	ldi	r22, 0xC0	; 192
    1824:	82 ed       	ldi	r24, 0xD2	; 210
    1826:	95 e0       	ldi	r25, 0x05	; 5
    1828:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(10);
    182c:	8a e0       	ldi	r24, 0x0A	; 10
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 aa 09 	call	0x1354	; 0x1354 <_Z15moveCursorRighti>
		sc.LCD_String("DD");
    1834:	6f e6       	ldi	r22, 0x6F	; 111
    1836:	75 e0       	ldi	r23, 0x05	; 5
    1838:	82 ed       	ldi	r24, 0xD2	; 210
    183a:	95 e0       	ldi	r25, 0x05	; 5
    183c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	moveCursorLeft(2);}
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 c0 09 	call	0x1380	; 0x1380 <_Z14moveCursorLefti>
	moveCursorLeft(2);}
	
	
	sc.LCD_String(" : ");
	
	while(1){
    1848:	87 cf       	rjmp	.-242    	; 0x1758 <_Z12setClockTimev+0x3ac>
		sc.LCD_Command(0xc0);
		moveCursorRight(10);
		sc.LCD_String("DD");
	moveCursorLeft(2);}
	
	int D = getDay(y,m,d);
    184a:	a4 01       	movw	r20, r8
    184c:	b5 01       	movw	r22, r10
    184e:	ce 01       	movw	r24, r28
    1850:	0e 94 bf 04 	call	0x97e	; 0x97e <_Z6getDayiii>
	ds1307_setdate(y,m, d, D, h, M, s);
    1854:	e0 90 c2 05 	lds	r14, 0x05C2	; 0x8005c2 <M>
    1858:	00 91 c4 05 	lds	r16, 0x05C4	; 0x8005c4 <h>
    185c:	c1 2c       	mov	r12, r1
    185e:	28 2f       	mov	r18, r24
    1860:	48 2d       	mov	r20, r8
    1862:	6a 2d       	mov	r22, r10
    1864:	8c 2f       	mov	r24, r28
    1866:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14ds1307_setdatehhhhhhh>
		
}
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	0f 91       	pop	r16
    1870:	ef 90       	pop	r14
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	08 95       	ret

0000187e <_Z8mainLoopv>:
		
	}
}

void mainLoop(){
	showTime();
    187e:	0e 94 a3 03 	call	0x746	; 0x746 <_Z8showTimev>
	checkAlarm();
    1882:	0e 94 bf 08 	call	0x117e	; 0x117e <_Z10checkAlarmv>
	if (sc.pressedSelect()){
    1886:	82 ed       	ldi	r24, 0xD2	; 210
    1888:	95 e0       	ldi	r25, 0x05	; 5
    188a:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    188e:	88 23       	and	r24, r24
    1890:	31 f0       	breq	.+12     	; 0x189e <_Z8mainLoopv+0x20>
		sc.LCD_clear();
    1892:	82 ed       	ldi	r24, 0xD2	; 210
    1894:	95 e0       	ldi	r25, 0x05	; 5
    1896:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		mainMenu();
    189a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <_Z8mainMenuv>
    189e:	08 95       	ret

000018a0 <_Z8mainMenuv>:
}


void mainMenu()
{
	sc.LCD_clear();
    18a0:	82 ed       	ldi	r24, 0xD2	; 210
    18a2:	95 e0       	ldi	r25, 0x05	; 5
    18a4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String(menu[menu_i]);
    18a8:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <menu_i>
    18ac:	70 91 c1 05 	lds	r23, 0x05C1	; 0x8005c1 <menu_i+0x1>
    18b0:	62 95       	swap	r22
    18b2:	72 95       	swap	r23
    18b4:	70 7f       	andi	r23, 0xF0	; 240
    18b6:	76 27       	eor	r23, r22
    18b8:	60 7f       	andi	r22, 0xF0	; 240
    18ba:	76 27       	eor	r23, r22
    18bc:	64 5a       	subi	r22, 0xA4	; 164
    18be:	7e 4f       	sbci	r23, 0xFE	; 254
    18c0:	82 ed       	ldi	r24, 0xD2	; 210
    18c2:	95 e0       	ldi	r25, 0x05	; 5
    18c4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		
		char btn = sc.Control_buttons();
    18c8:	82 ed       	ldi	r24, 0xD2	; 210
    18ca:	95 e0       	ldi	r25, 0x05	; 5
    18cc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN6Screen15Control_buttonsEv>
		if (btn=='d'){
    18d0:	84 36       	cpi	r24, 0x64	; 100
    18d2:	91 f4       	brne	.+36     	; 0x18f8 <_Z8mainMenuv+0x58>
			switch(menu_i)
    18d4:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <menu_i>
    18d8:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <menu_i+0x1>
    18dc:	84 30       	cpi	r24, 0x04	; 4
    18de:	91 05       	cpc	r25, r1
    18e0:	29 f4       	brne	.+10     	; 0x18ec <_Z8mainMenuv+0x4c>
			{
				case 4: menu_i = 0; break;
    18e2:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <menu_i+0x1>
    18e6:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <menu_i>
    18ea:	3e c0       	rjmp	.+124    	; 0x1968 <_Z8mainMenuv+0xc8>
				default: menu_i ++; break;
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <menu_i+0x1>
    18f2:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <menu_i>
    18f6:	38 c0       	rjmp	.+112    	; 0x1968 <_Z8mainMenuv+0xc8>
			}
		}
		else if (btn=='u'){
    18f8:	85 37       	cpi	r24, 0x75	; 117
    18fa:	99 f4       	brne	.+38     	; 0x1922 <_Z8mainMenuv+0x82>
			switch (menu_i)
    18fc:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <menu_i>
    1900:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <menu_i+0x1>
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	39 f4       	brne	.+14     	; 0x1916 <_Z8mainMenuv+0x76>
			{
				case 0: menu_i = 4; break;
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <menu_i+0x1>
    1910:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <menu_i>
    1914:	29 c0       	rjmp	.+82     	; 0x1968 <_Z8mainMenuv+0xc8>
				default: menu_i --; break;
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <menu_i+0x1>
    191c:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <menu_i>
    1920:	23 c0       	rjmp	.+70     	; 0x1968 <_Z8mainMenuv+0xc8>
			}
		}
		
		else if (btn=='b'){
    1922:	82 36       	cpi	r24, 0x62	; 98
    1924:	19 f4       	brne	.+6      	; 0x192c <_Z8mainMenuv+0x8c>
			mainLoop();
    1926:	0e 94 3f 0c 	call	0x187e	; 0x187e <_Z8mainLoopv>
		_delay_ms(500);
		
		
		
	}
}
    192a:	08 95       	ret
		
		else if (btn=='b'){
			mainLoop();
		break;}
		
		else if (btn=='s'){
    192c:	83 37       	cpi	r24, 0x73	; 115
    192e:	e1 f4       	brne	.+56     	; 0x1968 <_Z8mainMenuv+0xc8>
			switch (menu_i)
    1930:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <menu_i>
    1934:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <menu_i+0x1>
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	91 05       	cpc	r25, r1
    193c:	69 f0       	breq	.+26     	; 0x1958 <_Z8mainMenuv+0xb8>
    193e:	1c f4       	brge	.+6      	; 0x1946 <_Z8mainMenuv+0xa6>
    1940:	89 2b       	or	r24, r25
    1942:	39 f0       	breq	.+14     	; 0x1952 <_Z8mainMenuv+0xb2>
    1944:	11 c0       	rjmp	.+34     	; 0x1968 <_Z8mainMenuv+0xc8>
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	91 05       	cpc	r25, r1
    194a:	49 f0       	breq	.+18     	; 0x195e <_Z8mainMenuv+0xbe>
    194c:	03 97       	sbiw	r24, 0x03	; 3
    194e:	51 f0       	breq	.+20     	; 0x1964 <_Z8mainMenuv+0xc4>
    1950:	0b c0       	rjmp	.+22     	; 0x1968 <_Z8mainMenuv+0xc8>
			{case 0:
				set_alarm();
    1952:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_Z9set_alarmv>
				break;
    1956:	08 c0       	rjmp	.+16     	; 0x1968 <_Z8mainMenuv+0xc8>
				
				case 1:
				setClockTime();
    1958:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_Z12setClockTimev>
				break;
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <_Z8mainMenuv+0xc8>
				
				case 2:
				deleteAlarm();
    195e:	0e 94 88 06 	call	0xd10	; 0xd10 <_Z11deleteAlarmv>
				break;
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <_Z8mainMenuv+0xc8>
				case 3:
				factoryReset();
    1964:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_Z12factoryResetv>
				
			}
		}
		

		sc.LCD_clear();
    1968:	82 ed       	ldi	r24, 0xD2	; 210
    196a:	95 e0       	ldi	r25, 0x05	; 5
    196c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String(menu[menu_i]);
    1970:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <menu_i>
    1974:	70 91 c1 05 	lds	r23, 0x05C1	; 0x8005c1 <menu_i+0x1>
    1978:	62 95       	swap	r22
    197a:	72 95       	swap	r23
    197c:	70 7f       	andi	r23, 0xF0	; 240
    197e:	76 27       	eor	r23, r22
    1980:	60 7f       	andi	r22, 0xF0	; 240
    1982:	76 27       	eor	r23, r22
    1984:	64 5a       	subi	r22, 0xA4	; 164
    1986:	7e 4f       	sbci	r23, 0xFE	; 254
    1988:	82 ed       	ldi	r24, 0xD2	; 210
    198a:	95 e0       	ldi	r25, 0x05	; 5
    198c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	88 e8       	ldi	r24, 0x88	; 136
    1992:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	09 f4       	brne	.+2      	; 0x199a <_Z8mainMenuv+0xfa>
    1998:	97 cf       	rjmp	.-210    	; 0x18c8 <_Z8mainMenuv+0x28>
    199a:	e9 e1       	ldi	r30, 0x19	; 25
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	31 97       	sbiw	r30, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <_Z8mainMenuv+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f7 cf       	rjmp	.-18     	; 0x1994 <_Z8mainMenuv+0xf4>

000019a6 <_Z4idlev>:
		mainMenu();
}
}


void idle(){
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
	while (1){
	sc.LCD_clear();
    19aa:	82 ed       	ldi	r24, 0xD2	; 210
    19ac:	95 e0       	ldi	r25, 0x05	; 5
    19ae:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("  O          O  ");
    19b2:	65 e7       	ldi	r22, 0x75	; 117
    19b4:	75 e0       	ldi	r23, 0x05	; 5
    19b6:	82 ed       	ldi	r24, 0xD2	; 210
    19b8:	95 e0       	ldi	r25, 0x05	; 5
    19ba:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	80 e1       	ldi	r24, 0x10	; 16
    19c0:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	31 f0       	breq	.+12     	; 0x19d2 <_Z4idlev+0x2c>
    19c6:	e9 e1       	ldi	r30, 0x19	; 25
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <_Z4idlev+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f8 cf       	rjmp	.-16     	; 0x19c2 <_Z4idlev+0x1c>
	_delay_ms(1000);
	if(sc.pressedSelect()	){
    19d2:	82 ed       	ldi	r24, 0xD2	; 210
    19d4:	95 e0       	ldi	r25, 0x05	; 5
    19d6:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    19da:	88 23       	and	r24, r24
    19dc:	01 f1       	breq	.+64     	; 0x1a1e <_Z4idlev+0x78>
		sc.LCD_clear();
    19de:	82 ed       	ldi	r24, 0xD2	; 210
    19e0:	95 e0       	ldi	r25, 0x05	; 5
    19e2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String("  O          -  ");
    19e6:	66 e8       	ldi	r22, 0x86	; 134
    19e8:	75 e0       	ldi	r23, 0x05	; 5
    19ea:	82 ed       	ldi	r24, 0xD2	; 210
    19ec:	95 e0       	ldi	r25, 0x05	; 5
    19ee:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
		sc.LCD_Command(0xc0);
    19f2:	60 ec       	ldi	r22, 0xC0	; 192
    19f4:	82 ed       	ldi	r24, 0xD2	; 210
    19f6:	95 e0       	ldi	r25, 0x05	; 5
    19f8:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("        V       ");
    19fc:	67 e9       	ldi	r22, 0x97	; 151
    19fe:	75 e0       	ldi	r23, 0x05	; 5
    1a00:	82 ed       	ldi	r24, 0xD2	; 210
    1a02:	95 e0       	ldi	r25, 0x05	; 5
    1a04:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	88 e8       	ldi	r24, 0x88	; 136
    1a0a:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <_Z4idlev+0x6c>
    1a10:	f8 c0       	rjmp	.+496    	; 0x1c02 <_Z4idlev+0x25c>
    1a12:	e9 e1       	ldi	r30, 0x19	; 25
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	31 97       	sbiw	r30, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <_Z4idlev+0x70>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f7 cf       	rjmp	.-18     	; 0x1a0c <_Z4idlev+0x66>
		_delay_ms(500);
	return;}
	sc.LCD_clear();
    1a1e:	82 ed       	ldi	r24, 0xD2	; 210
    1a20:	95 e0       	ldi	r25, 0x05	; 5
    1a22:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("  -          -  ");
    1a26:	68 ea       	ldi	r22, 0xA8	; 168
    1a28:	75 e0       	ldi	r23, 0x05	; 5
    1a2a:	82 ed       	ldi	r24, 0xD2	; 210
    1a2c:	95 e0       	ldi	r25, 0x05	; 5
    1a2e:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1a32:	c4 ed       	ldi	r28, 0xD4	; 212
    1a34:	d0 e3       	ldi	r29, 0x30	; 48
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <_Z4idlev+0x92>
	_delay_ms(50);
	sc.LCD_clear();
    1a3c:	82 ed       	ldi	r24, 0xD2	; 210
    1a3e:	95 e0       	ldi	r25, 0x05	; 5
    1a40:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("  O          O  ");
    1a44:	65 e7       	ldi	r22, 0x75	; 117
    1a46:	75 e0       	ldi	r23, 0x05	; 5
    1a48:	82 ed       	ldi	r24, 0xD2	; 210
    1a4a:	95 e0       	ldi	r25, 0x05	; 5
    1a4c:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1a50:	21 97       	sbiw	r28, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <_Z4idlev+0xaa>
	_delay_ms(50);
	sc.LCD_clear();
    1a54:	82 ed       	ldi	r24, 0xD2	; 210
    1a56:	95 e0       	ldi	r25, 0x05	; 5
    1a58:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("  -          -  ");
    1a5c:	68 ea       	ldi	r22, 0xA8	; 168
    1a5e:	75 e0       	ldi	r23, 0x05	; 5
    1a60:	82 ed       	ldi	r24, 0xD2	; 210
    1a62:	95 e0       	ldi	r25, 0x05	; 5
    1a64:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
    1a68:	80 e5       	ldi	r24, 0x50	; 80
    1a6a:	93 ec       	ldi	r25, 0xC3	; 195
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <_Z4idlev+0xc6>
	_delay_ms(200);
	sc.LCD_clear();
    1a70:	82 ed       	ldi	r24, 0xD2	; 210
    1a72:	95 e0       	ldi	r25, 0x05	; 5
    1a74:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("  O          O  ");
    1a78:	65 e7       	ldi	r22, 0x75	; 117
    1a7a:	75 e0       	ldi	r23, 0x05	; 5
    1a7c:	82 ed       	ldi	r24, 0xD2	; 210
    1a7e:	95 e0       	ldi	r25, 0x05	; 5
    1a80:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	80 e1       	ldi	r24, 0x10	; 16
    1a86:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <_Z4idlev+0xf2>
    1a8c:	e9 e1       	ldi	r30, 0x19	; 25
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	31 97       	sbiw	r30, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <_Z4idlev+0xea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f8 cf       	rjmp	.-16     	; 0x1a88 <_Z4idlev+0xe2>
	_delay_ms(1000);
	if(sc.pressedSelect()	){
    1a98:	82 ed       	ldi	r24, 0xD2	; 210
    1a9a:	95 e0       	ldi	r25, 0x05	; 5
    1a9c:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    1aa0:	88 23       	and	r24, r24
    1aa2:	01 f1       	breq	.+64     	; 0x1ae4 <_Z4idlev+0x13e>
		sc.LCD_clear();
    1aa4:	82 ed       	ldi	r24, 0xD2	; 210
    1aa6:	95 e0       	ldi	r25, 0x05	; 5
    1aa8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String("  O          -  ");
    1aac:	66 e8       	ldi	r22, 0x86	; 134
    1aae:	75 e0       	ldi	r23, 0x05	; 5
    1ab0:	82 ed       	ldi	r24, 0xD2	; 210
    1ab2:	95 e0       	ldi	r25, 0x05	; 5
    1ab4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
		sc.LCD_Command(0xc0);
    1ab8:	60 ec       	ldi	r22, 0xC0	; 192
    1aba:	82 ed       	ldi	r24, 0xD2	; 210
    1abc:	95 e0       	ldi	r25, 0x05	; 5
    1abe:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("        V       ");
    1ac2:	67 e9       	ldi	r22, 0x97	; 151
    1ac4:	75 e0       	ldi	r23, 0x05	; 5
    1ac6:	82 ed       	ldi	r24, 0xD2	; 210
    1ac8:	95 e0       	ldi	r25, 0x05	; 5
    1aca:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	88 e8       	ldi	r24, 0x88	; 136
    1ad0:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <_Z4idlev+0x132>
    1ad6:	95 c0       	rjmp	.+298    	; 0x1c02 <_Z4idlev+0x25c>
    1ad8:	e9 e1       	ldi	r30, 0x19	; 25
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	31 97       	sbiw	r30, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <_Z4idlev+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f7 cf       	rjmp	.-18     	; 0x1ad2 <_Z4idlev+0x12c>
    1ae4:	80 e1       	ldi	r24, 0x10	; 16
    1ae6:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	31 f0       	breq	.+12     	; 0x1af8 <_Z4idlev+0x152>
    1aec:	e9 e1       	ldi	r30, 0x19	; 25
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	31 97       	sbiw	r30, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <_Z4idlev+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f8 cf       	rjmp	.-16     	; 0x1ae8 <_Z4idlev+0x142>
		_delay_ms(500);
	return;}
	_delay_ms(1000);
	if(sc.pressedSelect()	){
    1af8:	82 ed       	ldi	r24, 0xD2	; 210
    1afa:	95 e0       	ldi	r25, 0x05	; 5
    1afc:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    1b00:	88 23       	and	r24, r24
    1b02:	01 f1       	breq	.+64     	; 0x1b44 <_Z4idlev+0x19e>
		sc.LCD_clear();
    1b04:	82 ed       	ldi	r24, 0xD2	; 210
    1b06:	95 e0       	ldi	r25, 0x05	; 5
    1b08:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String("  O          -  ");
    1b0c:	66 e8       	ldi	r22, 0x86	; 134
    1b0e:	75 e0       	ldi	r23, 0x05	; 5
    1b10:	82 ed       	ldi	r24, 0xD2	; 210
    1b12:	95 e0       	ldi	r25, 0x05	; 5
    1b14:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
		sc.LCD_Command(0xc0);
    1b18:	60 ec       	ldi	r22, 0xC0	; 192
    1b1a:	82 ed       	ldi	r24, 0xD2	; 210
    1b1c:	95 e0       	ldi	r25, 0x05	; 5
    1b1e:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("        V       ");
    1b22:	67 e9       	ldi	r22, 0x97	; 151
    1b24:	75 e0       	ldi	r23, 0x05	; 5
    1b26:	82 ed       	ldi	r24, 0xD2	; 210
    1b28:	95 e0       	ldi	r25, 0x05	; 5
    1b2a:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	88 e8       	ldi	r24, 0x88	; 136
    1b30:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <_Z4idlev+0x192>
    1b36:	65 c0       	rjmp	.+202    	; 0x1c02 <_Z4idlev+0x25c>
    1b38:	e9 e1       	ldi	r30, 0x19	; 25
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	31 97       	sbiw	r30, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <_Z4idlev+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f7 cf       	rjmp	.-18     	; 0x1b32 <_Z4idlev+0x18c>
    1b44:	80 e1       	ldi	r24, 0x10	; 16
    1b46:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	31 f0       	breq	.+12     	; 0x1b58 <_Z4idlev+0x1b2>
    1b4c:	e9 e1       	ldi	r30, 0x19	; 25
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	31 97       	sbiw	r30, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <_Z4idlev+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f8 cf       	rjmp	.-16     	; 0x1b48 <_Z4idlev+0x1a2>
		_delay_ms(500);
	return; }
	_delay_ms(1000);
	if(sc.pressedSelect()	){
    1b58:	82 ed       	ldi	r24, 0xD2	; 210
    1b5a:	95 e0       	ldi	r25, 0x05	; 5
    1b5c:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    1b60:	88 23       	and	r24, r24
    1b62:	f9 f0       	breq	.+62     	; 0x1ba2 <_Z4idlev+0x1fc>
		sc.LCD_clear();
    1b64:	82 ed       	ldi	r24, 0xD2	; 210
    1b66:	95 e0       	ldi	r25, 0x05	; 5
    1b68:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String("  O          -  ");
    1b6c:	66 e8       	ldi	r22, 0x86	; 134
    1b6e:	75 e0       	ldi	r23, 0x05	; 5
    1b70:	82 ed       	ldi	r24, 0xD2	; 210
    1b72:	95 e0       	ldi	r25, 0x05	; 5
    1b74:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
		sc.LCD_Command(0xc0);
    1b78:	60 ec       	ldi	r22, 0xC0	; 192
    1b7a:	82 ed       	ldi	r24, 0xD2	; 210
    1b7c:	95 e0       	ldi	r25, 0x05	; 5
    1b7e:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("        V       ");
    1b82:	67 e9       	ldi	r22, 0x97	; 151
    1b84:	75 e0       	ldi	r23, 0x05	; 5
    1b86:	82 ed       	ldi	r24, 0xD2	; 210
    1b88:	95 e0       	ldi	r25, 0x05	; 5
    1b8a:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	88 e8       	ldi	r24, 0x88	; 136
    1b90:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	b1 f1       	breq	.+108    	; 0x1c02 <_Z4idlev+0x25c>
    1b96:	e9 e1       	ldi	r30, 0x19	; 25
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	31 97       	sbiw	r30, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <_Z4idlev+0x1f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f8 cf       	rjmp	.-16     	; 0x1b92 <_Z4idlev+0x1ec>
    1ba2:	80 e1       	ldi	r24, 0x10	; 16
    1ba4:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	31 f0       	breq	.+12     	; 0x1bb6 <_Z4idlev+0x210>
    1baa:	e9 e1       	ldi	r30, 0x19	; 25
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	31 97       	sbiw	r30, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <_Z4idlev+0x208>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f8 cf       	rjmp	.-16     	; 0x1ba6 <_Z4idlev+0x200>
		_delay_ms(500);
	return; }
	_delay_ms(1000);
	if(sc.pressedSelect()	){
    1bb6:	82 ed       	ldi	r24, 0xD2	; 210
    1bb8:	95 e0       	ldi	r25, 0x05	; 5
    1bba:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN6Screen13pressedSelectEv>
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <_Z4idlev+0x21e>
    1bc2:	f3 ce       	rjmp	.-538    	; 0x19aa <_Z4idlev+0x4>
		sc.LCD_clear();
    1bc4:	82 ed       	ldi	r24, 0xD2	; 210
    1bc6:	95 e0       	ldi	r25, 0x05	; 5
    1bc8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String("  O          -  ");
    1bcc:	66 e8       	ldi	r22, 0x86	; 134
    1bce:	75 e0       	ldi	r23, 0x05	; 5
    1bd0:	82 ed       	ldi	r24, 0xD2	; 210
    1bd2:	95 e0       	ldi	r25, 0x05	; 5
    1bd4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
		sc.LCD_Command(0xc0);
    1bd8:	60 ec       	ldi	r22, 0xC0	; 192
    1bda:	82 ed       	ldi	r24, 0xD2	; 210
    1bdc:	95 e0       	ldi	r25, 0x05	; 5
    1bde:	0e 94 41 02 	call	0x482	; 0x482 <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("        V       ");
    1be2:	67 e9       	ldi	r22, 0x97	; 151
    1be4:	75 e0       	ldi	r23, 0x05	; 5
    1be6:	82 ed       	ldi	r24, 0xD2	; 210
    1be8:	95 e0       	ldi	r25, 0x05	; 5
    1bea:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	88 e8       	ldi	r24, 0x88	; 136
    1bf0:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	31 f0       	breq	.+12     	; 0x1c02 <_Z4idlev+0x25c>
    1bf6:	e9 e1       	ldi	r30, 0x19	; 25
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	31 97       	sbiw	r30, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <_Z4idlev+0x254>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f8 cf       	rjmp	.-16     	; 0x1bf2 <_Z4idlev+0x24c>
		_delay_ms(500);
	return;	}
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <_GLOBAL__sub_I_tone>:
    1c08:	6f ef       	ldi	r22, 0xFF	; 255
    1c0a:	7f ef       	ldi	r23, 0xFF	; 255
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 97 03 	call	0x72e	; 0x72e <_Z41__static_initialization_and_destruction_0ii>
    1c14:	08 95       	ret

00001c16 <_ZN4ToneC1Ei>:

Screen sc3;

Tone::Tone(int pin_1)
{
	SPEAKER_PIN=pin_1;
    1c16:	fc 01       	movw	r30, r24
    1c18:	71 83       	std	Z+1, r23	; 0x01
    1c1a:	60 83       	st	Z, r22
    1c1c:	08 95       	ret

00001c1e <_ZN4Tone8playNoteEff>:
}

//Function to play a single note

void Tone:: playNote(float frequency, float duration)
{
    1c1e:	2f 92       	push	r2
    1c20:	3f 92       	push	r3
    1c22:	4f 92       	push	r4
    1c24:	5f 92       	push	r5
    1c26:	6f 92       	push	r6
    1c28:	7f 92       	push	r7
    1c2a:	8f 92       	push	r8
    1c2c:	9f 92       	push	r9
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	62 97       	sbiw	r28, 0x12	; 18
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	1c 01       	movw	r2, r24
    1c54:	6a 01       	movw	r12, r20
    1c56:	7b 01       	movw	r14, r22
    1c58:	c9 01       	movw	r24, r18
    1c5a:	b8 01       	movw	r22, r16
	duration*=0.5;
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1c68:	4b 01       	movw	r8, r22
    1c6a:	5c 01       	movw	r10, r24
	long int cycles;
	float half_period;
	float wavelength;
	
	SPEAKER_DDR |= (1 << SPEAKER_PIN);
    1c6c:	24 b1       	in	r18, 0x04	; 4
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	f1 01       	movw	r30, r2
    1c74:	00 80       	ld	r0, Z
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <_ZN4Tone8playNoteEff+0x5e>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <_ZN4Tone8playNoteEff+0x5a>
    1c80:	82 2b       	or	r24, r18
    1c82:	84 b9       	out	0x04, r24	; 4
	if (frequency==0){
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	a9 01       	movw	r20, r18
    1c8a:	c7 01       	movw	r24, r14
    1c8c:	b6 01       	movw	r22, r12
    1c8e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    1c92:	81 11       	cpse	r24, r1
    1c94:	da c0       	rjmp	.+436    	; 0x1e4a <_ZN4Tone8playNoteEff+0x22c>
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    1c96:	25 b1       	in	r18, 0x05	; 5
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	f1 01       	movw	r30, r2
    1c9e:	00 80       	ld	r0, Z
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <_ZN4Tone8playNoteEff+0x88>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <_ZN4Tone8playNoteEff+0x84>
    1caa:	80 95       	com	r24
    1cac:	82 23       	and	r24, r18
    1cae:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1cb0:	2b ea       	ldi	r18, 0xAB	; 171
    1cb2:	3a ea       	ldi	r19, 0xAA	; 170
    1cb4:	4a ea       	ldi	r20, 0xAA	; 170
    1cb6:	5e e3       	ldi	r21, 0x3E	; 62
    1cb8:	c5 01       	movw	r24, r10
    1cba:	b4 01       	movw	r22, r8
    1cbc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1cc0:	6b 01       	movw	r12, r22
    1cc2:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5e e3       	ldi	r21, 0x3E	; 62
    1ccc:	c5 01       	movw	r24, r10
    1cce:	b4 01       	movw	r22, r8
    1cd0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1cd4:	2b 01       	movw	r4, r22
    1cd6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	0c f4       	brge	.+2      	; 0x1cee <_ZN4Tone8playNoteEff+0xd0>
    1cec:	66 c0       	rjmp	.+204    	; 0x1dba <_ZN4Tone8playNoteEff+0x19c>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	c3 01       	movw	r24, r6
    1cf8:	b2 01       	movw	r22, r4
    1cfa:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <_ZN4Tone8playNoteEff+0xe6>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <_ZN4Tone8playNoteEff+0x16c>
	{
		_delay_ms(__us / 1000.0);
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	c5 01       	movw	r24, r10
    1d0e:	b4 01       	movw	r22, r8
    1d10:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divsf3>
    1d14:	2b 01       	movw	r4, r22
    1d16:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	53 e4       	ldi	r21, 0x43	; 67
    1d20:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1d24:	6b 01       	movw	r12, r22
    1d26:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e8       	ldi	r20, 0x80	; 128
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	1c f1       	brlt	.+70     	; 0x1d7e <_ZN4Tone8playNoteEff+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	a4 f4       	brge	.+40     	; 0x1d74 <_ZN4Tone8playNoteEff+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	c3 01       	movw	r24, r6
    1d56:	b2 01       	movw	r22, r4
    1d58:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1d5c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    1d60:	61 15       	cp	r22, r1
    1d62:	71 05       	cpc	r23, r1
    1d64:	69 f1       	breq	.+90     	; 0x1dc0 <_ZN4Tone8playNoteEff+0x1a2>
    1d66:	89 e1       	ldi	r24, 0x19	; 25
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <_ZN4Tone8playNoteEff+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	61 50       	subi	r22, 0x01	; 1
    1d70:	71 09       	sbc	r23, r1
    1d72:	f6 cf       	rjmp	.-20     	; 0x1d60 <_ZN4Tone8playNoteEff+0x142>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d74:	c7 01       	movw	r24, r14
    1d76:	b6 01       	movw	r22, r12
    1d78:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <_ZN4Tone8playNoteEff+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	cb 01       	movw	r24, r22
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <_ZN4Tone8playNoteEff+0x166>
    1d88:	1b c0       	rjmp	.+54     	; 0x1dc0 <_ZN4Tone8playNoteEff+0x1a2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	c7 01       	movw	r24, r14
    1d94:	b6 01       	movw	r22, r12
    1d96:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	44 f4       	brge	.+16     	; 0x1dae <_ZN4Tone8playNoteEff+0x190>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1d9e:	c3 01       	movw	r24, r6
    1da0:	b2 01       	movw	r22, r4
    1da2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1da6:	cb 01       	movw	r24, r22
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <_ZN4Tone8playNoteEff+0x18a>
    1dac:	0c c0       	rjmp	.+24     	; 0x1dc6 <_ZN4Tone8playNoteEff+0x1a8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dae:	c7 01       	movw	r24, r14
    1db0:	b6 01       	movw	r22, r12
    1db2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1db6:	69 87       	std	Y+9, r22	; 0x09
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <_ZN4Tone8playNoteEff+0x1a2>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1dba:	21 e0       	ldi	r18, 0x01	; 1
    1dbc:	29 87       	std	Y+9, r18	; 0x09
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <_ZN4Tone8playNoteEff+0x1a2>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1dc0:	89 85       	ldd	r24, Y+9	; 0x09
    1dc2:	8a 95       	dec	r24
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <_ZN4Tone8playNoteEff+0x1a4>
		_delay_us(duration);
		float pauseBetweenNotes= duration*2;
    1dc6:	a5 01       	movw	r20, r10
    1dc8:	94 01       	movw	r18, r8
    1dca:	c5 01       	movw	r24, r10
    1dcc:	b4 01       	movw	r22, r8
    1dce:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__addsf3>
    1dd2:	4b 01       	movw	r8, r22
    1dd4:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a e7       	ldi	r20, 0x7A	; 122
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1de2:	6b 01       	movw	r12, r22
    1de4:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	24 f1       	brlt	.+72     	; 0x1e3e <_ZN4Tone8playNoteEff+0x220>
		__ticks = 1;
	else if (__tmp > 65535)
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	c7 01       	movw	r24, r14
    1e00:	b6 01       	movw	r22, r12
    1e02:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	ac f4       	brge	.+42     	; 0x1e34 <_ZN4Tone8playNoteEff+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	c5 01       	movw	r24, r10
    1e14:	b4 01       	movw	r22, r8
    1e16:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1e1a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    1e1e:	61 15       	cp	r22, r1
    1e20:	71 05       	cpc	r23, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <_ZN4Tone8playNoteEff+0x208>
    1e24:	8c c1       	rjmp	.+792    	; 0x213e <_ZN4Tone8playNoteEff+0x520>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1e26:	89 e1       	ldi	r24, 0x19	; 25
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <_ZN4Tone8playNoteEff+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	61 50       	subi	r22, 0x01	; 1
    1e30:	71 09       	sbc	r23, r1
    1e32:	f5 cf       	rjmp	.-22     	; 0x1e1e <_ZN4Tone8playNoteEff+0x200>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	c7 01       	movw	r24, r14
    1e36:	b6 01       	movw	r22, r12
    1e38:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <_ZN4Tone8playNoteEff+0x224>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	cb 01       	movw	r24, r22
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <_ZN4Tone8playNoteEff+0x226>
    1e48:	7a c1       	rjmp	.+756    	; 0x213e <_ZN4Tone8playNoteEff+0x520>
			_delay_ms (pauseBetweenNotes);
	}
	
	
	else{
		wavelength=(1/frequency)*1000;
    1e4a:	a7 01       	movw	r20, r14
    1e4c:	96 01       	movw	r18, r12
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	80 e8       	ldi	r24, 0x80	; 128
    1e54:	9f e3       	ldi	r25, 0x3F	; 63
    1e56:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divsf3>
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	54 e4       	ldi	r21, 0x44	; 68
    1e62:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1e66:	6b 01       	movw	r12, r22
    1e68:	7c 01       	movw	r14, r24
		cycles=2*duration/wavelength;
    1e6a:	a5 01       	movw	r20, r10
    1e6c:	94 01       	movw	r18, r8
    1e6e:	c5 01       	movw	r24, r10
    1e70:	b4 01       	movw	r22, r8
    1e72:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__addsf3>
    1e76:	a7 01       	movw	r20, r14
    1e78:	96 01       	movw	r18, r12
    1e7a:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divsf3>
    1e7e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__fixsfsi>
    1e82:	2b 01       	movw	r4, r22
    1e84:	3c 01       	movw	r6, r24
		half_period = wavelength/2;
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	c7 01       	movw	r24, r14
    1e90:	b6 01       	movw	r22, r12
    1e92:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1e96:	69 87       	std	Y+9, r22	; 0x09
    1e98:	7a 87       	std	Y+10, r23	; 0x0a
    1e9a:	8b 87       	std	Y+11, r24	; 0x0b
    1e9c:	9c 87       	std	Y+12, r25	; 0x0c

		
		
		for (int i=0;i<cycles;i++)
    1e9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	fa 8b       	std	Y+18, r31	; 0x12
    1ea4:	e9 8b       	std	Y+17, r30	; 0x11
    1ea6:	19 81       	ldd	r17, Y+1	; 0x01
    1ea8:	0d 81       	ldd	r16, Y+5	; 0x05
    1eaa:	29 89       	ldd	r18, Y+17	; 0x11
    1eac:	3a 89       	ldd	r19, Y+18	; 0x12
    1eae:	c9 01       	movw	r24, r18
    1eb0:	33 0f       	add	r19, r19
    1eb2:	aa 0b       	sbc	r26, r26
    1eb4:	bb 0b       	sbc	r27, r27
    1eb6:	84 15       	cp	r24, r4
    1eb8:	95 05       	cpc	r25, r5
    1eba:	a6 05       	cpc	r26, r6
    1ebc:	b7 05       	cpc	r27, r7
    1ebe:	0c f0       	brlt	.+2      	; 0x1ec2 <_ZN4Tone8playNoteEff+0x2a4>
    1ec0:	3e c1       	rjmp	.+636    	; 0x213e <_ZN4Tone8playNoteEff+0x520>
		{
			_delay_us(half_period*1000);
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4a e7       	ldi	r20, 0x7A	; 122
    1ec8:	54 e4       	ldi	r21, 0x44	; 68
    1eca:	69 85       	ldd	r22, Y+9	; 0x09
    1ecc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ece:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ed0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ed2:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1ed6:	4b 01       	movw	r8, r22
    1ed8:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1eda:	2b ea       	ldi	r18, 0xAB	; 171
    1edc:	3a ea       	ldi	r19, 0xAA	; 170
    1ede:	4a ea       	ldi	r20, 0xAA	; 170
    1ee0:	5e e3       	ldi	r21, 0x3E	; 62
    1ee2:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1ee6:	6b 01       	movw	r12, r22
    1ee8:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5e e3       	ldi	r21, 0x3E	; 62
    1ef2:	c5 01       	movw	r24, r10
    1ef4:	b4 01       	movw	r22, r8
    1ef6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1efa:	69 83       	std	Y+1, r22	; 0x01
    1efc:	7a 83       	std	Y+2, r23	; 0x02
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e8       	ldi	r20, 0x80	; 128
    1f08:	5f e3       	ldi	r21, 0x3F	; 63
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	b6 01       	movw	r22, r12
    1f0e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	0c f4       	brge	.+2      	; 0x1f18 <_ZN4Tone8playNoteEff+0x2fa>
    1f16:	74 c0       	rjmp	.+232    	; 0x2000 <_ZN4Tone8playNoteEff+0x3e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	69 81       	ldd	r22, Y+1	; 0x01
    1f22:	7a 81       	ldd	r23, Y+2	; 0x02
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <_ZN4Tone8playNoteEff+0x314>
    1f30:	4d c0       	rjmp	.+154    	; 0x1fcc <_ZN4Tone8playNoteEff+0x3ae>
	{
		_delay_ms(__us / 1000.0);
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	c5 01       	movw	r24, r10
    1f3c:	b4 01       	movw	r22, r8
    1f3e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divsf3>
    1f42:	6d 87       	std	Y+13, r22	; 0x0d
    1f44:	7e 87       	std	Y+14, r23	; 0x0e
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
    1f48:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a e7       	ldi	r20, 0x7A	; 122
    1f50:	53 e4       	ldi	r21, 0x43	; 67
    1f52:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1f56:	6d 83       	std	Y+5, r22	; 0x05
    1f58:	7e 83       	std	Y+6, r23	; 0x06
    1f5a:	8f 83       	std	Y+7, r24	; 0x07
    1f5c:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	4c f1       	brlt	.+82     	; 0x1fc0 <_ZN4Tone8playNoteEff+0x3a2>
		__ticks = 1;
	else if (__tmp > 65535)
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	6d 81       	ldd	r22, Y+5	; 0x05
    1f78:	7e 81       	ldd	r23, Y+6	; 0x06
    1f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7c:	98 85       	ldd	r25, Y+8	; 0x08
    1f7e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	b4 f4       	brge	.+44     	; 0x1fb2 <_ZN4Tone8playNoteEff+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f90:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f94:	98 89       	ldd	r25, Y+16	; 0x10
    1f96:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    1f9a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    1f9e:	61 15       	cp	r22, r1
    1fa0:	71 05       	cpc	r23, r1
    1fa2:	81 f1       	breq	.+96     	; 0x2004 <_ZN4Tone8playNoteEff+0x3e6>
    1fa4:	89 e1       	ldi	r24, 0x19	; 25
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <_ZN4Tone8playNoteEff+0x38a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fac:	61 50       	subi	r22, 0x01	; 1
    1fae:	71 09       	sbc	r23, r1
    1fb0:	f6 cf       	rjmp	.-20     	; 0x1f9e <_ZN4Tone8playNoteEff+0x380>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1fb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1fb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb8:	98 85       	ldd	r25, Y+8	; 0x08
    1fba:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <_ZN4Tone8playNoteEff+0x3a6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <_ZN4Tone8playNoteEff+0x3a8>
    1fca:	1c c0       	rjmp	.+56     	; 0x2004 <_ZN4Tone8playNoteEff+0x3e6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	53 e4       	ldi	r21, 0x43	; 67
    1fd4:	c7 01       	movw	r24, r14
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    1fdc:	18 16       	cp	r1, r24
    1fde:	54 f4       	brge	.+20     	; 0x1ff4 <_ZN4Tone8playNoteEff+0x3d6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1fe0:	69 81       	ldd	r22, Y+1	; 0x01
    1fe2:	7a 81       	ldd	r23, Y+2	; 0x02
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1fec:	cb 01       	movw	r24, r22
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <_ZN4Tone8playNoteEff+0x3d0>
    1ff2:	0b c0       	rjmp	.+22     	; 0x200a <_ZN4Tone8playNoteEff+0x3ec>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ff4:	c7 01       	movw	r24, r14
    1ff6:	b6 01       	movw	r22, r12
    1ff8:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    1ffc:	06 2f       	mov	r16, r22
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <_ZN4Tone8playNoteEff+0x3e6>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    2000:	01 e0       	ldi	r16, 0x01	; 1
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <_ZN4Tone8playNoteEff+0x3e6>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    2004:	80 2f       	mov	r24, r16
    2006:	8a 95       	dec	r24
    2008:	f1 f7       	brne	.-4      	; 0x2006 <_ZN4Tone8playNoteEff+0x3e8>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
    200a:	25 b1       	in	r18, 0x05	; 5
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	f1 01       	movw	r30, r2
    2012:	00 80       	ld	r0, Z
    2014:	02 c0       	rjmp	.+4      	; 0x201a <_ZN4Tone8playNoteEff+0x3fc>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <_ZN4Tone8playNoteEff+0x3f8>
    201e:	82 2b       	or	r24, r18
    2020:	85 b9       	out	0x05, r24	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	c7 01       	movw	r24, r14
    202c:	b6 01       	movw	r22, r12
    202e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    2032:	88 23       	and	r24, r24
    2034:	0c f4       	brge	.+2      	; 0x2038 <_ZN4Tone8playNoteEff+0x41a>
    2036:	6a c0       	rjmp	.+212    	; 0x210c <_ZN4Tone8playNoteEff+0x4ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	69 81       	ldd	r22, Y+1	; 0x01
    2042:	7a 81       	ldd	r23, Y+2	; 0x02
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    204c:	18 16       	cp	r1, r24
    204e:	0c f0       	brlt	.+2      	; 0x2052 <_ZN4Tone8playNoteEff+0x434>
    2050:	43 c0       	rjmp	.+134    	; 0x20d8 <_ZN4Tone8playNoteEff+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4a e7       	ldi	r20, 0x7A	; 122
    2058:	54 e4       	ldi	r21, 0x44	; 68
    205a:	c5 01       	movw	r24, r10
    205c:	b4 01       	movw	r22, r8
    205e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divsf3>
    2062:	4b 01       	movw	r8, r22
    2064:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a e7       	ldi	r20, 0x7A	; 122
    206c:	53 e4       	ldi	r21, 0x43	; 67
    206e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2072:	6b 01       	movw	r12, r22
    2074:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    2082:	88 23       	and	r24, r24
    2084:	1c f1       	brlt	.+70     	; 0x20cc <_ZN4Tone8playNoteEff+0x4ae>
		__ticks = 1;
	else if (__tmp > 65535)
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	c7 01       	movw	r24, r14
    2090:	b6 01       	movw	r22, r12
    2092:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    2096:	18 16       	cp	r1, r24
    2098:	a4 f4       	brge	.+40     	; 0x20c2 <_ZN4Tone8playNoteEff+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	c5 01       	movw	r24, r10
    20a4:	b4 01       	movw	r22, r8
    20a6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    20aa:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    20ae:	61 15       	cp	r22, r1
    20b0:	71 05       	cpc	r23, r1
    20b2:	71 f1       	breq	.+92     	; 0x2110 <_ZN4Tone8playNoteEff+0x4f2>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    20b4:	89 e1       	ldi	r24, 0x19	; 25
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <_ZN4Tone8playNoteEff+0x49a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	61 50       	subi	r22, 0x01	; 1
    20be:	71 09       	sbc	r23, r1
    20c0:	f6 cf       	rjmp	.-20     	; 0x20ae <_ZN4Tone8playNoteEff+0x490>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	c7 01       	movw	r24, r14
    20c4:	b6 01       	movw	r22, r12
    20c6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <_ZN4Tone8playNoteEff+0x4b2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	cb 01       	movw	r24, r22
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <_ZN4Tone8playNoteEff+0x4b4>
    20d6:	1c c0       	rjmp	.+56     	; 0x2110 <_ZN4Tone8playNoteEff+0x4f2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	53 e4       	ldi	r21, 0x43	; 67
    20e0:	c7 01       	movw	r24, r14
    20e2:	b6 01       	movw	r22, r12
    20e4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	54 f4       	brge	.+20     	; 0x2100 <_ZN4Tone8playNoteEff+0x4e2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    20ec:	69 81       	ldd	r22, Y+1	; 0x01
    20ee:	7a 81       	ldd	r23, Y+2	; 0x02
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    20f8:	cb 01       	movw	r24, r22
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <_ZN4Tone8playNoteEff+0x4dc>
    20fe:	0b c0       	rjmp	.+22     	; 0x2116 <_ZN4Tone8playNoteEff+0x4f8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    2108:	16 2f       	mov	r17, r22
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <_ZN4Tone8playNoteEff+0x4f2>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    210c:	11 e0       	ldi	r17, 0x01	; 1
    210e:	00 c0       	rjmp	.+0      	; 0x2110 <_ZN4Tone8playNoteEff+0x4f2>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    2110:	81 2f       	mov	r24, r17
    2112:	8a 95       	dec	r24
    2114:	f1 f7       	brne	.-4      	; 0x2112 <_ZN4Tone8playNoteEff+0x4f4>
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    2116:	25 b1       	in	r18, 0x05	; 5
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	f1 01       	movw	r30, r2
    211e:	00 80       	ld	r0, Z
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <_ZN4Tone8playNoteEff+0x508>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <_ZN4Tone8playNoteEff+0x504>
    212a:	80 95       	com	r24
    212c:	82 23       	and	r24, r18
    212e:	85 b9       	out	0x05, r24	; 5
		cycles=2*duration/wavelength;
		half_period = wavelength/2;

		
		
		for (int i=0;i<cycles;i++)
    2130:	29 89       	ldd	r18, Y+17	; 0x11
    2132:	3a 89       	ldd	r19, Y+18	; 0x12
    2134:	2f 5f       	subi	r18, 0xFF	; 255
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	3a 8b       	std	Y+18, r19	; 0x12
    213a:	29 8b       	std	Y+17, r18	; 0x11
    213c:	b6 ce       	rjmp	.-660    	; 0x1eaa <_ZN4Tone8playNoteEff+0x28c>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		}
	}
}
    213e:	62 96       	adiw	r28, 0x12	; 18
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	cf 90       	pop	r12
    215a:	bf 90       	pop	r11
    215c:	af 90       	pop	r10
    215e:	9f 90       	pop	r9
    2160:	8f 90       	pop	r8
    2162:	7f 90       	pop	r7
    2164:	6f 90       	pop	r6
    2166:	5f 90       	pop	r5
    2168:	4f 90       	pop	r4
    216a:	3f 90       	pop	r3
    216c:	2f 90       	pop	r2
    216e:	08 95       	ret

00002170 <_ZN4Tone7melody1Ev>:

//Notes and their durations.

char Tone::melody1()
{  char state='0';
    2170:	2f 92       	push	r2
    2172:	3f 92       	push	r3
    2174:	4f 92       	push	r4
    2176:	5f 92       	push	r5
    2178:	6f 92       	push	r6
    217a:	7f 92       	push	r7
    217c:	8f 92       	push	r8
    217e:	9f 92       	push	r9
    2180:	af 92       	push	r10
    2182:	bf 92       	push	r11
    2184:	cf 92       	push	r12
    2186:	df 92       	push	r13
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	65 97       	sbiw	r28, 0x15	; 21
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	6c 01       	movw	r12, r24
	int changing=0;
	int melody[] = {
		NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,0
	};
    21a6:	8a e0       	ldi	r24, 0x0A	; 10
    21a8:	e8 ed       	ldi	r30, 0xD8	; 216
    21aa:	f1 e0       	ldi	r31, 0x01	; 1
    21ac:	de 01       	movw	r26, r28
    21ae:	11 96       	adiw	r26, 0x01	; 1
    21b0:	01 90       	ld	r0, Z+
    21b2:	0d 92       	st	X+, r0
    21b4:	8a 95       	dec	r24
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <_ZN4Tone7melody1Ev+0x40>

	int noteDurations[] = {
		4,4,4,4,1
	};
    21b8:	8a e0       	ldi	r24, 0x0A	; 10
    21ba:	e2 ee       	ldi	r30, 0xE2	; 226
    21bc:	f1 e0       	ldi	r31, 0x01	; 1
    21be:	de 01       	movw	r26, r28
    21c0:	1b 96       	adiw	r26, 0x0b	; 11
    21c2:	01 90       	ld	r0, Z+
    21c4:	0d 92       	st	X+, r0
    21c6:	8a 95       	dec	r24
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <_ZN4Tone7melody1Ev+0x52>

//Notes and their durations.

char Tone::melody1()
{  char state='0';
	int changing=0;
    21ca:	21 2c       	mov	r2, r1
    21cc:	31 2c       	mov	r3, r1
}

//Notes and their durations.

char Tone::melody1()
{  char state='0';
    21ce:	80 e3       	ldi	r24, 0x30	; 48
    21d0:	8d 8b       	std	Y+21, r24	; 0x15
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <_ZN4Tone7melody1Ev+0x6a>
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    21d4:	22 24       	eor	r2, r2
    21d6:	23 94       	inc	r2
    21d8:	31 2c       	mov	r3, r1
		4,4,4,4,1
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
    21da:	21 14       	cp	r2, r1
    21dc:	31 04       	cpc	r3, r1
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_ZN4Tone7melody1Ev+0x72>
    21e0:	7a c0       	rjmp	.+244    	; 0x22d6 <_ZN4Tone7melody1Ev+0x166>
    21e2:	e1 2c       	mov	r14, r1
    21e4:	f1 2c       	mov	r15, r1
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    21e6:	95 e0       	ldi	r25, 0x05	; 5
    21e8:	e9 16       	cp	r14, r25
    21ea:	f1 04       	cpc	r15, r1
    21ec:	b4 f7       	brge	.-20     	; 0x21da <_ZN4Tone7melody1Ev+0x6a>
		{
			
			state=sc3.pressedButton();
    21ee:	85 ed       	ldi	r24, 0xD5	; 213
    21f0:	95 e0       	ldi	r25, 0x05	; 5
    21f2:	0e 94 30 03 	call	0x660	; 0x660 <_ZN6Screen13pressedButtonEv>
    21f6:	8d 8b       	std	Y+21, r24	; 0x15
			if (state !='0'){
    21f8:	80 33       	cpi	r24, 0x30	; 48
    21fa:	61 f7       	brne	.-40     	; 0x21d4 <_ZN4Tone7melody1Ev+0x64>
				changing=1;
				break;
			}
			
			float noteDuration = 200 / noteDurations[currentNote];
    21fc:	87 01       	movw	r16, r14
    21fe:	00 0f       	add	r16, r16
    2200:	11 1f       	adc	r17, r17
    2202:	e1 e0       	ldi	r30, 0x01	; 1
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	ec 0f       	add	r30, r28
    2208:	fd 1f       	adc	r31, r29
    220a:	0e 0f       	add	r16, r30
    220c:	1f 1f       	adc	r17, r31
    220e:	f8 01       	movw	r30, r16
    2210:	62 85       	ldd	r22, Z+10	; 0x0a
    2212:	73 85       	ldd	r23, Z+11	; 0x0b
    2214:	88 ec       	ldi	r24, 0xC8	; 200
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    221c:	07 2e       	mov	r0, r23
    221e:	00 0c       	add	r0, r0
    2220:	88 0b       	sbc	r24, r24
    2222:	99 0b       	sbc	r25, r25
    2224:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    2228:	2b 01       	movw	r4, r22
    222a:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    222c:	f8 01       	movw	r30, r16
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	07 2e       	mov	r0, r23
    2234:	00 0c       	add	r0, r0
    2236:	88 0b       	sbc	r24, r24
    2238:	99 0b       	sbc	r25, r25
    223a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    223e:	ab 01       	movw	r20, r22
    2240:	bc 01       	movw	r22, r24
    2242:	93 01       	movw	r18, r6
    2244:	82 01       	movw	r16, r4
    2246:	c6 01       	movw	r24, r12
    2248:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*2;
    224c:	a3 01       	movw	r20, r6
    224e:	92 01       	movw	r18, r4
    2250:	c3 01       	movw	r24, r6
    2252:	b2 01       	movw	r22, r4
    2254:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__addsf3>
    2258:	4b 01       	movw	r8, r22
    225a:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a e7       	ldi	r20, 0x7A	; 122
    2262:	53 e4       	ldi	r21, 0x43	; 67
    2264:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2268:	2b 01       	movw	r4, r22
    226a:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    2278:	88 23       	and	r24, r24
    227a:	1c f1       	brlt	.+70     	; 0x22c2 <_ZN4Tone7melody1Ev+0x152>
		__ticks = 1;
	else if (__tmp > 65535)
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	c3 01       	movw	r24, r6
    2286:	b2 01       	movw	r22, r4
    2288:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    228c:	18 16       	cp	r1, r24
    228e:	a4 f4       	brge	.+40     	; 0x22b8 <_ZN4Tone7melody1Ev+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	c5 01       	movw	r24, r10
    229a:	b4 01       	movw	r22, r8
    229c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    22a0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    22a4:	61 15       	cp	r22, r1
    22a6:	71 05       	cpc	r23, r1
    22a8:	89 f0       	breq	.+34     	; 0x22cc <_ZN4Tone7melody1Ev+0x15c>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    22aa:	89 e1       	ldi	r24, 0x19	; 25
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <_ZN4Tone7melody1Ev+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	61 50       	subi	r22, 0x01	; 1
    22b4:	71 09       	sbc	r23, r1
    22b6:	f6 cf       	rjmp	.-20     	; 0x22a4 <_ZN4Tone7melody1Ev+0x134>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	c3 01       	movw	r24, r6
    22ba:	b2 01       	movw	r22, r4
    22bc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <_ZN4Tone7melody1Ev+0x156>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	cb 01       	movw	r24, r22
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <_ZN4Tone7melody1Ev+0x158>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    22cc:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    22ce:	ff ef       	ldi	r31, 0xFF	; 255
    22d0:	ef 1a       	sub	r14, r31
    22d2:	ff 0a       	sbc	r15, r31
    22d4:	88 cf       	rjmp	.-240    	; 0x21e6 <_ZN4Tone7melody1Ev+0x76>
    22d6:	80 ea       	ldi	r24, 0xA0	; 160
    22d8:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	31 f0       	breq	.+12     	; 0x22ea <_ZN4Tone7melody1Ev+0x17a>
    22de:	e9 e1       	ldi	r30, 0x19	; 25
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	31 97       	sbiw	r30, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <_ZN4Tone7melody1Ev+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f8 cf       	rjmp	.-16     	; 0x22da <_ZN4Tone7melody1Ev+0x16a>
	}

	_delay_ms(400);
	
	return state;
}
    22ea:	8d 89       	ldd	r24, Y+21	; 0x15
    22ec:	65 96       	adiw	r28, 0x15	; 21
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	ff 90       	pop	r15
    2302:	ef 90       	pop	r14
    2304:	df 90       	pop	r13
    2306:	cf 90       	pop	r12
    2308:	bf 90       	pop	r11
    230a:	af 90       	pop	r10
    230c:	9f 90       	pop	r9
    230e:	8f 90       	pop	r8
    2310:	7f 90       	pop	r7
    2312:	6f 90       	pop	r6
    2314:	5f 90       	pop	r5
    2316:	4f 90       	pop	r4
    2318:	3f 90       	pop	r3
    231a:	2f 90       	pop	r2
    231c:	08 95       	ret

0000231e <_ZN4Tone7melody2Ev>:


char Tone:: melody2()
{  
    231e:	2f 92       	push	r2
    2320:	3f 92       	push	r3
    2322:	4f 92       	push	r4
    2324:	5f 92       	push	r5
    2326:	6f 92       	push	r6
    2328:	7f 92       	push	r7
    232a:	8f 92       	push	r8
    232c:	9f 92       	push	r9
    232e:	af 92       	push	r10
    2330:	bf 92       	push	r11
    2332:	cf 92       	push	r12
    2334:	df 92       	push	r13
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	c1 54       	subi	r28, 0x41	; 65
    2348:	d1 40       	sbci	r29, 0x01	; 1
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	6c 01       	movw	r12, r24
		NOTE_A4, 0, NOTE_A4, NOTE_A4,
		NOTE_C5, 0, NOTE_AS4, NOTE_A4,
		/*NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5*/ };
    2356:	80 ea       	ldi	r24, 0xA0	; 160
    2358:	ec ee       	ldi	r30, 0xEC	; 236
    235a:	f1 e0       	ldi	r31, 0x01	; 1
    235c:	de 01       	movw	r26, r28
    235e:	11 96       	adiw	r26, 0x01	; 1
    2360:	01 90       	ld	r0, Z+
    2362:	0d 92       	st	X+, r0
    2364:	8a 95       	dec	r24
    2366:	e1 f7       	brne	.-8      	; 0x2360 <_ZN4Tone7melody2Ev+0x42>
		4,4,4,4,
		4,4,4,4,
		/*4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4*/};
    2368:	80 ea       	ldi	r24, 0xA0	; 160
    236a:	ec e8       	ldi	r30, 0x8C	; 140
    236c:	f2 e0       	ldi	r31, 0x02	; 2
    236e:	de 01       	movw	r26, r28
    2370:	af 55       	subi	r26, 0x5F	; 95
    2372:	bf 4f       	sbci	r27, 0xFF	; 255
    2374:	01 90       	ld	r0, Z+
    2376:	0d 92       	st	X+, r0
    2378:	8a 95       	dec	r24
    237a:	e1 f7       	brne	.-8      	; 0x2374 <_ZN4Tone7melody2Ev+0x56>

char Tone:: melody2()
{  
	
	char state='0';
	int changing=0;
    237c:	21 2c       	mov	r2, r1
    237e:	31 2c       	mov	r3, r1


char Tone:: melody2()
{  
	
	char state='0';
    2380:	80 e3       	ldi	r24, 0x30	; 48
    2382:	cf 5b       	subi	r28, 0xBF	; 191
    2384:	de 4f       	sbci	r29, 0xFE	; 254
    2386:	88 83       	st	Y, r24
    2388:	c1 54       	subi	r28, 0x41	; 65
    238a:	d1 40       	sbci	r29, 0x01	; 1
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <_ZN4Tone7melody2Ev+0x76>
	{	
		for (int currentNote=0; currentNote<length;currentNote++)
		{   
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    238e:	22 24       	eor	r2, r2
    2390:	23 94       	inc	r2
    2392:	31 2c       	mov	r3, r1
		4,4,4,4,
		4,4,4,4*/};
		
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
    2394:	21 14       	cp	r2, r1
    2396:	31 04       	cpc	r3, r1
    2398:	09 f0       	breq	.+2      	; 0x239c <_ZN4Tone7melody2Ev+0x7e>
    239a:	84 c0       	rjmp	.+264    	; 0x24a4 <_ZN4Tone7melody2Ev+0x186>
    239c:	e1 2c       	mov	r14, r1
    239e:	f1 2c       	mov	r15, r1
	{	
		for (int currentNote=0; currentNote<length;currentNote++)
    23a0:	80 e5       	ldi	r24, 0x50	; 80
    23a2:	e8 16       	cp	r14, r24
    23a4:	f1 04       	cpc	r15, r1
    23a6:	b4 f7       	brge	.-20     	; 0x2394 <_ZN4Tone7melody2Ev+0x76>
		{   
			state=sc3.pressedButton();
    23a8:	85 ed       	ldi	r24, 0xD5	; 213
    23aa:	95 e0       	ldi	r25, 0x05	; 5
    23ac:	0e 94 30 03 	call	0x660	; 0x660 <_ZN6Screen13pressedButtonEv>
    23b0:	cf 5b       	subi	r28, 0xBF	; 191
    23b2:	de 4f       	sbci	r29, 0xFE	; 254
    23b4:	88 83       	st	Y, r24
    23b6:	c1 54       	subi	r28, 0x41	; 65
    23b8:	d1 40       	sbci	r29, 0x01	; 1
			if (state !='0'){
    23ba:	80 33       	cpi	r24, 0x30	; 48
    23bc:	41 f7       	brne	.-48     	; 0x238e <_ZN4Tone7melody2Ev+0x70>
				changing=1;
				break;
			}

			float noteDuration = 375 / noteDurations[currentNote];
    23be:	87 01       	movw	r16, r14
    23c0:	00 0f       	add	r16, r16
    23c2:	11 1f       	adc	r17, r17
    23c4:	e1 ea       	ldi	r30, 0xA1	; 161
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	ec 0f       	add	r30, r28
    23ca:	fd 1f       	adc	r31, r29
    23cc:	e0 0f       	add	r30, r16
    23ce:	f1 1f       	adc	r31, r17
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	87 e7       	ldi	r24, 0x77	; 119
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    23dc:	07 2e       	mov	r0, r23
    23de:	00 0c       	add	r0, r0
    23e0:	88 0b       	sbc	r24, r24
    23e2:	99 0b       	sbc	r25, r25
    23e4:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    23e8:	2b 01       	movw	r4, r22
    23ea:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    23ec:	e1 e0       	ldi	r30, 0x01	; 1
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	ec 0f       	add	r30, r28
    23f2:	fd 1f       	adc	r31, r29
    23f4:	e0 0f       	add	r30, r16
    23f6:	f1 1f       	adc	r31, r17
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	07 2e       	mov	r0, r23
    23fe:	00 0c       	add	r0, r0
    2400:	88 0b       	sbc	r24, r24
    2402:	99 0b       	sbc	r25, r25
    2404:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    2408:	ab 01       	movw	r20, r22
    240a:	bc 01       	movw	r22, r24
    240c:	93 01       	movw	r18, r6
    240e:	82 01       	movw	r16, r4
    2410:	c6 01       	movw	r24, r12
    2412:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
    2416:	26 e6       	ldi	r18, 0x66	; 102
    2418:	36 e6       	ldi	r19, 0x66	; 102
    241a:	46 ea       	ldi	r20, 0xA6	; 166
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	c3 01       	movw	r24, r6
    2420:	b2 01       	movw	r22, r4
    2422:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2426:	4b 01       	movw	r8, r22
    2428:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a e7       	ldi	r20, 0x7A	; 122
    2430:	53 e4       	ldi	r21, 0x43	; 67
    2432:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2436:	2b 01       	movw	r4, r22
    2438:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    2446:	88 23       	and	r24, r24
    2448:	1c f1       	brlt	.+70     	; 0x2490 <_ZN4Tone7melody2Ev+0x172>
		__ticks = 1;
	else if (__tmp > 65535)
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	3f ef       	ldi	r19, 0xFF	; 255
    244e:	4f e7       	ldi	r20, 0x7F	; 127
    2450:	57 e4       	ldi	r21, 0x47	; 71
    2452:	c3 01       	movw	r24, r6
    2454:	b2 01       	movw	r22, r4
    2456:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    245a:	18 16       	cp	r1, r24
    245c:	a4 f4       	brge	.+40     	; 0x2486 <_ZN4Tone7melody2Ev+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e2       	ldi	r20, 0x20	; 32
    2464:	51 e4       	ldi	r21, 0x41	; 65
    2466:	c5 01       	movw	r24, r10
    2468:	b4 01       	movw	r22, r8
    246a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    246e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    2472:	61 15       	cp	r22, r1
    2474:	71 05       	cpc	r23, r1
    2476:	89 f0       	breq	.+34     	; 0x249a <_ZN4Tone7melody2Ev+0x17c>
    2478:	89 e1       	ldi	r24, 0x19	; 25
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <_ZN4Tone7melody2Ev+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2480:	61 50       	subi	r22, 0x01	; 1
    2482:	71 09       	sbc	r23, r1
    2484:	f6 cf       	rjmp	.-20     	; 0x2472 <_ZN4Tone7melody2Ev+0x154>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	c3 01       	movw	r24, r6
    2488:	b2 01       	movw	r22, r4
    248a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <_ZN4Tone7melody2Ev+0x176>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	cb 01       	movw	r24, r22
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <_ZN4Tone7melody2Ev+0x178>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    249a:	15 b8       	out	0x05, r1	; 5
		
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
	{	
		for (int currentNote=0; currentNote<length;currentNote++)
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	e8 1a       	sub	r14, r24
    24a0:	f8 0a       	sbc	r15, r24
    24a2:	7e cf       	rjmp	.-260    	; 0x23a0 <_ZN4Tone7melody2Ev+0x82>
    24a4:	80 ea       	ldi	r24, 0xA0	; 160
    24a6:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	31 f0       	breq	.+12     	; 0x24b8 <_ZN4Tone7melody2Ev+0x19a>
    24ac:	e9 e1       	ldi	r30, 0x19	; 25
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	31 97       	sbiw	r30, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <_ZN4Tone7melody2Ev+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f8 cf       	rjmp	.-16     	; 0x24a8 <_ZN4Tone7melody2Ev+0x18a>
		
		
	}
	_delay_ms(400);
	return state;
}
    24b8:	cf 5b       	subi	r28, 0xBF	; 191
    24ba:	de 4f       	sbci	r29, 0xFE	; 254
    24bc:	88 81       	ld	r24, Y
    24be:	c1 54       	subi	r28, 0x41	; 65
    24c0:	d1 40       	sbci	r29, 0x01	; 1
    24c2:	cf 5b       	subi	r28, 0xBF	; 191
    24c4:	de 4f       	sbci	r29, 0xFE	; 254
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	bf 90       	pop	r11
    24e2:	af 90       	pop	r10
    24e4:	9f 90       	pop	r9
    24e6:	8f 90       	pop	r8
    24e8:	7f 90       	pop	r7
    24ea:	6f 90       	pop	r6
    24ec:	5f 90       	pop	r5
    24ee:	4f 90       	pop	r4
    24f0:	3f 90       	pop	r3
    24f2:	2f 90       	pop	r2
    24f4:	08 95       	ret

000024f6 <_ZN4Tone7melody3Ev>:

char Tone:: melody3()
{   char state='0';
    24f6:	2f 92       	push	r2
    24f8:	3f 92       	push	r3
    24fa:	4f 92       	push	r4
    24fc:	5f 92       	push	r5
    24fe:	6f 92       	push	r6
    2500:	7f 92       	push	r7
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	c1 59       	subi	r28, 0x91	; 145
    2520:	d1 09       	sbc	r29, r1
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	6c 01       	movw	r12, r24
		NOTE_E5, NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_B4, NOTE_C5, NOTE_C5, 0,
		NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_C5, NOTE_B4, NOTE_B4, 0,
		NOTE_C5, NOTE_A4, NOTE_B4, */
	};
    252e:	88 e4       	ldi	r24, 0x48	; 72
    2530:	ec e2       	ldi	r30, 0x2C	; 44
    2532:	f3 e0       	ldi	r31, 0x03	; 3
    2534:	de 01       	movw	r26, r28
    2536:	11 96       	adiw	r26, 0x01	; 1
    2538:	01 90       	ld	r0, Z+
    253a:	0d 92       	st	X+, r0
    253c:	8a 95       	dec	r24
    253e:	e1 f7       	brne	.-8      	; 0x2538 <_ZN4Tone7melody3Ev+0x42>
		8, 8, 8, 4, 8,
		8, 8, 4, 8, 8,
		4, 8, 4, 8,
		8, 8, 4, 8, 8,
		8, 8, 2 */
	};
    2540:	88 e4       	ldi	r24, 0x48	; 72
    2542:	e4 e7       	ldi	r30, 0x74	; 116
    2544:	f3 e0       	ldi	r31, 0x03	; 3
    2546:	de 01       	movw	r26, r28
    2548:	a7 5b       	subi	r26, 0xB7	; 183
    254a:	bf 4f       	sbci	r27, 0xFF	; 255
    254c:	01 90       	ld	r0, Z+
    254e:	0d 92       	st	X+, r0
    2550:	8a 95       	dec	r24
    2552:	e1 f7       	brne	.-8      	; 0x254c <_ZN4Tone7melody3Ev+0x56>
	return state;
}

char Tone:: melody3()
{   char state='0';
	int changing=0;
    2554:	21 2c       	mov	r2, r1
    2556:	31 2c       	mov	r3, r1
	_delay_ms(400);
	return state;
}

char Tone:: melody3()
{   char state='0';
    2558:	80 e3       	ldi	r24, 0x30	; 48
    255a:	cf 56       	subi	r28, 0x6F	; 111
    255c:	df 4f       	sbci	r29, 0xFF	; 255
    255e:	88 83       	st	Y, r24
    2560:	c1 59       	subi	r28, 0x91	; 145
    2562:	d0 40       	sbci	r29, 0x00	; 0
    2564:	03 c0       	rjmp	.+6      	; 0x256c <_ZN4Tone7melody3Ev+0x76>
	{ 
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    2566:	22 24       	eor	r2, r2
    2568:	23 94       	inc	r2
    256a:	31 2c       	mov	r3, r1
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	while (changing==0)
    256c:	21 14       	cp	r2, r1
    256e:	31 04       	cpc	r3, r1
    2570:	09 f0       	breq	.+2      	; 0x2574 <_ZN4Tone7melody3Ev+0x7e>
    2572:	84 c0       	rjmp	.+264    	; 0x267c <_ZN4Tone7melody3Ev+0x186>
    2574:	e1 2c       	mov	r14, r1
    2576:	f1 2c       	mov	r15, r1
	{ 
		for (int currentNote=0; currentNote<length;currentNote++)
    2578:	84 e2       	ldi	r24, 0x24	; 36
    257a:	e8 16       	cp	r14, r24
    257c:	f1 04       	cpc	r15, r1
    257e:	b4 f7       	brge	.-20     	; 0x256c <_ZN4Tone7melody3Ev+0x76>
		{
			state=sc3.pressedButton();
    2580:	85 ed       	ldi	r24, 0xD5	; 213
    2582:	95 e0       	ldi	r25, 0x05	; 5
    2584:	0e 94 30 03 	call	0x660	; 0x660 <_ZN6Screen13pressedButtonEv>
    2588:	cf 56       	subi	r28, 0x6F	; 111
    258a:	df 4f       	sbci	r29, 0xFF	; 255
    258c:	88 83       	st	Y, r24
    258e:	c1 59       	subi	r28, 0x91	; 145
    2590:	d0 40       	sbci	r29, 0x00	; 0
			if (state !='0'){
    2592:	80 33       	cpi	r24, 0x30	; 48
    2594:	41 f7       	brne	.-48     	; 0x2566 <_ZN4Tone7melody3Ev+0x70>
				changing=1;
				break;
			}
			
			float noteDuration = 375 / noteDurations[currentNote];
    2596:	87 01       	movw	r16, r14
    2598:	00 0f       	add	r16, r16
    259a:	11 1f       	adc	r17, r17
    259c:	e9 e4       	ldi	r30, 0x49	; 73
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ec 0f       	add	r30, r28
    25a2:	fd 1f       	adc	r31, r29
    25a4:	e0 0f       	add	r30, r16
    25a6:	f1 1f       	adc	r31, r17
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	87 e7       	ldi	r24, 0x77	; 119
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    25b4:	07 2e       	mov	r0, r23
    25b6:	00 0c       	add	r0, r0
    25b8:	88 0b       	sbc	r24, r24
    25ba:	99 0b       	sbc	r25, r25
    25bc:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    25c0:	2b 01       	movw	r4, r22
    25c2:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    25c4:	e1 e0       	ldi	r30, 0x01	; 1
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	ec 0f       	add	r30, r28
    25ca:	fd 1f       	adc	r31, r29
    25cc:	e0 0f       	add	r30, r16
    25ce:	f1 1f       	adc	r31, r17
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	07 2e       	mov	r0, r23
    25d6:	00 0c       	add	r0, r0
    25d8:	88 0b       	sbc	r24, r24
    25da:	99 0b       	sbc	r25, r25
    25dc:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    25e0:	ab 01       	movw	r20, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	93 01       	movw	r18, r6
    25e6:	82 01       	movw	r16, r4
    25e8:	c6 01       	movw	r24, r12
    25ea:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
    25ee:	26 e6       	ldi	r18, 0x66	; 102
    25f0:	36 e6       	ldi	r19, 0x66	; 102
    25f2:	46 ea       	ldi	r20, 0xA6	; 166
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	c3 01       	movw	r24, r6
    25f8:	b2 01       	movw	r22, r4
    25fa:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    25fe:	4b 01       	movw	r8, r22
    2600:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a e7       	ldi	r20, 0x7A	; 122
    2608:	53 e4       	ldi	r21, 0x43	; 67
    260a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    260e:	2b 01       	movw	r4, r22
    2610:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e8       	ldi	r20, 0x80	; 128
    2618:	5f e3       	ldi	r21, 0x3F	; 63
    261a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    261e:	88 23       	and	r24, r24
    2620:	1c f1       	brlt	.+70     	; 0x2668 <_ZN4Tone7melody3Ev+0x172>
		__ticks = 1;
	else if (__tmp > 65535)
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	c3 01       	movw	r24, r6
    262c:	b2 01       	movw	r22, r4
    262e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    2632:	18 16       	cp	r1, r24
    2634:	a4 f4       	brge	.+40     	; 0x265e <_ZN4Tone7melody3Ev+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	c5 01       	movw	r24, r10
    2640:	b4 01       	movw	r22, r8
    2642:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2646:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    264a:	61 15       	cp	r22, r1
    264c:	71 05       	cpc	r23, r1
    264e:	89 f0       	breq	.+34     	; 0x2672 <_ZN4Tone7melody3Ev+0x17c>
    2650:	89 e1       	ldi	r24, 0x19	; 25
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <_ZN4Tone7melody3Ev+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	61 50       	subi	r22, 0x01	; 1
    265a:	71 09       	sbc	r23, r1
    265c:	f6 cf       	rjmp	.-20     	; 0x264a <_ZN4Tone7melody3Ev+0x154>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	c3 01       	movw	r24, r6
    2660:	b2 01       	movw	r22, r4
    2662:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    2666:	02 c0       	rjmp	.+4      	; 0x266c <_ZN4Tone7melody3Ev+0x176>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	cb 01       	movw	r24, r22
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <_ZN4Tone7melody3Ev+0x178>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    2672:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	while (changing==0)
	{ 
		for (int currentNote=0; currentNote<length;currentNote++)
    2674:	8f ef       	ldi	r24, 0xFF	; 255
    2676:	e8 1a       	sub	r14, r24
    2678:	f8 0a       	sbc	r15, r24
    267a:	7e cf       	rjmp	.-260    	; 0x2578 <_ZN4Tone7melody3Ev+0x82>
    267c:	80 ea       	ldi	r24, 0xA0	; 160
    267e:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	31 f0       	breq	.+12     	; 0x2690 <_ZN4Tone7melody3Ev+0x19a>
    2684:	e9 e1       	ldi	r30, 0x19	; 25
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	31 97       	sbiw	r30, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <_ZN4Tone7melody3Ev+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f8 cf       	rjmp	.-16     	; 0x2680 <_ZN4Tone7melody3Ev+0x18a>
		
	}
	
	_delay_ms(400);
	return state;
}
    2690:	cf 56       	subi	r28, 0x6F	; 111
    2692:	df 4f       	sbci	r29, 0xFF	; 255
    2694:	88 81       	ld	r24, Y
    2696:	c1 59       	subi	r28, 0x91	; 145
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	cf 56       	subi	r28, 0x6F	; 111
    269c:	df 4f       	sbci	r29, 0xFF	; 255
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	ff 90       	pop	r15
    26b2:	ef 90       	pop	r14
    26b4:	df 90       	pop	r13
    26b6:	cf 90       	pop	r12
    26b8:	bf 90       	pop	r11
    26ba:	af 90       	pop	r10
    26bc:	9f 90       	pop	r9
    26be:	8f 90       	pop	r8
    26c0:	7f 90       	pop	r7
    26c2:	6f 90       	pop	r6
    26c4:	5f 90       	pop	r5
    26c6:	4f 90       	pop	r4
    26c8:	3f 90       	pop	r3
    26ca:	2f 90       	pop	r2
    26cc:	08 95       	ret

000026ce <_ZN4Tone7melody4Ev>:

char Tone:: melody4()
{   char state='0';
    26ce:	2f 92       	push	r2
    26d0:	3f 92       	push	r3
    26d2:	4f 92       	push	r4
    26d4:	5f 92       	push	r5
    26d6:	6f 92       	push	r6
    26d8:	7f 92       	push	r7
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	c5 55       	subi	r28, 0x55	; 85
    26f8:	d1 09       	sbc	r29, r1
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	6c 01       	movw	r12, r24
		NOTE_F4,NOTE_AS3,NOTE_DS4,NOTE_D4,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3 */
	};
    2706:	8a e2       	ldi	r24, 0x2A	; 42
    2708:	ec eb       	ldi	r30, 0xBC	; 188
    270a:	f3 e0       	ldi	r31, 0x03	; 3
    270c:	de 01       	movw	r26, r28
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	01 90       	ld	r0, Z+
    2712:	0d 92       	st	X+, r0
    2714:	8a 95       	dec	r24
    2716:	e1 f7       	brne	.-8      	; 0x2710 <_ZN4Tone7melody4Ev+0x42>
		6,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12*/
	};
    2718:	8a e2       	ldi	r24, 0x2A	; 42
    271a:	e6 ee       	ldi	r30, 0xE6	; 230
    271c:	f3 e0       	ldi	r31, 0x03	; 3
    271e:	de 01       	movw	r26, r28
    2720:	9b 96       	adiw	r26, 0x2b	; 43
    2722:	01 90       	ld	r0, Z+
    2724:	0d 92       	st	X+, r0
    2726:	8a 95       	dec	r24
    2728:	e1 f7       	brne	.-8      	; 0x2722 <_ZN4Tone7melody4Ev+0x54>
	return state;
}

char Tone:: melody4()
{   char state='0';
	int changing=0;
    272a:	21 2c       	mov	r2, r1
    272c:	31 2c       	mov	r3, r1
	_delay_ms(400);
	return state;
}

char Tone:: melody4()
{   char state='0';
    272e:	80 e3       	ldi	r24, 0x30	; 48
    2730:	66 96       	adiw	r28, 0x16	; 22
    2732:	8f af       	std	Y+63, r24	; 0x3f
    2734:	66 97       	sbiw	r28, 0x16	; 22
    2736:	03 c0       	rjmp	.+6      	; 0x273e <_ZN4Tone7melody4Ev+0x70>
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    2738:	22 24       	eor	r2, r2
    273a:	23 94       	inc	r2
    273c:	31 2c       	mov	r3, r1
		12*/
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
    273e:	21 14       	cp	r2, r1
    2740:	31 04       	cpc	r3, r1
    2742:	09 f0       	breq	.+2      	; 0x2746 <_ZN4Tone7melody4Ev+0x78>
    2744:	7e c0       	rjmp	.+252    	; 0x2842 <_ZN4Tone7melody4Ev+0x174>
    2746:	e1 2c       	mov	r14, r1
    2748:	f1 2c       	mov	r15, r1
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    274a:	95 e1       	ldi	r25, 0x15	; 21
    274c:	e9 16       	cp	r14, r25
    274e:	f1 04       	cpc	r15, r1
    2750:	b4 f7       	brge	.-20     	; 0x273e <_ZN4Tone7melody4Ev+0x70>
		{
			state=sc3.pressedButton();
    2752:	85 ed       	ldi	r24, 0xD5	; 213
    2754:	95 e0       	ldi	r25, 0x05	; 5
    2756:	0e 94 30 03 	call	0x660	; 0x660 <_ZN6Screen13pressedButtonEv>
    275a:	66 96       	adiw	r28, 0x16	; 22
    275c:	8f af       	std	Y+63, r24	; 0x3f
    275e:	66 97       	sbiw	r28, 0x16	; 22
			if (state !='0'){
    2760:	80 33       	cpi	r24, 0x30	; 48
    2762:	51 f7       	brne	.-44     	; 0x2738 <_ZN4Tone7melody4Ev+0x6a>
				changing=1;
				break;
			}
			
			float noteDuration = 1375 / noteDurations[currentNote];
    2764:	87 01       	movw	r16, r14
    2766:	00 0f       	add	r16, r16
    2768:	11 1f       	adc	r17, r17
    276a:	e1 e0       	ldi	r30, 0x01	; 1
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	ec 0f       	add	r30, r28
    2770:	fd 1f       	adc	r31, r29
    2772:	0e 0f       	add	r16, r30
    2774:	1f 1f       	adc	r17, r31
    2776:	f8 01       	movw	r30, r16
    2778:	62 a5       	ldd	r22, Z+42	; 0x2a
    277a:	73 a5       	ldd	r23, Z+43	; 0x2b
    277c:	8f e5       	ldi	r24, 0x5F	; 95
    277e:	95 e0       	ldi	r25, 0x05	; 5
    2780:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    2784:	07 2e       	mov	r0, r23
    2786:	00 0c       	add	r0, r0
    2788:	88 0b       	sbc	r24, r24
    278a:	99 0b       	sbc	r25, r25
    278c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    2790:	2b 01       	movw	r4, r22
    2792:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    2794:	f8 01       	movw	r30, r16
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	07 2e       	mov	r0, r23
    279c:	00 0c       	add	r0, r0
    279e:	88 0b       	sbc	r24, r24
    27a0:	99 0b       	sbc	r25, r25
    27a2:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    27a6:	ab 01       	movw	r20, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	93 01       	movw	r18, r6
    27ac:	82 01       	movw	r16, r4
    27ae:	c6 01       	movw	r24, r12
    27b0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
    27b4:	26 e6       	ldi	r18, 0x66	; 102
    27b6:	36 e6       	ldi	r19, 0x66	; 102
    27b8:	46 ea       	ldi	r20, 0xA6	; 166
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	c3 01       	movw	r24, r6
    27be:	b2 01       	movw	r22, r4
    27c0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    27c4:	4b 01       	movw	r8, r22
    27c6:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a e7       	ldi	r20, 0x7A	; 122
    27ce:	53 e4       	ldi	r21, 0x43	; 67
    27d0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    27d4:	2b 01       	movw	r4, r22
    27d6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e8       	ldi	r20, 0x80	; 128
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    27e4:	88 23       	and	r24, r24
    27e6:	1c f1       	brlt	.+70     	; 0x282e <_ZN4Tone7melody4Ev+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	c3 01       	movw	r24, r6
    27f2:	b2 01       	movw	r22, r4
    27f4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	a4 f4       	brge	.+40     	; 0x2824 <_ZN4Tone7melody4Ev+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	c5 01       	movw	r24, r10
    2806:	b4 01       	movw	r22, r8
    2808:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    280c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    2810:	61 15       	cp	r22, r1
    2812:	71 05       	cpc	r23, r1
    2814:	89 f0       	breq	.+34     	; 0x2838 <_ZN4Tone7melody4Ev+0x16a>
    2816:	89 e1       	ldi	r24, 0x19	; 25
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <_ZN4Tone7melody4Ev+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	61 50       	subi	r22, 0x01	; 1
    2820:	71 09       	sbc	r23, r1
    2822:	f6 cf       	rjmp	.-20     	; 0x2810 <_ZN4Tone7melody4Ev+0x142>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	c3 01       	movw	r24, r6
    2826:	b2 01       	movw	r22, r4
    2828:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <_ZN4Tone7melody4Ev+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	cb 01       	movw	r24, r22
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <_ZN4Tone7melody4Ev+0x166>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    2838:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    283a:	ff ef       	ldi	r31, 0xFF	; 255
    283c:	ef 1a       	sub	r14, r31
    283e:	ff 0a       	sbc	r15, r31
    2840:	84 cf       	rjmp	.-248    	; 0x274a <_ZN4Tone7melody4Ev+0x7c>
		}
		
	}
	
	return state;
}
    2842:	66 96       	adiw	r28, 0x16	; 22
    2844:	8f ad       	ldd	r24, Y+63	; 0x3f
    2846:	66 97       	sbiw	r28, 0x16	; 22
    2848:	cb 5a       	subi	r28, 0xAB	; 171
    284a:	df 4f       	sbci	r29, 0xFF	; 255
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	7f 90       	pop	r7
    2870:	6f 90       	pop	r6
    2872:	5f 90       	pop	r5
    2874:	4f 90       	pop	r4
    2876:	3f 90       	pop	r3
    2878:	2f 90       	pop	r2
    287a:	08 95       	ret

0000287c <_ZN4Tone7melody5Ev>:


char Tone:: melody5()
{  char state='0';
    287c:	2f 92       	push	r2
    287e:	3f 92       	push	r3
    2880:	4f 92       	push	r4
    2882:	5f 92       	push	r5
    2884:	6f 92       	push	r6
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	c9 57       	subi	r28, 0x79	; 121
    28a6:	d1 09       	sbc	r29, r1
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	6c 01       	movw	r12, r24
		0,NOTE_C5,NOTE_D5,NOTE_DS5,
		NOTE_DS5,NOTE_F5,NOTE_D5,NOTE_D5,
		NOTE_DS5,NOTE_C5,NOTE_C5,NOTE_D5,
		NOTE_B4,NOTE_GS4,NOTE_G4,NOTE_C5 */
		
	};
    28b4:	8c e3       	ldi	r24, 0x3C	; 60
    28b6:	e0 e1       	ldi	r30, 0x10	; 16
    28b8:	f4 e0       	ldi	r31, 0x04	; 4
    28ba:	de 01       	movw	r26, r28
    28bc:	11 96       	adiw	r26, 0x01	; 1
    28be:	01 90       	ld	r0, Z+
    28c0:	0d 92       	st	X+, r0
    28c2:	8a 95       	dec	r24
    28c4:	e1 f7       	brne	.-8      	; 0x28be <_ZN4Tone7melody5Ev+0x42>
		12,12,6,6,
		12,24,24,12,
		24,24,12,24,
		24,12,24,24,
		12,24,24,3*/
	};
    28c6:	8c e3       	ldi	r24, 0x3C	; 60
    28c8:	ec e4       	ldi	r30, 0x4C	; 76
    28ca:	f4 e0       	ldi	r31, 0x04	; 4
    28cc:	de 01       	movw	r26, r28
    28ce:	dd 96       	adiw	r26, 0x3d	; 61
    28d0:	01 90       	ld	r0, Z+
    28d2:	0d 92       	st	X+, r0
    28d4:	8a 95       	dec	r24
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <_ZN4Tone7melody5Ev+0x54>
}


char Tone:: melody5()
{  char state='0';
	int changing=0;
    28d8:	21 2c       	mov	r2, r1
    28da:	31 2c       	mov	r3, r1
	return state;
}


char Tone:: melody5()
{  char state='0';
    28dc:	80 e3       	ldi	r24, 0x30	; 48
    28de:	ea 96       	adiw	r28, 0x3a	; 58
    28e0:	8f af       	std	Y+63, r24	; 0x3f
    28e2:	ea 97       	sbiw	r28, 0x3a	; 58
    28e4:	03 c0       	rjmp	.+6      	; 0x28ec <_ZN4Tone7melody5Ev+0x70>
	{
			for (int currentNote=0; currentNote<length;currentNote++)
			{
				state=sc3.pressedButton();
				if (state !='0'){
					changing=1;
    28e6:	22 24       	eor	r2, r2
    28e8:	23 94       	inc	r2
    28ea:	31 2c       	mov	r3, r1
		12,24,24,3*/
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
    28ec:	21 14       	cp	r2, r1
    28ee:	31 04       	cpc	r3, r1
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <_ZN4Tone7melody5Ev+0x78>
    28f2:	7e c0       	rjmp	.+252    	; 0x29f0 <_ZN4Tone7melody5Ev+0x174>
    28f4:	e1 2c       	mov	r14, r1
    28f6:	f1 2c       	mov	r15, r1
	{
			for (int currentNote=0; currentNote<length;currentNote++)
    28f8:	9e e1       	ldi	r25, 0x1E	; 30
    28fa:	e9 16       	cp	r14, r25
    28fc:	f1 04       	cpc	r15, r1
    28fe:	b4 f7       	brge	.-20     	; 0x28ec <_ZN4Tone7melody5Ev+0x70>
			{
				state=sc3.pressedButton();
    2900:	85 ed       	ldi	r24, 0xD5	; 213
    2902:	95 e0       	ldi	r25, 0x05	; 5
    2904:	0e 94 30 03 	call	0x660	; 0x660 <_ZN6Screen13pressedButtonEv>
    2908:	ea 96       	adiw	r28, 0x3a	; 58
    290a:	8f af       	std	Y+63, r24	; 0x3f
    290c:	ea 97       	sbiw	r28, 0x3a	; 58
				if (state !='0'){
    290e:	80 33       	cpi	r24, 0x30	; 48
    2910:	51 f7       	brne	.-44     	; 0x28e6 <_ZN4Tone7melody5Ev+0x6a>
					changing=1;
					break;
				}
				
				float noteDuration = 375*3 / noteDurations[currentNote];
    2912:	87 01       	movw	r16, r14
    2914:	00 0f       	add	r16, r16
    2916:	11 1f       	adc	r17, r17
    2918:	e1 e0       	ldi	r30, 0x01	; 1
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ec 0f       	add	r30, r28
    291e:	fd 1f       	adc	r31, r29
    2920:	0e 0f       	add	r16, r30
    2922:	1f 1f       	adc	r17, r31
    2924:	f8 01       	movw	r30, r16
    2926:	64 ad       	ldd	r22, Z+60	; 0x3c
    2928:	75 ad       	ldd	r23, Z+61	; 0x3d
    292a:	85 e6       	ldi	r24, 0x65	; 101
    292c:	94 e0       	ldi	r25, 0x04	; 4
    292e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__divmodhi4>
    2932:	07 2e       	mov	r0, r23
    2934:	00 0c       	add	r0, r0
    2936:	88 0b       	sbc	r24, r24
    2938:	99 0b       	sbc	r25, r25
    293a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    293e:	2b 01       	movw	r4, r22
    2940:	3c 01       	movw	r6, r24
				playNote(melody[currentNote],noteDuration);
    2942:	f8 01       	movw	r30, r16
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	07 2e       	mov	r0, r23
    294a:	00 0c       	add	r0, r0
    294c:	88 0b       	sbc	r24, r24
    294e:	99 0b       	sbc	r25, r25
    2950:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__floatsisf>
    2954:	ab 01       	movw	r20, r22
    2956:	bc 01       	movw	r22, r24
    2958:	93 01       	movw	r18, r6
    295a:	82 01       	movw	r16, r4
    295c:	c6 01       	movw	r24, r12
    295e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN4Tone8playNoteEff>
				float pauseBetweenNotes= noteDuration*1.30;
    2962:	26 e6       	ldi	r18, 0x66	; 102
    2964:	36 e6       	ldi	r19, 0x66	; 102
    2966:	46 ea       	ldi	r20, 0xA6	; 166
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	c3 01       	movw	r24, r6
    296c:	b2 01       	movw	r22, r4
    296e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2972:	4b 01       	movw	r8, r22
    2974:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4a e7       	ldi	r20, 0x7A	; 122
    297c:	53 e4       	ldi	r21, 0x43	; 67
    297e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    2982:	2b 01       	movw	r4, r22
    2984:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__cmpsf2>
    2992:	88 23       	and	r24, r24
    2994:	1c f1       	brlt	.+70     	; 0x29dc <_ZN4Tone7melody5Ev+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	c3 01       	movw	r24, r6
    29a0:	b2 01       	movw	r22, r4
    29a2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__gesf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	a4 f4       	brge	.+40     	; 0x29d2 <_ZN4Tone7melody5Ev+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	c5 01       	movw	r24, r10
    29b4:	b4 01       	movw	r22, r8
    29b6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__mulsf3>
    29ba:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
		while(__ticks)
    29be:	61 15       	cp	r22, r1
    29c0:	71 05       	cpc	r23, r1
    29c2:	89 f0       	breq	.+34     	; 0x29e6 <_ZN4Tone7melody5Ev+0x16a>
    29c4:	89 e1       	ldi	r24, 0x19	; 25
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <_ZN4Tone7melody5Ev+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	61 50       	subi	r22, 0x01	; 1
    29ce:	71 09       	sbc	r23, r1
    29d0:	f6 cf       	rjmp	.-20     	; 0x29be <_ZN4Tone7melody5Ev+0x142>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	c3 01       	movw	r24, r6
    29d4:	b2 01       	movw	r22, r4
    29d6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <_ZN4Tone7melody5Ev+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	cb 01       	movw	r24, r22
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <_ZN4Tone7melody5Ev+0x166>
				_delay_ms (pauseBetweenNotes);
				SPEAKER_PORT=0;
    29e6:	15 b8       	out	0x05, r1	; 5
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
	{
			for (int currentNote=0; currentNote<length;currentNote++)
    29e8:	ff ef       	ldi	r31, 0xFF	; 255
    29ea:	ef 1a       	sub	r14, r31
    29ec:	ff 0a       	sbc	r15, r31
    29ee:	84 cf       	rjmp	.-248    	; 0x28f8 <_ZN4Tone7melody5Ev+0x7c>
    29f0:	80 ea       	ldi	r24, 0xA0	; 160
    29f2:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	31 f0       	breq	.+12     	; 0x2a04 <_ZN4Tone7melody5Ev+0x188>
    29f8:	e9 e1       	ldi	r30, 0x19	; 25
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	31 97       	sbiw	r30, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <_ZN4Tone7melody5Ev+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f8 cf       	rjmp	.-16     	; 0x29f4 <_ZN4Tone7melody5Ev+0x178>
			
		
	}
	_delay_ms(400);
	return state;
}
    2a04:	ea 96       	adiw	r28, 0x3a	; 58
    2a06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a08:	ea 97       	sbiw	r28, 0x3a	; 58
    2a0a:	c7 58       	subi	r28, 0x87	; 135
    2a0c:	df 4f       	sbci	r29, 0xFF	; 255
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	9f 90       	pop	r9
    2a2e:	8f 90       	pop	r8
    2a30:	7f 90       	pop	r7
    2a32:	6f 90       	pop	r6
    2a34:	5f 90       	pop	r5
    2a36:	4f 90       	pop	r4
    2a38:	3f 90       	pop	r3
    2a3a:	2f 90       	pop	r2
    2a3c:	08 95       	ret

00002a3e <_ZN4Tone10playMelodyEi>:

char Tone:: playMelody(int number){
char _btn ='0';
	switch (number) {
    2a3e:	62 30       	cpi	r22, 0x02	; 2
    2a40:	71 05       	cpc	r23, r1
    2a42:	a9 f0       	breq	.+42     	; 0x2a6e <_ZN4Tone10playMelodyEi+0x30>
    2a44:	3c f4       	brge	.+14     	; 0x2a54 <_ZN4Tone10playMelodyEi+0x16>
    2a46:	61 15       	cp	r22, r1
    2a48:	71 05       	cpc	r23, r1
    2a4a:	59 f0       	breq	.+22     	; 0x2a62 <_ZN4Tone10playMelodyEi+0x24>
    2a4c:	61 30       	cpi	r22, 0x01	; 1
    2a4e:	71 05       	cpc	r23, r1
    2a50:	59 f0       	breq	.+22     	; 0x2a68 <_ZN4Tone10playMelodyEi+0x2a>
    2a52:	16 c0       	rjmp	.+44     	; 0x2a80 <_ZN4Tone10playMelodyEi+0x42>
    2a54:	63 30       	cpi	r22, 0x03	; 3
    2a56:	71 05       	cpc	r23, r1
    2a58:	69 f0       	breq	.+26     	; 0x2a74 <_ZN4Tone10playMelodyEi+0x36>
    2a5a:	64 30       	cpi	r22, 0x04	; 4
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <_ZN4Tone10playMelodyEi+0x3c>
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <_ZN4Tone10playMelodyEi+0x42>
		case 0:
		_btn = melody1();
    2a62:	0e 94 b8 10 	call	0x2170	; 0x2170 <_ZN4Tone7melody1Ev>
		break;
    2a66:	08 95       	ret
		case 1:
		_btn = melody2();
    2a68:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZN4Tone7melody2Ev>
		break;
    2a6c:	08 95       	ret
		case 2:
		_btn = melody3();
    2a6e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <_ZN4Tone7melody3Ev>
		break;
    2a72:	08 95       	ret
		case 3:
		_btn = melody4();
    2a74:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZN4Tone7melody4Ev>
		break;
    2a78:	08 95       	ret
		case 4:
		_btn = melody5();
    2a7a:	0e 94 3e 14 	call	0x287c	; 0x287c <_ZN4Tone7melody5Ev>
		break;
    2a7e:	08 95       	ret
	_delay_ms(400);
	return state;
}

char Tone:: playMelody(int number){
char _btn ='0';
    2a80:	80 e3       	ldi	r24, 0x30	; 48
		case 4:
		_btn = melody5();
		break;
	}
	return _btn;
    2a82:	08 95       	ret

00002a84 <__subsf3>:
    2a84:	50 58       	subi	r21, 0x80	; 128

00002a86 <__addsf3>:
    2a86:	bb 27       	eor	r27, r27
    2a88:	aa 27       	eor	r26, r26
    2a8a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__addsf3x>
    2a8e:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_round>
    2a92:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__fp_pscA>
    2a96:	38 f0       	brcs	.+14     	; 0x2aa6 <__addsf3+0x20>
    2a98:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fp_pscB>
    2a9c:	20 f0       	brcs	.+8      	; 0x2aa6 <__addsf3+0x20>
    2a9e:	39 f4       	brne	.+14     	; 0x2aae <__addsf3+0x28>
    2aa0:	9f 3f       	cpi	r25, 0xFF	; 255
    2aa2:	19 f4       	brne	.+6      	; 0x2aaa <__addsf3+0x24>
    2aa4:	26 f4       	brtc	.+8      	; 0x2aae <__addsf3+0x28>
    2aa6:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__fp_nan>
    2aaa:	0e f4       	brtc	.+2      	; 0x2aae <__addsf3+0x28>
    2aac:	e0 95       	com	r30
    2aae:	e7 fb       	bst	r30, 7
    2ab0:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__fp_inf>

00002ab4 <__addsf3x>:
    2ab4:	e9 2f       	mov	r30, r25
    2ab6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__fp_split3>
    2aba:	58 f3       	brcs	.-42     	; 0x2a92 <__addsf3+0xc>
    2abc:	ba 17       	cp	r27, r26
    2abe:	62 07       	cpc	r22, r18
    2ac0:	73 07       	cpc	r23, r19
    2ac2:	84 07       	cpc	r24, r20
    2ac4:	95 07       	cpc	r25, r21
    2ac6:	20 f0       	brcs	.+8      	; 0x2ad0 <__addsf3x+0x1c>
    2ac8:	79 f4       	brne	.+30     	; 0x2ae8 <__addsf3x+0x34>
    2aca:	a6 f5       	brtc	.+104    	; 0x2b34 <__addsf3x+0x80>
    2acc:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__fp_zero>
    2ad0:	0e f4       	brtc	.+2      	; 0x2ad4 <__addsf3x+0x20>
    2ad2:	e0 95       	com	r30
    2ad4:	0b 2e       	mov	r0, r27
    2ad6:	ba 2f       	mov	r27, r26
    2ad8:	a0 2d       	mov	r26, r0
    2ada:	0b 01       	movw	r0, r22
    2adc:	b9 01       	movw	r22, r18
    2ade:	90 01       	movw	r18, r0
    2ae0:	0c 01       	movw	r0, r24
    2ae2:	ca 01       	movw	r24, r20
    2ae4:	a0 01       	movw	r20, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	ff 27       	eor	r31, r31
    2aea:	59 1b       	sub	r21, r25
    2aec:	99 f0       	breq	.+38     	; 0x2b14 <__addsf3x+0x60>
    2aee:	59 3f       	cpi	r21, 0xF9	; 249
    2af0:	50 f4       	brcc	.+20     	; 0x2b06 <__addsf3x+0x52>
    2af2:	50 3e       	cpi	r21, 0xE0	; 224
    2af4:	68 f1       	brcs	.+90     	; 0x2b50 <__addsf3x+0x9c>
    2af6:	1a 16       	cp	r1, r26
    2af8:	f0 40       	sbci	r31, 0x00	; 0
    2afa:	a2 2f       	mov	r26, r18
    2afc:	23 2f       	mov	r18, r19
    2afe:	34 2f       	mov	r19, r20
    2b00:	44 27       	eor	r20, r20
    2b02:	58 5f       	subi	r21, 0xF8	; 248
    2b04:	f3 cf       	rjmp	.-26     	; 0x2aec <__addsf3x+0x38>
    2b06:	46 95       	lsr	r20
    2b08:	37 95       	ror	r19
    2b0a:	27 95       	ror	r18
    2b0c:	a7 95       	ror	r26
    2b0e:	f0 40       	sbci	r31, 0x00	; 0
    2b10:	53 95       	inc	r21
    2b12:	c9 f7       	brne	.-14     	; 0x2b06 <__addsf3x+0x52>
    2b14:	7e f4       	brtc	.+30     	; 0x2b34 <__addsf3x+0x80>
    2b16:	1f 16       	cp	r1, r31
    2b18:	ba 0b       	sbc	r27, r26
    2b1a:	62 0b       	sbc	r22, r18
    2b1c:	73 0b       	sbc	r23, r19
    2b1e:	84 0b       	sbc	r24, r20
    2b20:	ba f0       	brmi	.+46     	; 0x2b50 <__addsf3x+0x9c>
    2b22:	91 50       	subi	r25, 0x01	; 1
    2b24:	a1 f0       	breq	.+40     	; 0x2b4e <__addsf3x+0x9a>
    2b26:	ff 0f       	add	r31, r31
    2b28:	bb 1f       	adc	r27, r27
    2b2a:	66 1f       	adc	r22, r22
    2b2c:	77 1f       	adc	r23, r23
    2b2e:	88 1f       	adc	r24, r24
    2b30:	c2 f7       	brpl	.-16     	; 0x2b22 <__addsf3x+0x6e>
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <__addsf3x+0x9c>
    2b34:	ba 0f       	add	r27, r26
    2b36:	62 1f       	adc	r22, r18
    2b38:	73 1f       	adc	r23, r19
    2b3a:	84 1f       	adc	r24, r20
    2b3c:	48 f4       	brcc	.+18     	; 0x2b50 <__addsf3x+0x9c>
    2b3e:	87 95       	ror	r24
    2b40:	77 95       	ror	r23
    2b42:	67 95       	ror	r22
    2b44:	b7 95       	ror	r27
    2b46:	f7 95       	ror	r31
    2b48:	9e 3f       	cpi	r25, 0xFE	; 254
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <__addsf3x+0x9a>
    2b4c:	b0 cf       	rjmp	.-160    	; 0x2aae <__addsf3+0x28>
    2b4e:	93 95       	inc	r25
    2b50:	88 0f       	add	r24, r24
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <__addsf3x+0xa2>
    2b54:	99 27       	eor	r25, r25
    2b56:	ee 0f       	add	r30, r30
    2b58:	97 95       	ror	r25
    2b5a:	87 95       	ror	r24
    2b5c:	08 95       	ret

00002b5e <__cmpsf2>:
    2b5e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__fp_cmp>
    2b62:	08 f4       	brcc	.+2      	; 0x2b66 <__cmpsf2+0x8>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	08 95       	ret

00002b68 <__divsf3>:
    2b68:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__divsf3x>
    2b6c:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_round>
    2b70:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fp_pscB>
    2b74:	58 f0       	brcs	.+22     	; 0x2b8c <__divsf3+0x24>
    2b76:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__fp_pscA>
    2b7a:	40 f0       	brcs	.+16     	; 0x2b8c <__divsf3+0x24>
    2b7c:	29 f4       	brne	.+10     	; 0x2b88 <__divsf3+0x20>
    2b7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b80:	29 f0       	breq	.+10     	; 0x2b8c <__divsf3+0x24>
    2b82:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__fp_inf>
    2b86:	51 11       	cpse	r21, r1
    2b88:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_szero>
    2b8c:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__fp_nan>

00002b90 <__divsf3x>:
    2b90:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__fp_split3>
    2b94:	68 f3       	brcs	.-38     	; 0x2b70 <__divsf3+0x8>

00002b96 <__divsf3_pse>:
    2b96:	99 23       	and	r25, r25
    2b98:	b1 f3       	breq	.-20     	; 0x2b86 <__divsf3+0x1e>
    2b9a:	55 23       	and	r21, r21
    2b9c:	91 f3       	breq	.-28     	; 0x2b82 <__divsf3+0x1a>
    2b9e:	95 1b       	sub	r25, r21
    2ba0:	55 0b       	sbc	r21, r21
    2ba2:	bb 27       	eor	r27, r27
    2ba4:	aa 27       	eor	r26, r26
    2ba6:	62 17       	cp	r22, r18
    2ba8:	73 07       	cpc	r23, r19
    2baa:	84 07       	cpc	r24, r20
    2bac:	38 f0       	brcs	.+14     	; 0x2bbc <__divsf3_pse+0x26>
    2bae:	9f 5f       	subi	r25, 0xFF	; 255
    2bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb2:	22 0f       	add	r18, r18
    2bb4:	33 1f       	adc	r19, r19
    2bb6:	44 1f       	adc	r20, r20
    2bb8:	aa 1f       	adc	r26, r26
    2bba:	a9 f3       	breq	.-22     	; 0x2ba6 <__divsf3_pse+0x10>
    2bbc:	35 d0       	rcall	.+106    	; 0x2c28 <__divsf3_pse+0x92>
    2bbe:	0e 2e       	mov	r0, r30
    2bc0:	3a f0       	brmi	.+14     	; 0x2bd0 <__divsf3_pse+0x3a>
    2bc2:	e0 e8       	ldi	r30, 0x80	; 128
    2bc4:	32 d0       	rcall	.+100    	; 0x2c2a <__divsf3_pse+0x94>
    2bc6:	91 50       	subi	r25, 0x01	; 1
    2bc8:	50 40       	sbci	r21, 0x00	; 0
    2bca:	e6 95       	lsr	r30
    2bcc:	00 1c       	adc	r0, r0
    2bce:	ca f7       	brpl	.-14     	; 0x2bc2 <__divsf3_pse+0x2c>
    2bd0:	2b d0       	rcall	.+86     	; 0x2c28 <__divsf3_pse+0x92>
    2bd2:	fe 2f       	mov	r31, r30
    2bd4:	29 d0       	rcall	.+82     	; 0x2c28 <__divsf3_pse+0x92>
    2bd6:	66 0f       	add	r22, r22
    2bd8:	77 1f       	adc	r23, r23
    2bda:	88 1f       	adc	r24, r24
    2bdc:	bb 1f       	adc	r27, r27
    2bde:	26 17       	cp	r18, r22
    2be0:	37 07       	cpc	r19, r23
    2be2:	48 07       	cpc	r20, r24
    2be4:	ab 07       	cpc	r26, r27
    2be6:	b0 e8       	ldi	r27, 0x80	; 128
    2be8:	09 f0       	breq	.+2      	; 0x2bec <__divsf3_pse+0x56>
    2bea:	bb 0b       	sbc	r27, r27
    2bec:	80 2d       	mov	r24, r0
    2bee:	bf 01       	movw	r22, r30
    2bf0:	ff 27       	eor	r31, r31
    2bf2:	93 58       	subi	r25, 0x83	; 131
    2bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf6:	3a f0       	brmi	.+14     	; 0x2c06 <__divsf3_pse+0x70>
    2bf8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bfa:	51 05       	cpc	r21, r1
    2bfc:	78 f0       	brcs	.+30     	; 0x2c1c <__divsf3_pse+0x86>
    2bfe:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__fp_inf>
    2c02:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_szero>
    2c06:	5f 3f       	cpi	r21, 0xFF	; 255
    2c08:	e4 f3       	brlt	.-8      	; 0x2c02 <__divsf3_pse+0x6c>
    2c0a:	98 3e       	cpi	r25, 0xE8	; 232
    2c0c:	d4 f3       	brlt	.-12     	; 0x2c02 <__divsf3_pse+0x6c>
    2c0e:	86 95       	lsr	r24
    2c10:	77 95       	ror	r23
    2c12:	67 95       	ror	r22
    2c14:	b7 95       	ror	r27
    2c16:	f7 95       	ror	r31
    2c18:	9f 5f       	subi	r25, 0xFF	; 255
    2c1a:	c9 f7       	brne	.-14     	; 0x2c0e <__divsf3_pse+0x78>
    2c1c:	88 0f       	add	r24, r24
    2c1e:	91 1d       	adc	r25, r1
    2c20:	96 95       	lsr	r25
    2c22:	87 95       	ror	r24
    2c24:	97 f9       	bld	r25, 7
    2c26:	08 95       	ret
    2c28:	e1 e0       	ldi	r30, 0x01	; 1
    2c2a:	66 0f       	add	r22, r22
    2c2c:	77 1f       	adc	r23, r23
    2c2e:	88 1f       	adc	r24, r24
    2c30:	bb 1f       	adc	r27, r27
    2c32:	62 17       	cp	r22, r18
    2c34:	73 07       	cpc	r23, r19
    2c36:	84 07       	cpc	r24, r20
    2c38:	ba 07       	cpc	r27, r26
    2c3a:	20 f0       	brcs	.+8      	; 0x2c44 <__divsf3_pse+0xae>
    2c3c:	62 1b       	sub	r22, r18
    2c3e:	73 0b       	sbc	r23, r19
    2c40:	84 0b       	sbc	r24, r20
    2c42:	ba 0b       	sbc	r27, r26
    2c44:	ee 1f       	adc	r30, r30
    2c46:	88 f7       	brcc	.-30     	; 0x2c2a <__divsf3_pse+0x94>
    2c48:	e0 95       	com	r30
    2c4a:	08 95       	ret

00002c4c <__fixsfsi>:
    2c4c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__fixunssfsi>
    2c50:	68 94       	set
    2c52:	b1 11       	cpse	r27, r1
    2c54:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_szero>
    2c58:	08 95       	ret

00002c5a <__fixunssfsi>:
    2c5a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <__fp_splitA>
    2c5e:	88 f0       	brcs	.+34     	; 0x2c82 <__fixunssfsi+0x28>
    2c60:	9f 57       	subi	r25, 0x7F	; 127
    2c62:	98 f0       	brcs	.+38     	; 0x2c8a <__fixunssfsi+0x30>
    2c64:	b9 2f       	mov	r27, r25
    2c66:	99 27       	eor	r25, r25
    2c68:	b7 51       	subi	r27, 0x17	; 23
    2c6a:	b0 f0       	brcs	.+44     	; 0x2c98 <__fixunssfsi+0x3e>
    2c6c:	e1 f0       	breq	.+56     	; 0x2ca6 <__fixunssfsi+0x4c>
    2c6e:	66 0f       	add	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	88 1f       	adc	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	1a f0       	brmi	.+6      	; 0x2c7e <__fixunssfsi+0x24>
    2c78:	ba 95       	dec	r27
    2c7a:	c9 f7       	brne	.-14     	; 0x2c6e <__fixunssfsi+0x14>
    2c7c:	14 c0       	rjmp	.+40     	; 0x2ca6 <__fixunssfsi+0x4c>
    2c7e:	b1 30       	cpi	r27, 0x01	; 1
    2c80:	91 f0       	breq	.+36     	; 0x2ca6 <__fixunssfsi+0x4c>
    2c82:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__fp_zero>
    2c86:	b1 e0       	ldi	r27, 0x01	; 1
    2c88:	08 95       	ret
    2c8a:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__fp_zero>
    2c8e:	67 2f       	mov	r22, r23
    2c90:	78 2f       	mov	r23, r24
    2c92:	88 27       	eor	r24, r24
    2c94:	b8 5f       	subi	r27, 0xF8	; 248
    2c96:	39 f0       	breq	.+14     	; 0x2ca6 <__fixunssfsi+0x4c>
    2c98:	b9 3f       	cpi	r27, 0xF9	; 249
    2c9a:	cc f3       	brlt	.-14     	; 0x2c8e <__fixunssfsi+0x34>
    2c9c:	86 95       	lsr	r24
    2c9e:	77 95       	ror	r23
    2ca0:	67 95       	ror	r22
    2ca2:	b3 95       	inc	r27
    2ca4:	d9 f7       	brne	.-10     	; 0x2c9c <__fixunssfsi+0x42>
    2ca6:	3e f4       	brtc	.+14     	; 0x2cb6 <__fixunssfsi+0x5c>
    2ca8:	90 95       	com	r25
    2caa:	80 95       	com	r24
    2cac:	70 95       	com	r23
    2cae:	61 95       	neg	r22
    2cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb6:	08 95       	ret

00002cb8 <__floatunsisf>:
    2cb8:	e8 94       	clt
    2cba:	09 c0       	rjmp	.+18     	; 0x2cce <__floatsisf+0x12>

00002cbc <__floatsisf>:
    2cbc:	97 fb       	bst	r25, 7
    2cbe:	3e f4       	brtc	.+14     	; 0x2cce <__floatsisf+0x12>
    2cc0:	90 95       	com	r25
    2cc2:	80 95       	com	r24
    2cc4:	70 95       	com	r23
    2cc6:	61 95       	neg	r22
    2cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cca:	8f 4f       	sbci	r24, 0xFF	; 255
    2ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cce:	99 23       	and	r25, r25
    2cd0:	a9 f0       	breq	.+42     	; 0x2cfc <__floatsisf+0x40>
    2cd2:	f9 2f       	mov	r31, r25
    2cd4:	96 e9       	ldi	r25, 0x96	; 150
    2cd6:	bb 27       	eor	r27, r27
    2cd8:	93 95       	inc	r25
    2cda:	f6 95       	lsr	r31
    2cdc:	87 95       	ror	r24
    2cde:	77 95       	ror	r23
    2ce0:	67 95       	ror	r22
    2ce2:	b7 95       	ror	r27
    2ce4:	f1 11       	cpse	r31, r1
    2ce6:	f8 cf       	rjmp	.-16     	; 0x2cd8 <__floatsisf+0x1c>
    2ce8:	fa f4       	brpl	.+62     	; 0x2d28 <__floatsisf+0x6c>
    2cea:	bb 0f       	add	r27, r27
    2cec:	11 f4       	brne	.+4      	; 0x2cf2 <__floatsisf+0x36>
    2cee:	60 ff       	sbrs	r22, 0
    2cf0:	1b c0       	rjmp	.+54     	; 0x2d28 <__floatsisf+0x6c>
    2cf2:	6f 5f       	subi	r22, 0xFF	; 255
    2cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfa:	16 c0       	rjmp	.+44     	; 0x2d28 <__floatsisf+0x6c>
    2cfc:	88 23       	and	r24, r24
    2cfe:	11 f0       	breq	.+4      	; 0x2d04 <__floatsisf+0x48>
    2d00:	96 e9       	ldi	r25, 0x96	; 150
    2d02:	11 c0       	rjmp	.+34     	; 0x2d26 <__floatsisf+0x6a>
    2d04:	77 23       	and	r23, r23
    2d06:	21 f0       	breq	.+8      	; 0x2d10 <__floatsisf+0x54>
    2d08:	9e e8       	ldi	r25, 0x8E	; 142
    2d0a:	87 2f       	mov	r24, r23
    2d0c:	76 2f       	mov	r23, r22
    2d0e:	05 c0       	rjmp	.+10     	; 0x2d1a <__floatsisf+0x5e>
    2d10:	66 23       	and	r22, r22
    2d12:	71 f0       	breq	.+28     	; 0x2d30 <__floatsisf+0x74>
    2d14:	96 e8       	ldi	r25, 0x86	; 134
    2d16:	86 2f       	mov	r24, r22
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	2a f0       	brmi	.+10     	; 0x2d28 <__floatsisf+0x6c>
    2d1e:	9a 95       	dec	r25
    2d20:	66 0f       	add	r22, r22
    2d22:	77 1f       	adc	r23, r23
    2d24:	88 1f       	adc	r24, r24
    2d26:	da f7       	brpl	.-10     	; 0x2d1e <__floatsisf+0x62>
    2d28:	88 0f       	add	r24, r24
    2d2a:	96 95       	lsr	r25
    2d2c:	87 95       	ror	r24
    2d2e:	97 f9       	bld	r25, 7
    2d30:	08 95       	ret

00002d32 <__fp_cmp>:
    2d32:	99 0f       	add	r25, r25
    2d34:	00 08       	sbc	r0, r0
    2d36:	55 0f       	add	r21, r21
    2d38:	aa 0b       	sbc	r26, r26
    2d3a:	e0 e8       	ldi	r30, 0x80	; 128
    2d3c:	fe ef       	ldi	r31, 0xFE	; 254
    2d3e:	16 16       	cp	r1, r22
    2d40:	17 06       	cpc	r1, r23
    2d42:	e8 07       	cpc	r30, r24
    2d44:	f9 07       	cpc	r31, r25
    2d46:	c0 f0       	brcs	.+48     	; 0x2d78 <__fp_cmp+0x46>
    2d48:	12 16       	cp	r1, r18
    2d4a:	13 06       	cpc	r1, r19
    2d4c:	e4 07       	cpc	r30, r20
    2d4e:	f5 07       	cpc	r31, r21
    2d50:	98 f0       	brcs	.+38     	; 0x2d78 <__fp_cmp+0x46>
    2d52:	62 1b       	sub	r22, r18
    2d54:	73 0b       	sbc	r23, r19
    2d56:	84 0b       	sbc	r24, r20
    2d58:	95 0b       	sbc	r25, r21
    2d5a:	39 f4       	brne	.+14     	; 0x2d6a <__fp_cmp+0x38>
    2d5c:	0a 26       	eor	r0, r26
    2d5e:	61 f0       	breq	.+24     	; 0x2d78 <__fp_cmp+0x46>
    2d60:	23 2b       	or	r18, r19
    2d62:	24 2b       	or	r18, r20
    2d64:	25 2b       	or	r18, r21
    2d66:	21 f4       	brne	.+8      	; 0x2d70 <__fp_cmp+0x3e>
    2d68:	08 95       	ret
    2d6a:	0a 26       	eor	r0, r26
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <__fp_cmp+0x3e>
    2d6e:	a1 40       	sbci	r26, 0x01	; 1
    2d70:	a6 95       	lsr	r26
    2d72:	8f ef       	ldi	r24, 0xFF	; 255
    2d74:	81 1d       	adc	r24, r1
    2d76:	81 1d       	adc	r24, r1
    2d78:	08 95       	ret

00002d7a <__fp_inf>:
    2d7a:	97 f9       	bld	r25, 7
    2d7c:	9f 67       	ori	r25, 0x7F	; 127
    2d7e:	80 e8       	ldi	r24, 0x80	; 128
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	08 95       	ret

00002d86 <__fp_nan>:
    2d86:	9f ef       	ldi	r25, 0xFF	; 255
    2d88:	80 ec       	ldi	r24, 0xC0	; 192
    2d8a:	08 95       	ret

00002d8c <__fp_pscA>:
    2d8c:	00 24       	eor	r0, r0
    2d8e:	0a 94       	dec	r0
    2d90:	16 16       	cp	r1, r22
    2d92:	17 06       	cpc	r1, r23
    2d94:	18 06       	cpc	r1, r24
    2d96:	09 06       	cpc	r0, r25
    2d98:	08 95       	ret

00002d9a <__fp_pscB>:
    2d9a:	00 24       	eor	r0, r0
    2d9c:	0a 94       	dec	r0
    2d9e:	12 16       	cp	r1, r18
    2da0:	13 06       	cpc	r1, r19
    2da2:	14 06       	cpc	r1, r20
    2da4:	05 06       	cpc	r0, r21
    2da6:	08 95       	ret

00002da8 <__fp_round>:
    2da8:	09 2e       	mov	r0, r25
    2daa:	03 94       	inc	r0
    2dac:	00 0c       	add	r0, r0
    2dae:	11 f4       	brne	.+4      	; 0x2db4 <__fp_round+0xc>
    2db0:	88 23       	and	r24, r24
    2db2:	52 f0       	brmi	.+20     	; 0x2dc8 <__fp_round+0x20>
    2db4:	bb 0f       	add	r27, r27
    2db6:	40 f4       	brcc	.+16     	; 0x2dc8 <__fp_round+0x20>
    2db8:	bf 2b       	or	r27, r31
    2dba:	11 f4       	brne	.+4      	; 0x2dc0 <__fp_round+0x18>
    2dbc:	60 ff       	sbrs	r22, 0
    2dbe:	04 c0       	rjmp	.+8      	; 0x2dc8 <__fp_round+0x20>
    2dc0:	6f 5f       	subi	r22, 0xFF	; 255
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	08 95       	ret

00002dca <__fp_split3>:
    2dca:	57 fd       	sbrc	r21, 7
    2dcc:	90 58       	subi	r25, 0x80	; 128
    2dce:	44 0f       	add	r20, r20
    2dd0:	55 1f       	adc	r21, r21
    2dd2:	59 f0       	breq	.+22     	; 0x2dea <__fp_splitA+0x10>
    2dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    2dd6:	71 f0       	breq	.+28     	; 0x2df4 <__fp_splitA+0x1a>
    2dd8:	47 95       	ror	r20

00002dda <__fp_splitA>:
    2dda:	88 0f       	add	r24, r24
    2ddc:	97 fb       	bst	r25, 7
    2dde:	99 1f       	adc	r25, r25
    2de0:	61 f0       	breq	.+24     	; 0x2dfa <__fp_splitA+0x20>
    2de2:	9f 3f       	cpi	r25, 0xFF	; 255
    2de4:	79 f0       	breq	.+30     	; 0x2e04 <__fp_splitA+0x2a>
    2de6:	87 95       	ror	r24
    2de8:	08 95       	ret
    2dea:	12 16       	cp	r1, r18
    2dec:	13 06       	cpc	r1, r19
    2dee:	14 06       	cpc	r1, r20
    2df0:	55 1f       	adc	r21, r21
    2df2:	f2 cf       	rjmp	.-28     	; 0x2dd8 <__fp_split3+0xe>
    2df4:	46 95       	lsr	r20
    2df6:	f1 df       	rcall	.-30     	; 0x2dda <__fp_splitA>
    2df8:	08 c0       	rjmp	.+16     	; 0x2e0a <__fp_splitA+0x30>
    2dfa:	16 16       	cp	r1, r22
    2dfc:	17 06       	cpc	r1, r23
    2dfe:	18 06       	cpc	r1, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	f1 cf       	rjmp	.-30     	; 0x2de6 <__fp_splitA+0xc>
    2e04:	86 95       	lsr	r24
    2e06:	71 05       	cpc	r23, r1
    2e08:	61 05       	cpc	r22, r1
    2e0a:	08 94       	sec
    2e0c:	08 95       	ret

00002e0e <__fp_zero>:
    2e0e:	e8 94       	clt

00002e10 <__fp_szero>:
    2e10:	bb 27       	eor	r27, r27
    2e12:	66 27       	eor	r22, r22
    2e14:	77 27       	eor	r23, r23
    2e16:	cb 01       	movw	r24, r22
    2e18:	97 f9       	bld	r25, 7
    2e1a:	08 95       	ret

00002e1c <__gesf2>:
    2e1c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <__fp_cmp>
    2e20:	08 f4       	brcc	.+2      	; 0x2e24 <__gesf2+0x8>
    2e22:	8f ef       	ldi	r24, 0xFF	; 255
    2e24:	08 95       	ret

00002e26 <__mulsf3>:
    2e26:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <__mulsf3x>
    2e2a:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_round>
    2e2e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__fp_pscA>
    2e32:	38 f0       	brcs	.+14     	; 0x2e42 <__mulsf3+0x1c>
    2e34:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__fp_pscB>
    2e38:	20 f0       	brcs	.+8      	; 0x2e42 <__mulsf3+0x1c>
    2e3a:	95 23       	and	r25, r21
    2e3c:	11 f0       	breq	.+4      	; 0x2e42 <__mulsf3+0x1c>
    2e3e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__fp_inf>
    2e42:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__fp_nan>
    2e46:	11 24       	eor	r1, r1
    2e48:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_szero>

00002e4c <__mulsf3x>:
    2e4c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <__fp_split3>
    2e50:	70 f3       	brcs	.-36     	; 0x2e2e <__mulsf3+0x8>

00002e52 <__mulsf3_pse>:
    2e52:	95 9f       	mul	r25, r21
    2e54:	c1 f3       	breq	.-16     	; 0x2e46 <__mulsf3+0x20>
    2e56:	95 0f       	add	r25, r21
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	55 1f       	adc	r21, r21
    2e5c:	62 9f       	mul	r22, r18
    2e5e:	f0 01       	movw	r30, r0
    2e60:	72 9f       	mul	r23, r18
    2e62:	bb 27       	eor	r27, r27
    2e64:	f0 0d       	add	r31, r0
    2e66:	b1 1d       	adc	r27, r1
    2e68:	63 9f       	mul	r22, r19
    2e6a:	aa 27       	eor	r26, r26
    2e6c:	f0 0d       	add	r31, r0
    2e6e:	b1 1d       	adc	r27, r1
    2e70:	aa 1f       	adc	r26, r26
    2e72:	64 9f       	mul	r22, r20
    2e74:	66 27       	eor	r22, r22
    2e76:	b0 0d       	add	r27, r0
    2e78:	a1 1d       	adc	r26, r1
    2e7a:	66 1f       	adc	r22, r22
    2e7c:	82 9f       	mul	r24, r18
    2e7e:	22 27       	eor	r18, r18
    2e80:	b0 0d       	add	r27, r0
    2e82:	a1 1d       	adc	r26, r1
    2e84:	62 1f       	adc	r22, r18
    2e86:	73 9f       	mul	r23, r19
    2e88:	b0 0d       	add	r27, r0
    2e8a:	a1 1d       	adc	r26, r1
    2e8c:	62 1f       	adc	r22, r18
    2e8e:	83 9f       	mul	r24, r19
    2e90:	a0 0d       	add	r26, r0
    2e92:	61 1d       	adc	r22, r1
    2e94:	22 1f       	adc	r18, r18
    2e96:	74 9f       	mul	r23, r20
    2e98:	33 27       	eor	r19, r19
    2e9a:	a0 0d       	add	r26, r0
    2e9c:	61 1d       	adc	r22, r1
    2e9e:	23 1f       	adc	r18, r19
    2ea0:	84 9f       	mul	r24, r20
    2ea2:	60 0d       	add	r22, r0
    2ea4:	21 1d       	adc	r18, r1
    2ea6:	82 2f       	mov	r24, r18
    2ea8:	76 2f       	mov	r23, r22
    2eaa:	6a 2f       	mov	r22, r26
    2eac:	11 24       	eor	r1, r1
    2eae:	9f 57       	subi	r25, 0x7F	; 127
    2eb0:	50 40       	sbci	r21, 0x00	; 0
    2eb2:	9a f0       	brmi	.+38     	; 0x2eda <__mulsf3_pse+0x88>
    2eb4:	f1 f0       	breq	.+60     	; 0x2ef2 <__mulsf3_pse+0xa0>
    2eb6:	88 23       	and	r24, r24
    2eb8:	4a f0       	brmi	.+18     	; 0x2ecc <__mulsf3_pse+0x7a>
    2eba:	ee 0f       	add	r30, r30
    2ebc:	ff 1f       	adc	r31, r31
    2ebe:	bb 1f       	adc	r27, r27
    2ec0:	66 1f       	adc	r22, r22
    2ec2:	77 1f       	adc	r23, r23
    2ec4:	88 1f       	adc	r24, r24
    2ec6:	91 50       	subi	r25, 0x01	; 1
    2ec8:	50 40       	sbci	r21, 0x00	; 0
    2eca:	a9 f7       	brne	.-22     	; 0x2eb6 <__mulsf3_pse+0x64>
    2ecc:	9e 3f       	cpi	r25, 0xFE	; 254
    2ece:	51 05       	cpc	r21, r1
    2ed0:	80 f0       	brcs	.+32     	; 0x2ef2 <__mulsf3_pse+0xa0>
    2ed2:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__fp_inf>
    2ed6:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_szero>
    2eda:	5f 3f       	cpi	r21, 0xFF	; 255
    2edc:	e4 f3       	brlt	.-8      	; 0x2ed6 <__mulsf3_pse+0x84>
    2ede:	98 3e       	cpi	r25, 0xE8	; 232
    2ee0:	d4 f3       	brlt	.-12     	; 0x2ed6 <__mulsf3_pse+0x84>
    2ee2:	86 95       	lsr	r24
    2ee4:	77 95       	ror	r23
    2ee6:	67 95       	ror	r22
    2ee8:	b7 95       	ror	r27
    2eea:	f7 95       	ror	r31
    2eec:	e7 95       	ror	r30
    2eee:	9f 5f       	subi	r25, 0xFF	; 255
    2ef0:	c1 f7       	brne	.-16     	; 0x2ee2 <__mulsf3_pse+0x90>
    2ef2:	fe 2b       	or	r31, r30
    2ef4:	88 0f       	add	r24, r24
    2ef6:	91 1d       	adc	r25, r1
    2ef8:	96 95       	lsr	r25
    2efa:	87 95       	ror	r24
    2efc:	97 f9       	bld	r25, 7
    2efe:	08 95       	ret

00002f00 <__divmodhi4>:
    2f00:	97 fb       	bst	r25, 7
    2f02:	07 2e       	mov	r0, r23
    2f04:	16 f4       	brtc	.+4      	; 0x2f0a <__divmodhi4+0xa>
    2f06:	00 94       	com	r0
    2f08:	07 d0       	rcall	.+14     	; 0x2f18 <__divmodhi4_neg1>
    2f0a:	77 fd       	sbrc	r23, 7
    2f0c:	09 d0       	rcall	.+18     	; 0x2f20 <__divmodhi4_neg2>
    2f0e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__udivmodhi4>
    2f12:	07 fc       	sbrc	r0, 7
    2f14:	05 d0       	rcall	.+10     	; 0x2f20 <__divmodhi4_neg2>
    2f16:	3e f4       	brtc	.+14     	; 0x2f26 <__divmodhi4_exit>

00002f18 <__divmodhi4_neg1>:
    2f18:	90 95       	com	r25
    2f1a:	81 95       	neg	r24
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	08 95       	ret

00002f20 <__divmodhi4_neg2>:
    2f20:	70 95       	com	r23
    2f22:	61 95       	neg	r22
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255

00002f26 <__divmodhi4_exit>:
    2f26:	08 95       	ret

00002f28 <__udivmodhi4>:
    2f28:	aa 1b       	sub	r26, r26
    2f2a:	bb 1b       	sub	r27, r27
    2f2c:	51 e1       	ldi	r21, 0x11	; 17
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <__udivmodhi4_ep>

00002f30 <__udivmodhi4_loop>:
    2f30:	aa 1f       	adc	r26, r26
    2f32:	bb 1f       	adc	r27, r27
    2f34:	a6 17       	cp	r26, r22
    2f36:	b7 07       	cpc	r27, r23
    2f38:	10 f0       	brcs	.+4      	; 0x2f3e <__udivmodhi4_ep>
    2f3a:	a6 1b       	sub	r26, r22
    2f3c:	b7 0b       	sbc	r27, r23

00002f3e <__udivmodhi4_ep>:
    2f3e:	88 1f       	adc	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	5a 95       	dec	r21
    2f44:	a9 f7       	brne	.-22     	; 0x2f30 <__udivmodhi4_loop>
    2f46:	80 95       	com	r24
    2f48:	90 95       	com	r25
    2f4a:	bc 01       	movw	r22, r24
    2f4c:	cd 01       	movw	r24, r26
    2f4e:	08 95       	ret

00002f50 <__tablejump2__>:
    2f50:	ee 0f       	add	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	05 90       	lpm	r0, Z+
    2f56:	f4 91       	lpm	r31, Z
    2f58:	e0 2d       	mov	r30, r0
    2f5a:	09 94       	ijmp

00002f5c <_exit>:
    2f5c:	f8 94       	cli

00002f5e <__stop_program>:
    2f5e:	ff cf       	rjmp	.-2      	; 0x2f5e <__stop_program>
