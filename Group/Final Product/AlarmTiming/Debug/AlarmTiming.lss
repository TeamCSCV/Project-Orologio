
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00001504  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080023c  0080023c  000016d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052d0  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ee  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e2f  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000734  00000000  00000000  00009e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c14  00000000  00000000  0000a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003359  00000000  00000000  0000b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000e515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	37 02       	muls	r19, r23

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e4 e0       	ldi	r30, 0x04	; 4
      7e:	f5 e1       	ldi	r31, 0x15	; 21
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ac 33       	cpi	r26, 0x3C	; 60
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	22 e0       	ldi	r18, 0x02	; 2
      8e:	ac e3       	ldi	r26, 0x3C	; 60
      90:	b2 e0       	ldi	r27, 0x02	; 2
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a7 35       	cpi	r26, 0x57	; 87
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
      b6:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
      be:	9d ec       	ldi	r25, 0xCD	; 205
      c0:	89 9f       	mul	r24, r25
      c2:	91 2d       	mov	r25, r1
      c4:	11 24       	eor	r1, r1
      c6:	96 95       	lsr	r25
      c8:	96 95       	lsr	r25
      ca:	96 95       	lsr	r25
      cc:	29 2f       	mov	r18, r25
      ce:	22 0f       	add	r18, r18
      d0:	92 0f       	add	r25, r18
      d2:	29 2f       	mov	r18, r25
      d4:	22 0f       	add	r18, r18
}
      d6:	82 0f       	add	r24, r18
      d8:	08 95       	ret

000000da <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	35 95       	asr	r19
      e0:	27 95       	ror	r18
      e2:	35 95       	asr	r19
      e4:	27 95       	ror	r18
      e6:	35 95       	asr	r19
      e8:	27 95       	ror	r18
      ea:	35 95       	asr	r19
      ec:	27 95       	ror	r18
      ee:	92 2f       	mov	r25, r18
      f0:	99 0f       	add	r25, r25
      f2:	29 0f       	add	r18, r25
      f4:	92 2f       	mov	r25, r18
      f6:	99 0f       	add	r25, r25
}
      f8:	89 1b       	sub	r24, r25
      fa:	08 95       	ret

000000fc <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
      fc:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     100:	83 e0       	ldi	r24, 0x03	; 3
     102:	8a 95       	dec	r24
     104:	f1 f7       	brne	.-4      	; 0x102 <_Z11ds1307_initv+0x6>
     106:	00 00       	nop
     108:	08 95       	ret

0000010a <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
     10a:	cf 92       	push	r12
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	c8 2f       	mov	r28, r24
     11a:	d6 2f       	mov	r29, r22
     11c:	14 2f       	mov	r17, r20
     11e:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
     120:	80 ed       	ldi	r24, 0xD0	; 208
     122:	0e 94 4a 01 	call	0x294	; 0x294 <_Z14i2c_start_waith>
	i2c_write(0x00);
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
     12c:	8c 2d       	mov	r24, r12
     12e:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     132:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
     136:	8e 2d       	mov	r24, r14
     138:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     13c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
     140:	80 2f       	mov	r24, r16
     142:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     146:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
     14a:	8f 2d       	mov	r24, r15
     14c:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     150:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
     154:	81 2f       	mov	r24, r17
     156:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     15a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
     15e:	8d 2f       	mov	r24, r29
     160:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     164:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
     168:	8c 2f       	mov	r24, r28
     16a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14ds1307_dec2bcdh>
     16e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(0x00);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_stop();
     178:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	cf 90       	pop	r12
     18a:	08 95       	ret

0000018c <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
     18c:	6f 92       	push	r6
     18e:	7f 92       	push	r7
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
     1aa:	3b 01       	movw	r6, r22
     1ac:	5a 01       	movw	r10, r20
     1ae:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
     1b0:	80 ed       	ldi	r24, 0xD0	; 208
     1b2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z14i2c_start_waith>
	i2c_write(0x00);
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_stop();
     1bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
     1c0:	81 ed       	ldi	r24, 0xD1	; 209
     1c2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     1c6:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1ca:	8f 77       	andi	r24, 0x7F	; 127
     1cc:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     1d0:	f6 01       	movw	r30, r12
     1d2:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
     1d4:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1d8:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     1dc:	f7 01       	movw	r30, r14
     1de:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
     1e0:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1e4:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     1e8:	f8 01       	movw	r30, r16
     1ea:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
     1ec:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1f0:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     1f4:	f4 01       	movw	r30, r8
     1f6:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
     1f8:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1fc:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     200:	f5 01       	movw	r30, r10
     202:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
     204:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     208:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     20c:	f3 01       	movw	r30, r6
     20e:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
     210:	0e 94 98 01 	call	0x330	; 0x330 <_Z11i2c_readNakv>
     214:	0e 94 6d 00 	call	0xda	; 0xda <_Z14ds1307_bcd2dech>
     218:	88 83       	st	Y, r24
	i2c_stop();
     21a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	8f 90       	pop	r8
     236:	7f 90       	pop	r7
     238:	6f 90       	pop	r6
     23a:	08 95       	ret

0000023c <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     23c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     240:	8d ef       	ldi	r24, 0xFD	; 253
     242:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     246:	08 95       	ret

00000248 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     248:	94 ea       	ldi	r25, 0xA4	; 164
     24a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     24e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     252:	99 23       	and	r25, r25
     254:	e4 f7       	brge	.-8      	; 0x24e <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     256:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     25a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     25c:	98 30       	cpi	r25, 0x08	; 8
     25e:	11 f0       	breq	.+4      	; 0x264 <_Z9i2c_starth+0x1c>
     260:	90 31       	cpi	r25, 0x10	; 16
     262:	91 f4       	brne	.+36     	; 0x288 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
     264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     268:	84 e8       	ldi	r24, 0x84	; 132
     26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     26e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     272:	88 23       	and	r24, r24
     274:	e4 f7       	brge	.-8      	; 0x26e <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     27a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     27c:	88 31       	cpi	r24, 0x18	; 24
     27e:	31 f0       	breq	.+12     	; 0x28c <_Z9i2c_starth+0x44>
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	31 f4       	brne	.+12     	; 0x290 <_Z9i2c_starth+0x48>

	return 0;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     290:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     292:	08 95       	ret

00000294 <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     294:	94 ea       	ldi	r25, 0xA4	; 164
     296:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     29a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29e:	99 23       	and	r25, r25
     2a0:	e4 f7       	brge	.-8      	; 0x29a <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2a6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     2a8:	98 30       	cpi	r25, 0x08	; 8
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <_Z14i2c_start_waith+0x1c>
     2ac:	90 31       	cpi	r25, 0x10	; 16
     2ae:	91 f7       	brne	.-28     	; 0x294 <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
     2b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
     2b4:	94 e8       	ldi	r25, 0x84	; 132
     2b6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     2ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2be:	99 23       	and	r25, r25
     2c0:	e4 f7       	brge	.-8      	; 0x2ba <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2c6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     2c8:	90 32       	cpi	r25, 0x20	; 32
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <_Z14i2c_start_waith+0x3c>
     2cc:	98 35       	cpi	r25, 0x58	; 88
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2d0:	94 e9       	ldi	r25, 0x94	; 148
     2d2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2d6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2da:	94 fd       	sbrc	r25, 4
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <_Z14i2c_start_waith+0x42>
     2de:	da cf       	rjmp	.-76     	; 0x294 <_Z14i2c_start_waith>
     2e0:	08 95       	ret

000002e2 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2e2:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_starth>

}/* i2c_rep_start */
     2e6:	08 95       	ret

000002e8 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2e8:	84 e9       	ldi	r24, 0x94	; 148
     2ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2f2:	84 fd       	sbrc	r24, 4
     2f4:	fc cf       	rjmp	.-8      	; 0x2ee <_Z8i2c_stopv+0x6>

}/* i2c_stop */
     2f6:	08 95       	ret

000002f8 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     2fc:	84 e8       	ldi	r24, 0x84	; 132
     2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     302:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     306:	88 23       	and	r24, r24
     308:	e4 f7       	brge	.-8      	; 0x302 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     30a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     30e:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     310:	88 32       	cpi	r24, 0x28	; 40
     312:	11 f0       	breq	.+4      	; 0x318 <_Z9i2c_writeh+0x20>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	08 95       	ret
	return 0;
     318:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
     31a:	08 95       	ret

0000031c <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     31c:	84 ec       	ldi	r24, 0xC4	; 196
     31e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     322:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     326:	88 23       	and	r24, r24
     328:	e4 f7       	brge	.-8      	; 0x322 <_Z11i2c_readAckv+0x6>

    return TWDR;
     32a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     32e:	08 95       	ret

00000330 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     330:	84 e8       	ldi	r24, 0x84	; 132
     332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     336:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     33a:	88 23       	and	r24, r24
     33c:	e4 f7       	brge	.-8      	; 0x336 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
     33e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     342:	08 95       	ret

00000344 <_ZN7Key_Pad8keyInputEv>:
char keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	while (1){
		if (sc2.pressedBack()){
     344:	8c e3       	ldi	r24, 0x3C	; 60
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 41 03 	call	0x682	; 0x682 <_ZN6Screen11pressedBackEv>
     34c:	88 23       	and	r24, r24
     34e:	51 f0       	breq	.+20     	; 0x364 <_ZN7Key_Pad8keyInputEv+0x20>
			sc2.stopBlink();
     350:	8c e3       	ldi	r24, 0x3C	; 60
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
			sc2.LCD_clear();
     358:	8c e3       	ldi	r24, 0x3C	; 60
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
			mainMenu();
     360:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z8mainMenuv>

		}
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
     364:	88 b1       	in	r24, 0x08	; 8
     366:	8f 60       	ori	r24, 0x0F	; 15
     368:	88 b9       	out	0x08, r24	; 8
		for (int r=0; r<=3; r++){
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	44 30       	cpi	r20, 0x04	; 4
     370:	51 05       	cpc	r21, r1
     372:	0c f0       	brlt	.+2      	; 0x376 <_ZN7Key_Pad8keyInputEv+0x32>
     374:	4f c0       	rjmp	.+158    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
     376:	87 b1       	in	r24, 0x07	; 7
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	87 b9       	out	0x07, r24	; 7
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
     37c:	84 b1       	in	r24, 0x04	; 4
     37e:	88 7f       	andi	r24, 0xF8	; 248
     380:	84 b9       	out	0x04, r24	; 4
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
     382:	27 b1       	in	r18, 0x07	; 7
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	04 2e       	mov	r0, r20
     38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN7Key_Pad8keyInputEv+0x4c>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN7Key_Pad8keyInputEv+0x48>
     394:	92 2f       	mov	r25, r18
     396:	98 2b       	or	r25, r24
     398:	97 b9       	out	0x07, r25	; 7
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
     39a:	98 b1       	in	r25, 0x08	; 8
     39c:	80 95       	com	r24
     39e:	89 23       	and	r24, r25
     3a0:	88 b9       	out	0x08, r24	; 8
			for (int c=0; c<=2; c++){
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	23 30       	cpi	r18, 0x03	; 3
     3a8:	31 05       	cpc	r19, r1
     3aa:	8c f5       	brge	.+98     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				KEYCOL_PORT |= (0b00000001 << c);
     3ac:	65 b1       	in	r22, 0x05	; 5
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 2e       	mov	r0, r18
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <_ZN7Key_Pad8keyInputEv+0x76>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <_ZN7Key_Pad8keyInputEv+0x72>
     3be:	86 2b       	or	r24, r22
     3c0:	85 b9       	out	0x05, r24	; 5
				if (!(KEYCOL_PIN & (0b00000001 << c))){ // check each column in the respective row for a pressed key
     3c2:	83 b1       	in	r24, 0x03	; 3
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 2e       	mov	r0, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_ZN7Key_Pad8keyInputEv+0x8a>
     3ca:	95 95       	asr	r25
     3cc:	87 95       	ror	r24
     3ce:	0a 94       	dec	r0
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_ZN7Key_Pad8keyInputEv+0x86>
     3d2:	80 fd       	sbrc	r24, 0
     3d4:	19 c0       	rjmp	.+50     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					char pressed = keys[r][c]; // obtain the pressed key
     3d6:	ca 01       	movw	r24, r20
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	48 0f       	add	r20, r24
     3de:	59 1f       	adc	r21, r25
     3e0:	40 50       	subi	r20, 0x00	; 0
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	fa 01       	movw	r30, r20
     3e6:	e2 0f       	add	r30, r18
     3e8:	f3 1f       	adc	r31, r19
     3ea:	80 81       	ld	r24, Z
					if ((pressed!='*') & (pressed!='#')){
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	8a 32       	cpi	r24, 0x2A	; 42
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <_ZN7Key_Pad8keyInputEv+0xb0>
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	99 23       	and	r25, r25
     3f6:	31 f0       	breq	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	83 32       	cpi	r24, 0x23	; 35
     3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	91 11       	cpse	r25, r1
     402:	09 c0       	rjmp	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
						return pressed;
					}
					return 'X';
     404:	88 e5       	ldi	r24, 0x58	; 88
     406:	08 95       	ret
		for (int r=0; r<=3; r++){
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
			for (int c=0; c<=2; c++){
     408:	2f 5f       	subi	r18, 0xFF	; 255
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	cc cf       	rjmp	.-104    	; 0x3a6 <_ZN7Key_Pad8keyInputEv+0x62>
			sc2.LCD_clear();
			mainMenu();

		}
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
		for (int r=0; r<=3; r++){
     40e:	4f 5f       	subi	r20, 0xFF	; 255
     410:	5f 4f       	sbci	r21, 0xFF	; 255
     412:	ad cf       	rjmp	.-166    	; 0x36e <_ZN7Key_Pad8keyInputEv+0x2a>
					}
					return 'X';
				}
			}
		}
	return 'X';}
     414:	88 e5       	ldi	r24, 0x58	; 88
}
     416:	08 95       	ret

00000418 <_ZN7Key_Pad10pressedKeyEv>:

char Key_Pad :: pressedKey(){
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
	while (1){
	char key = keyInput();
     41e:	ce 01       	movw	r24, r28
     420:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN7Key_Pad8keyInputEv>
	if (key != 'X'){
     424:	88 35       	cpi	r24, 0x58	; 88
     426:	d9 f3       	breq	.-10     	; 0x41e <_ZN7Key_Pad10pressedKeyEv+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     428:	2f e7       	ldi	r18, 0x7F	; 127
     42a:	3a e1       	ldi	r19, 0x1A	; 26
     42c:	96 e0       	ldi	r25, 0x06	; 6
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	30 40       	sbci	r19, 0x00	; 0
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <_ZN7Key_Pad10pressedKeyEv+0x16>
     436:	00 c0       	rjmp	.+0      	; 0x438 <_ZN7Key_Pad10pressedKeyEv+0x20>
     438:	00 00       	nop
		_delay_ms(2000);
		return key; // if a number is pressed return the pressed key
	 }
	}
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <_Z41__static_initialization_and_destruction_0ii>:
		mainLoop();
			
	}
		
	
}
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	59 f4       	brne	.+22     	; 0x45a <_Z41__static_initialization_and_destruction_0ii+0x1a>
     444:	6f 3f       	cpi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	41 f4       	brne	.+16     	; 0x45a <_Z41__static_initialization_and_destruction_0ii+0x1a>
#include "Tone.h"


Screen scrn;
Key_Pad key;
Tone alarmTone(3,4);
     44a:	44 e0       	ldi	r20, 0x04	; 4
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	63 e0       	ldi	r22, 0x03	; 3
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	8d e3       	ldi	r24, 0x3D	; 61
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 4c 0a 	call	0x1498	; 0x1498 <_ZN4ToneC1Eii>
     45a:	08 95       	ret

0000045c <main>:


int main(void)
{
	ds1307_init();
     45c:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z11ds1307_initv>
	scrn.LCD_Init();
     460:	81 e4       	ldi	r24, 0x41	; 65
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN6Screen8LCD_InitEv>
	while (1)
	{
		mainLoop();
     468:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z8mainLoopv>
     46c:	fd cf       	rjmp	.-6      	; 0x468 <main+0xc>

0000046e <_GLOBAL__sub_I_scrn>:
			
	}
		
	
}
     46e:	6f ef       	ldi	r22, 0xFF	; 255
     470:	7f ef       	ldi	r23, 0xFF	; 255
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 20 02 	call	0x440	; 0x440 <_Z41__static_initialization_and_destruction_0ii>
     47a:	08 95       	ret

0000047c <_ZN6Screen11LCD_CommandEh>:
int _a=0 , _b=0 , _c=0 , _d=0;   //assume that the Time is in ab:cd format

//this command is use to send a command to the LCD as an unsigned char
void Screen::LCD_Command(unsigned char cmnd)      
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
     47c:	8b b1       	in	r24, 0x0b	; 11
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	96 2f       	mov	r25, r22
     482:	90 7f       	andi	r25, 0xF0	; 240
     484:	89 2b       	or	r24, r25
     486:	8b b9       	out	0x0b, r24	; 11
	LCD_Port &= ~ (1<<RS);
     488:	8b b1       	in	r24, 0x0b	; 11
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
     48e:	8b b1       	in	r24, 0x0b	; 11
     490:	82 60       	ori	r24, 0x02	; 2
     492:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     494:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     496:	8b b1       	in	r24, 0x0b	; 11
     498:	8d 7f       	andi	r24, 0xFD	; 253
     49a:	8b b9       	out	0x0b, r24	; 11
     49c:	82 e4       	ldi	r24, 0x42	; 66
     49e:	8a 95       	dec	r24
     4a0:	f1 f7       	brne	.-4      	; 0x49e <_ZN6Screen11LCD_CommandEh+0x22>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <_ZN6Screen11LCD_CommandEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
     4a4:	8b b1       	in	r24, 0x0b	; 11
     4a6:	90 e1       	ldi	r25, 0x10	; 16
     4a8:	69 9f       	mul	r22, r25
     4aa:	b0 01       	movw	r22, r0
     4ac:	11 24       	eor	r1, r1
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	68 2b       	or	r22, r24
     4b2:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
     4b4:	8b b1       	in	r24, 0x0b	; 11
     4b6:	82 60       	ori	r24, 0x02	; 2
     4b8:	8b b9       	out	0x0b, r24	; 11
     4ba:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4bc:	8b b1       	in	r24, 0x0b	; 11
     4be:	8d 7f       	andi	r24, 0xFD	; 253
     4c0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c2:	83 ef       	ldi	r24, 0xF3	; 243
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <_ZN6Screen11LCD_CommandEh+0x4a>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <_ZN6Screen11LCD_CommandEh+0x50>
     4cc:	00 00       	nop
     4ce:	08 95       	ret

000004d0 <_ZN6Screen8LCD_CharEh>:
	_delay_ms(2);
}

void Screen::LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
     4d0:	8b b1       	in	r24, 0x0b	; 11
     4d2:	8f 70       	andi	r24, 0x0F	; 15
     4d4:	96 2f       	mov	r25, r22
     4d6:	90 7f       	andi	r25, 0xF0	; 240
     4d8:	89 2b       	or	r24, r25
     4da:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<RS);		//RS = 1
     4dc:	8b b1       	in	r24, 0x0b	; 11
     4de:	81 60       	ori	r24, 0x01	; 1
     4e0:	8b b9       	out	0x0b, r24	; 11
	LCD_Port|= (1<<EN);
     4e2:	8b b1       	in	r24, 0x0b	; 11
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e8:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4ea:	8b b1       	in	r24, 0x0b	; 11
     4ec:	8d 7f       	andi	r24, 0xFD	; 253
     4ee:	8b b9       	out	0x0b, r24	; 11
     4f0:	82 e4       	ldi	r24, 0x42	; 66
     4f2:	8a 95       	dec	r24
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <_ZN6Screen8LCD_CharEh+0x22>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <_ZN6Screen8LCD_CharEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
     4f8:	8b b1       	in	r24, 0x0b	; 11
     4fa:	90 e1       	ldi	r25, 0x10	; 16
     4fc:	69 9f       	mul	r22, r25
     4fe:	b0 01       	movw	r22, r0
     500:	11 24       	eor	r1, r1
     502:	8f 70       	andi	r24, 0x0F	; 15
     504:	68 2b       	or	r22, r24
     506:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
     508:	8b b1       	in	r24, 0x0b	; 11
     50a:	82 60       	ori	r24, 0x02	; 2
     50c:	8b b9       	out	0x0b, r24	; 11
     50e:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     510:	8b b1       	in	r24, 0x0b	; 11
     512:	8d 7f       	andi	r24, 0xFD	; 253
     514:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	83 ef       	ldi	r24, 0xF3	; 243
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <_ZN6Screen8LCD_CharEh+0x4a>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <_ZN6Screen8LCD_CharEh+0x50>
     520:	00 00       	nop
     522:	08 95       	ret

00000524 <_ZN6Screen10LCD_StringEPc>:
}


//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	7c 01       	movw	r14, r24
     532:	8b 01       	movw	r16, r22
	int i;
	for(i=0;str[i]!=0;i++)
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	d0 e0       	ldi	r29, 0x00	; 0
     538:	f8 01       	movw	r30, r16
     53a:	ec 0f       	add	r30, r28
     53c:	fd 1f       	adc	r31, r29
     53e:	60 81       	ld	r22, Z
     540:	66 23       	and	r22, r22
     542:	29 f0       	breq	.+10     	; 0x54e <_ZN6Screen10LCD_StringEPc+0x2a>
	{
		LCD_Char (str[i]);
     544:	c7 01       	movw	r24, r14
     546:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>

//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
     54a:	21 96       	adiw	r28, 0x01	; 1
     54c:	f5 cf       	rjmp	.-22     	; 0x538 <_ZN6Screen10LCD_StringEPc+0x14>
	{
		LCD_Char (str[i]);
	}
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	08 95       	ret

0000055c <_ZN6Screen8LCD_InitEv>:
}


//function to initialize the LCD dispay
void Screen::LCD_Init(void)
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;			//LCD data direction is output
     562:	8f ef       	ldi	r24, 0xFF	; 255
     564:	8a b9       	out	0x0a, r24	; 10
     566:	87 e8       	ldi	r24, 0x87	; 135
     568:	93 e1       	ldi	r25, 0x13	; 19
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <_ZN6Screen8LCD_InitEv+0xe>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <_ZN6Screen8LCD_InitEv+0x14>
     570:	00 00       	nop
	_delay_ms(20);
	
	LCD_Command(0x02);
     572:	62 e0       	ldi	r22, 0x02	; 2
     574:	ce 01       	movw	r24, r28
     576:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x28);
     57a:	68 e2       	ldi	r22, 0x28	; 40
     57c:	ce 01       	movw	r24, r28
     57e:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
     582:	6c e0       	ldi	r22, 0x0C	; 12
     584:	ce 01       	movw	r24, r28
     586:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x06);              //Command - shift cursor to right
     58a:	66 e0       	ldi	r22, 0x06	; 6
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x01);              //Command - Clear display
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	ce 01       	movw	r24, r28
     596:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	
	LCD_String("Welcome");
     59a:	6e e6       	ldi	r22, 0x6E	; 110
     59c:	71 e0       	ldi	r23, 0x01	; 1
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     5a4:	9f e3       	ldi	r25, 0x3F	; 63
     5a6:	2d e0       	ldi	r18, 0x0D	; 13
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	91 50       	subi	r25, 0x01	; 1
     5ac:	20 40       	sbci	r18, 0x00	; 0
     5ae:	80 40       	sbci	r24, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <_ZN6Screen8LCD_InitEv+0x4e>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <_ZN6Screen8LCD_InitEv+0x58>
     5b4:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);*/
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <_ZN6Screen9LCD_clearEv>:
}


//function to clear the display
void Screen::LCD_clear()
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
	LCD_Command (0x01);
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
     5c8:	83 ef       	ldi	r24, 0xF3	; 243
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <_ZN6Screen9LCD_clearEv+0x10>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <_ZN6Screen9LCD_clearEv+0x16>
     5d2:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <_ZN6Screen15Control_buttonsEv>:


char Screen::Control_buttons(){
	DDRB = 0xCF;
     5e2:	8f ec       	ldi	r24, 0xCF	; 207
     5e4:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011;
     5e6:	8a b1       	in	r24, 0x0a	; 10
     5e8:	83 7f       	andi	r24, 0xF3	; 243
     5ea:	8a b9       	out	0x0a, r24	; 10
	while (1)
	{
		if (PINB & 0b00010000){
     5ec:	1c 9b       	sbis	0x03, 4	; 3
     5ee:	0b c0       	rjmp	.+22     	; 0x606 <_ZN6Screen15Control_buttonsEv+0x24>
     5f0:	2f ed       	ldi	r18, 0xDF	; 223
     5f2:	83 e9       	ldi	r24, 0x93	; 147
     5f4:	94 e0       	ldi	r25, 0x04	; 4
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	80 40       	sbci	r24, 0x00	; 0
     5fa:	90 40       	sbci	r25, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <_ZN6Screen15Control_buttonsEv+0x14>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <_ZN6Screen15Control_buttonsEv+0x1e>
     600:	00 00       	nop
			_delay_ms(1500);
			return 's' ;
     602:	83 e7       	ldi	r24, 0x73	; 115
     604:	08 95       	ret
			break;
		}
		else if (PINB & 0b00100000){
     606:	1d 9b       	sbis	0x03, 5	; 3
     608:	0b c0       	rjmp	.+22     	; 0x620 <_ZN6Screen15Control_buttonsEv+0x3e>
     60a:	2f ed       	ldi	r18, 0xDF	; 223
     60c:	83 e9       	ldi	r24, 0x93	; 147
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	21 50       	subi	r18, 0x01	; 1
     612:	80 40       	sbci	r24, 0x00	; 0
     614:	90 40       	sbci	r25, 0x00	; 0
     616:	e1 f7       	brne	.-8      	; 0x610 <_ZN6Screen15Control_buttonsEv+0x2e>
     618:	00 c0       	rjmp	.+0      	; 0x61a <_ZN6Screen15Control_buttonsEv+0x38>
     61a:	00 00       	nop
			_delay_ms(1500);
			return 'b';
     61c:	82 e6       	ldi	r24, 0x62	; 98
     61e:	08 95       	ret
			break;
		}
		else if (PIND & 0b000000100){
     620:	4a 9b       	sbis	0x09, 2	; 9
     622:	0b c0       	rjmp	.+22     	; 0x63a <_ZN6Screen15Control_buttonsEv+0x58>
     624:	2f ed       	ldi	r18, 0xDF	; 223
     626:	83 e9       	ldi	r24, 0x93	; 147
     628:	94 e0       	ldi	r25, 0x04	; 4
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	80 40       	sbci	r24, 0x00	; 0
     62e:	90 40       	sbci	r25, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <_ZN6Screen15Control_buttonsEv+0x48>
     632:	00 c0       	rjmp	.+0      	; 0x634 <_ZN6Screen15Control_buttonsEv+0x52>
     634:	00 00       	nop
			_delay_ms(1500);
			return 'u';
     636:	85 e7       	ldi	r24, 0x75	; 117
     638:	08 95       	ret
			break;
		}
		else if (PIND & 0b000001000){
     63a:	4b 9b       	sbis	0x09, 3	; 9
     63c:	d7 cf       	rjmp	.-82     	; 0x5ec <_ZN6Screen15Control_buttonsEv+0xa>
     63e:	2f ed       	ldi	r18, 0xDF	; 223
     640:	83 e9       	ldi	r24, 0x93	; 147
     642:	94 e0       	ldi	r25, 0x04	; 4
     644:	21 50       	subi	r18, 0x01	; 1
     646:	80 40       	sbci	r24, 0x00	; 0
     648:	90 40       	sbci	r25, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <_ZN6Screen15Control_buttonsEv+0x62>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <_ZN6Screen15Control_buttonsEv+0x6c>
     64e:	00 00       	nop
			_delay_ms(1500);
			return 'd';
     650:	84 e6       	ldi	r24, 0x64	; 100
			break;
		}
		
	}
	
}
     652:	08 95       	ret

00000654 <_ZN6Screen5blinkEv>:


void Screen::blink(){
	LCD_Command(0x0F);
     654:	6f e0       	ldi	r22, 0x0F	; 15
     656:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
     65a:	08 95       	ret

0000065c <_ZN6Screen9stopBlinkEv>:
}

void Screen::stopBlink(){
	LCD_Command(0x0c);
     65c:	6c e0       	ldi	r22, 0x0C	; 12
     65e:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
     662:	08 95       	ret

00000664 <_ZN6Screen13pressedSelectEv>:
}

bool  Screen::pressedSelect(){
	if (PINB & 0b00010000) {
     664:	1c 9b       	sbis	0x03, 4	; 3
     666:	0b c0       	rjmp	.+22     	; 0x67e <_ZN6Screen13pressedSelectEv+0x1a>
     668:	2f e3       	ldi	r18, 0x3F	; 63
     66a:	8d e0       	ldi	r24, 0x0D	; 13
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <_ZN6Screen13pressedSelectEv+0xa>
     676:	00 c0       	rjmp	.+0      	; 0x678 <_ZN6Screen13pressedSelectEv+0x14>
     678:	00 00       	nop
		_delay_ms(1000);
		return true;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	08 95       	ret
	}
	else {
		return false;
     67e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     680:	08 95       	ret

00000682 <_ZN6Screen11pressedBackEv>:

bool  Screen::pressedBack(){
	if (PINB & 0b00100000){
     682:	1d 9b       	sbis	0x03, 5	; 3
     684:	0b c0       	rjmp	.+22     	; 0x69c <_ZN6Screen11pressedBackEv+0x1a>
     686:	2f e7       	ldi	r18, 0x7F	; 127
     688:	8a e1       	ldi	r24, 0x1A	; 26
     68a:	96 e0       	ldi	r25, 0x06	; 6
     68c:	21 50       	subi	r18, 0x01	; 1
     68e:	80 40       	sbci	r24, 0x00	; 0
     690:	90 40       	sbci	r25, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <_ZN6Screen11pressedBackEv+0xa>
     694:	00 c0       	rjmp	.+0      	; 0x696 <_ZN6Screen11pressedBackEv+0x14>
     696:	00 00       	nop
		_delay_ms(2000);
		return true;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	08 95       	ret
	}
	else{
		return false;
     69c:	80 e0       	ldi	r24, 0x00	; 0
	}
     69e:	08 95       	ret

000006a0 <_Z8showTimev>:
		return true;
	}
	else{
		return false;
	}
}
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	60 e8       	ldi	r22, 0x80	; 128
     6b0:	86 e5       	ldi	r24, 0x56	; 86
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
     6b8:	0f 2e       	mov	r0, r31
     6ba:	fe e4       	ldi	r31, 0x4E	; 78
     6bc:	cf 2e       	mov	r12, r31
     6be:	f2 e0       	ldi	r31, 0x02	; 2
     6c0:	df 2e       	mov	r13, r31
     6c2:	f0 2d       	mov	r31, r0
     6c4:	0f 2e       	mov	r0, r31
     6c6:	ff e4       	ldi	r31, 0x4F	; 79
     6c8:	ef 2e       	mov	r14, r31
     6ca:	f2 e0       	ldi	r31, 0x02	; 2
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 2d       	mov	r31, r0
     6d0:	00 e5       	ldi	r16, 0x50	; 80
     6d2:	12 e0       	ldi	r17, 0x02	; 2
     6d4:	21 e5       	ldi	r18, 0x51	; 81
     6d6:	32 e0       	ldi	r19, 0x02	; 2
     6d8:	42 e5       	ldi	r20, 0x52	; 82
     6da:	52 e0       	ldi	r21, 0x02	; 2
     6dc:	63 e5       	ldi	r22, 0x53	; 83
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	84 e5       	ldi	r24, 0x54	; 84
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z14ds1307_getdatePhS_S_S_S_S_S_>
     6e8:	66 e7       	ldi	r22, 0x76	; 118
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	86 e5       	ldi	r24, 0x56	; 86
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     6f4:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <hour>
     6f8:	cd ec       	ldi	r28, 0xCD	; 205
     6fa:	6c 9f       	mul	r22, r28
     6fc:	61 2d       	mov	r22, r1
     6fe:	11 24       	eor	r1, r1
     700:	66 95       	lsr	r22
     702:	66 95       	lsr	r22
     704:	66 95       	lsr	r22
     706:	60 5d       	subi	r22, 0xD0	; 208
     708:	86 e5       	ldi	r24, 0x56	; 86
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     710:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <hour>
     714:	6c 9f       	mul	r22, r28
     716:	81 2d       	mov	r24, r1
     718:	11 24       	eor	r1, r1
     71a:	86 95       	lsr	r24
     71c:	86 95       	lsr	r24
     71e:	86 95       	lsr	r24
     720:	88 0f       	add	r24, r24
     722:	98 2f       	mov	r25, r24
     724:	99 0f       	add	r25, r25
     726:	99 0f       	add	r25, r25
     728:	89 0f       	add	r24, r25
     72a:	68 1b       	sub	r22, r24
     72c:	60 5d       	subi	r22, 0xD0	; 208
     72e:	86 e5       	ldi	r24, 0x56	; 86
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     736:	6d e7       	ldi	r22, 0x7D	; 125
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	86 e5       	ldi	r24, 0x56	; 86
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     742:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <minute>
     746:	6c 9f       	mul	r22, r28
     748:	61 2d       	mov	r22, r1
     74a:	11 24       	eor	r1, r1
     74c:	66 95       	lsr	r22
     74e:	66 95       	lsr	r22
     750:	66 95       	lsr	r22
     752:	60 5d       	subi	r22, 0xD0	; 208
     754:	86 e5       	ldi	r24, 0x56	; 86
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     75c:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <minute>
     760:	6c 9f       	mul	r22, r28
     762:	81 2d       	mov	r24, r1
     764:	11 24       	eor	r1, r1
     766:	86 95       	lsr	r24
     768:	86 95       	lsr	r24
     76a:	86 95       	lsr	r24
     76c:	88 0f       	add	r24, r24
     76e:	98 2f       	mov	r25, r24
     770:	99 0f       	add	r25, r25
     772:	99 0f       	add	r25, r25
     774:	89 0f       	add	r24, r25
     776:	68 1b       	sub	r22, r24
     778:	60 5d       	subi	r22, 0xD0	; 208
     77a:	86 e5       	ldi	r24, 0x56	; 86
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     782:	6d e7       	ldi	r22, 0x7D	; 125
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	86 e5       	ldi	r24, 0x56	; 86
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     78e:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <second>
     792:	6c 9f       	mul	r22, r28
     794:	61 2d       	mov	r22, r1
     796:	11 24       	eor	r1, r1
     798:	66 95       	lsr	r22
     79a:	66 95       	lsr	r22
     79c:	66 95       	lsr	r22
     79e:	60 5d       	subi	r22, 0xD0	; 208
     7a0:	86 e5       	ldi	r24, 0x56	; 86
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     7a8:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <second>
     7ac:	6c 9f       	mul	r22, r28
     7ae:	81 2d       	mov	r24, r1
     7b0:	11 24       	eor	r1, r1
     7b2:	86 95       	lsr	r24
     7b4:	86 95       	lsr	r24
     7b6:	86 95       	lsr	r24
     7b8:	88 0f       	add	r24, r24
     7ba:	98 2f       	mov	r25, r24
     7bc:	99 0f       	add	r25, r25
     7be:	99 0f       	add	r25, r25
     7c0:	89 0f       	add	r24, r25
     7c2:	68 1b       	sub	r22, r24
     7c4:	60 5d       	subi	r22, 0xD0	; 208
     7c6:	86 e5       	ldi	r24, 0x56	; 86
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     7ce:	60 ec       	ldi	r22, 0xC0	; 192
     7d0:	86 e5       	ldi	r24, 0x56	; 86
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
     7d8:	6f e7       	ldi	r22, 0x7F	; 127
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	86 e5       	ldi	r24, 0x56	; 86
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     7e4:	66 e8       	ldi	r22, 0x86	; 134
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	86 e5       	ldi	r24, 0x56	; 86
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     7f0:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <year>
     7f4:	6c 9f       	mul	r22, r28
     7f6:	61 2d       	mov	r22, r1
     7f8:	11 24       	eor	r1, r1
     7fa:	66 95       	lsr	r22
     7fc:	66 95       	lsr	r22
     7fe:	66 95       	lsr	r22
     800:	60 5d       	subi	r22, 0xD0	; 208
     802:	86 e5       	ldi	r24, 0x56	; 86
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     80a:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <year>
     80e:	6c 9f       	mul	r22, r28
     810:	81 2d       	mov	r24, r1
     812:	11 24       	eor	r1, r1
     814:	86 95       	lsr	r24
     816:	86 95       	lsr	r24
     818:	86 95       	lsr	r24
     81a:	88 0f       	add	r24, r24
     81c:	98 2f       	mov	r25, r24
     81e:	99 0f       	add	r25, r25
     820:	99 0f       	add	r25, r25
     822:	89 0f       	add	r24, r25
     824:	68 1b       	sub	r22, r24
     826:	60 5d       	subi	r22, 0xD0	; 208
     828:	86 e5       	ldi	r24, 0x56	; 86
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     830:	69 e8       	ldi	r22, 0x89	; 137
     832:	71 e0       	ldi	r23, 0x01	; 1
     834:	86 e5       	ldi	r24, 0x56	; 86
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     83c:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <month>
     840:	6c 9f       	mul	r22, r28
     842:	61 2d       	mov	r22, r1
     844:	11 24       	eor	r1, r1
     846:	66 95       	lsr	r22
     848:	66 95       	lsr	r22
     84a:	66 95       	lsr	r22
     84c:	60 5d       	subi	r22, 0xD0	; 208
     84e:	86 e5       	ldi	r24, 0x56	; 86
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     856:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <month>
     85a:	6c 9f       	mul	r22, r28
     85c:	81 2d       	mov	r24, r1
     85e:	11 24       	eor	r1, r1
     860:	86 95       	lsr	r24
     862:	86 95       	lsr	r24
     864:	86 95       	lsr	r24
     866:	88 0f       	add	r24, r24
     868:	98 2f       	mov	r25, r24
     86a:	99 0f       	add	r25, r25
     86c:	99 0f       	add	r25, r25
     86e:	89 0f       	add	r24, r25
     870:	68 1b       	sub	r22, r24
     872:	60 5d       	subi	r22, 0xD0	; 208
     874:	86 e5       	ldi	r24, 0x56	; 86
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     87c:	69 e8       	ldi	r22, 0x89	; 137
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	86 e5       	ldi	r24, 0x56	; 86
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     888:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <day>
     88c:	6c 9f       	mul	r22, r28
     88e:	61 2d       	mov	r22, r1
     890:	11 24       	eor	r1, r1
     892:	66 95       	lsr	r22
     894:	66 95       	lsr	r22
     896:	66 95       	lsr	r22
     898:	60 5d       	subi	r22, 0xD0	; 208
     89a:	86 e5       	ldi	r24, 0x56	; 86
     89c:	92 e0       	ldi	r25, 0x02	; 2
     89e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     8a2:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <day>
     8a6:	6c 9f       	mul	r22, r28
     8a8:	c1 2d       	mov	r28, r1
     8aa:	11 24       	eor	r1, r1
     8ac:	c6 95       	lsr	r28
     8ae:	c6 95       	lsr	r28
     8b0:	c6 95       	lsr	r28
     8b2:	cc 0f       	add	r28, r28
     8b4:	8c 2f       	mov	r24, r28
     8b6:	88 0f       	add	r24, r24
     8b8:	88 0f       	add	r24, r24
     8ba:	c8 0f       	add	r28, r24
     8bc:	6c 1b       	sub	r22, r28
     8be:	60 5d       	subi	r22, 0xD0	; 208
     8c0:	86 e5       	ldi	r24, 0x56	; 86
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	08 95       	ret

000008d8 <_Z6getDayiii>:
		
}

//-------------------------------------------------------------------------------------------------------

int getDay(int y, int m, int d){
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	30 e0       	ldi	r19, 0x00	; 0
}

//-------------------------------------------------------------------------------------------------------

int getDay(int y, int m, int d){
	int days = 0;
     8e2:	e0 e0       	ldi	r30, 0x00	; 0
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
     8e6:	c2 17       	cp	r28, r18
     8e8:	d3 07       	cpc	r29, r19
     8ea:	6c f0       	brlt	.+26     	; 0x906 <__stack+0x7>
		if (i%4 == 0){
     8ec:	c9 01       	movw	r24, r18
     8ee:	83 70       	andi	r24, 0x03	; 3
     8f0:	99 27       	eor	r25, r25
     8f2:	89 2b       	or	r24, r25
     8f4:	19 f4       	brne	.+6      	; 0x8fc <_Z6getDayiii+0x24>
			days+= 366;
     8f6:	e2 59       	subi	r30, 0x92	; 146
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
		}
		else{
			days+= 365;
     8fc:	e3 59       	subi	r30, 0x93	; 147
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254

//-------------------------------------------------------------------------------------------------------

int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
     900:	2f 5f       	subi	r18, 0xFF	; 255
     902:	3f 4f       	sbci	r19, 0xFF	; 255
     904:	f0 cf       	rjmp	.-32     	; 0x8e6 <_Z6getDayiii+0xe>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
     90a:	db 01       	movw	r26, r22
     90c:	11 97       	sbiw	r26, 0x01	; 1
     90e:	2a 17       	cp	r18, r26
     910:	3b 07       	cpc	r19, r27
     912:	3c f5       	brge	.+78     	; 0x962 <__stack+0x63>
		if ((y%4==0) & (j == 1)){
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	de 01       	movw	r26, r28
     918:	a3 70       	andi	r26, 0x03	; 3
     91a:	bb 27       	eor	r27, r27
     91c:	ab 2b       	or	r26, r27
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0x23>
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	99 23       	and	r25, r25
     924:	91 f0       	breq	.+36     	; 0x94a <__stack+0x4b>
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	21 30       	cpi	r18, 0x01	; 1
     92a:	31 05       	cpc	r19, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0x31>
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	99 23       	and	r25, r25
     932:	59 f0       	breq	.+22     	; 0x94a <__stack+0x4b>
			days+=monthsDays[j];
     934:	d9 01       	movw	r26, r18
     936:	aa 0f       	add	r26, r26
     938:	bb 1f       	adc	r27, r27
     93a:	a4 5b       	subi	r26, 0xB4	; 180
     93c:	be 4f       	sbci	r27, 0xFE	; 254
     93e:	8d 91       	ld	r24, X+
     940:	9c 91       	ld	r25, X
     942:	e8 0f       	add	r30, r24
     944:	f9 1f       	adc	r31, r25
			days+=1;
     946:	31 96       	adiw	r30, 0x01	; 1
     948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0x5d>
		}
		else{
			days +=monthsDays[j];
     94a:	d9 01       	movw	r26, r18
     94c:	aa 0f       	add	r26, r26
     94e:	bb 1f       	adc	r27, r27
     950:	a4 5b       	subi	r26, 0xB4	; 180
     952:	be 4f       	sbci	r27, 0xFE	; 254
     954:	8d 91       	ld	r24, X+
     956:	9c 91       	ld	r25, X
     958:	e8 0f       	add	r30, r24
     95a:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
     95c:	2f 5f       	subi	r18, 0xFF	; 255
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	d4 cf       	rjmp	.-88     	; 0x90a <__stack+0xb>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
     962:	4e 0f       	add	r20, r30
     964:	5f 1f       	adc	r21, r31
     966:	ca 01       	movw	r24, r20
     968:	05 96       	adiw	r24, 0x05	; 5
     96a:	67 e0       	ldi	r22, 0x07	; 7
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <_Z9set_alarmv>:

//--------------------------------------------------------------------------------------------------- 

void set_alarm(){
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
	if (ith_alarm==5){
     980:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ith_alarm>
     984:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ith_alarm+0x1>
     988:	05 97       	sbiw	r24, 0x05	; 5
     98a:	f9 f4       	brne	.+62     	; 0x9ca <_Z9set_alarmv+0x52>
	sc.LCD_clear();
     98c:	86 e5       	ldi	r24, 0x56	; 86
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("ALARM STORAGE");
     994:	6b e8       	ldi	r22, 0x8B	; 139
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	86 e5       	ldi	r24, 0x56	; 86
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
     9a0:	60 ec       	ldi	r22, 0xC0	; 192
     9a2:	86 e5       	ldi	r24, 0x56	; 86
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("FULL !!!");
     9aa:	69 e9       	ldi	r22, 0x99	; 153
     9ac:	71 e0       	ldi	r23, 0x01	; 1
     9ae:	86 e5       	ldi	r24, 0x56	; 86
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     9b6:	2f e7       	ldi	r18, 0x7F	; 127
     9b8:	8a e1       	ldi	r24, 0x1A	; 26
     9ba:	96 e0       	ldi	r25, 0x06	; 6
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	80 40       	sbci	r24, 0x00	; 0
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <_Z9set_alarmv+0x44>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <_Z9set_alarmv+0x4e>
     9c6:	00 00       	nop
     9c8:	be c0       	rjmp	.+380    	; 0xb46 <_Z9set_alarmv+0x1ce>
	_delay_ms(2000);
	return;
	}
	
	sc.LCD_clear();
     9ca:	86 e5       	ldi	r24, 0x56	; 86
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("hh : mm");
     9d2:	62 ea       	ldi	r22, 0xA2	; 162
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	86 e5       	ldi	r24, 0x56	; 86
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command (0x80);
     9de:	60 e8       	ldi	r22, 0x80	; 128
     9e0:	86 e5       	ldi	r24, 0x56	; 86
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	sc.blink();
     9e8:	86 e5       	ldi	r24, 0x56	; 86
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN6Screen5blinkEv>
	char p = kp.pressedKey();
     9f0:	85 e5       	ldi	r24, 0x55	; 85
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     9f8:	08 2f       	mov	r16, r24
	sc.LCD_Char(p);
     9fa:	68 2f       	mov	r22, r24
     9fc:	86 e5       	ldi	r24, 0x56	; 86
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	char q = kp.pressedKey();
     a04:	85 e5       	ldi	r24, 0x55	; 85
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     a0c:	18 2f       	mov	r17, r24
	sc.LCD_Char(q);
     a0e:	68 2f       	mov	r22, r24
     a10:	86 e5       	ldi	r24, 0x56	; 86
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	sc.LCD_String(" : ");
     a18:	6a ea       	ldi	r22, 0xAA	; 170
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	86 e5       	ldi	r24, 0x56	; 86
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	char r = kp.pressedKey();
     a24:	85 e5       	ldi	r24, 0x55	; 85
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     a2c:	c8 2f       	mov	r28, r24
	sc.LCD_Char(r);
     a2e:	68 2f       	mov	r22, r24
     a30:	86 e5       	ldi	r24, 0x56	; 86
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	char se = kp.pressedKey();
     a38:	85 e5       	ldi	r24, 0x55	; 85
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     a40:	d8 2f       	mov	r29, r24
	sc.LCD_Char(se);
     a42:	68 2f       	mov	r22, r24
     a44:	86 e5       	ldi	r24, 0x56	; 86
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	sc.stopBlink();
     a4c:	86 e5       	ldi	r24, 0x56	; 86
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
     a54:	2f e7       	ldi	r18, 0x7F	; 127
     a56:	8a e1       	ldi	r24, 0x1A	; 26
     a58:	96 e0       	ldi	r25, 0x06	; 6
     a5a:	21 50       	subi	r18, 0x01	; 1
     a5c:	80 40       	sbci	r24, 0x00	; 0
     a5e:	90 40       	sbci	r25, 0x00	; 0
     a60:	e1 f7       	brne	.-8      	; 0xa5a <_Z9set_alarmv+0xe2>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <_Z9set_alarmv+0xec>
     a64:	00 00       	nop
	_delay_ms(2000);
	
	if (((int) p-48)*1000 + ((int) q-48)*100  + ((int) r-48)*10 + ((int) se-48) > 2359){
     a66:	60 2f       	mov	r22, r16
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	60 53       	subi	r22, 0x30	; 48
     a6c:	71 09       	sbc	r23, r1
     a6e:	88 ee       	ldi	r24, 0xE8	; 232
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	68 9f       	mul	r22, r24
     a74:	a0 01       	movw	r20, r0
     a76:	69 9f       	mul	r22, r25
     a78:	50 0d       	add	r21, r0
     a7a:	78 9f       	mul	r23, r24
     a7c:	50 0d       	add	r21, r0
     a7e:	11 24       	eor	r1, r1
     a80:	61 2f       	mov	r22, r17
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	60 53       	subi	r22, 0x30	; 48
     a86:	71 09       	sbc	r23, r1
     a88:	24 e6       	ldi	r18, 0x64	; 100
     a8a:	26 9f       	mul	r18, r22
     a8c:	c0 01       	movw	r24, r0
     a8e:	27 9f       	mul	r18, r23
     a90:	90 0d       	add	r25, r0
     a92:	11 24       	eor	r1, r1
     a94:	48 0f       	add	r20, r24
     a96:	59 1f       	adc	r21, r25
     a98:	6c 2f       	mov	r22, r28
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	cb 01       	movw	r24, r22
     a9e:	c0 97       	sbiw	r24, 0x30	; 48
     aa0:	bc 01       	movw	r22, r24
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	9c 01       	movw	r18, r24
     aa8:	22 0f       	add	r18, r18
     aaa:	33 1f       	adc	r19, r19
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	cb 01       	movw	r24, r22
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	84 0f       	add	r24, r20
     abc:	95 1f       	adc	r25, r21
     abe:	6d 2f       	mov	r22, r29
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	60 53       	subi	r22, 0x30	; 48
     ac4:	71 09       	sbc	r23, r1
     ac6:	86 0f       	add	r24, r22
     ac8:	97 1f       	adc	r25, r23
     aca:	88 33       	cpi	r24, 0x38	; 56
     acc:	29 e0       	ldi	r18, 0x09	; 9
     ace:	92 07       	cpc	r25, r18
     ad0:	b4 f0       	brlt	.+44     	; 0xafe <_Z9set_alarmv+0x186>
		sc.LCD_clear();
     ad2:	86 e5       	ldi	r24, 0x56	; 86
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
		sc.LCD_String("ALARM NOT VALID!");
     ada:	6e ea       	ldi	r22, 0xAE	; 174
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	86 e5       	ldi	r24, 0x56	; 86
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     ae6:	8f e3       	ldi	r24, 0x3F	; 63
     ae8:	9d e0       	ldi	r25, 0x0D	; 13
     aea:	23 e0       	ldi	r18, 0x03	; 3
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	90 40       	sbci	r25, 0x00	; 0
     af0:	20 40       	sbci	r18, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <_Z9set_alarmv+0x174>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <_Z9set_alarmv+0x17e>
     af6:	00 00       	nop
		_delay_ms(1000);
		set_alarm();
     af8:	0e 94 bc 04 	call	0x978	; 0x978 <_Z9set_alarmv>
		return;
     afc:	24 c0       	rjmp	.+72     	; 0xb46 <_Z9set_alarmv+0x1ce>
	}
	
	 
	alarmArray[ith_alarm] = ((int) p-48)*1000 + ((int) q-48)*100  + ((int) r-48)*10 + ((int) se-48);
     afe:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <ith_alarm>
     b02:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <ith_alarm+0x1>
     b06:	f9 01       	movw	r30, r18
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ec 59       	subi	r30, 0x9C	; 156
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	80 83       	st	Z, r24
    ith_alarm+=1;
     b14:	2f 5f       	subi	r18, 0xFF	; 255
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	30 93 43 02 	sts	0x0243, r19	; 0x800243 <ith_alarm+0x1>
     b1c:	20 93 42 02 	sts	0x0242, r18	; 0x800242 <ith_alarm>
	sc.LCD_clear();
     b20:	86 e5       	ldi	r24, 0x56	; 86
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("AlARM SAVED :)");
     b28:	6f eb       	ldi	r22, 0xBF	; 191
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	86 e5       	ldi	r24, 0x56	; 86
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     b34:	8f e3       	ldi	r24, 0x3F	; 63
     b36:	9d e0       	ldi	r25, 0x0D	; 13
     b38:	23 e0       	ldi	r18, 0x03	; 3
     b3a:	81 50       	subi	r24, 0x01	; 1
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	20 40       	sbci	r18, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <_Z9set_alarmv+0x1c2>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <_Z9set_alarmv+0x1cc>
     b44:	00 00       	nop
	_delay_ms(1000);
	return;
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <_Z11deleteAlarmv>:

//--------------------------------------------------------------------------------------

void deleteAlarm(){
	int ith =0;
	if (alarmArray[ith]==-1){
     b50:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmArray>
     b54:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <alarmArray+0x1>
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	81 f4       	brne	.+32     	; 0xb7c <_Z11deleteAlarmv+0x2c>
		sc.LCD_clear();
     b5c:	86 e5       	ldi	r24, 0x56	; 86
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
		sc.LCD_Char((char) ( ith+ 49));
     b64:	61 e3       	ldi	r22, 0x31	; 49
     b66:	86 e5       	ldi	r24, 0x56	; 86
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		sc.LCD_String(". NONE");
     b6e:	6e ec       	ldi	r22, 0xCE	; 206
     b70:	71 e0       	ldi	r23, 0x01	; 1
     b72:	86 e5       	ldi	r24, 0x56	; 86
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     b7a:	46 c0       	rjmp	.+140    	; 0xc08 <_Z11deleteAlarmv+0xb8>
	}
	else {
		sc.LCD_clear();
     b7c:	86 e5       	ldi	r24, 0x56	; 86
     b7e:	92 e0       	ldi	r25, 0x02	; 2
     b80:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
		sc.LCD_Char((char) ( ith+ 49));
     b84:	61 e3       	ldi	r22, 0x31	; 49
     b86:	86 e5       	ldi	r24, 0x56	; 86
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		sc.LCD_String(". ");
     b8e:	65 ed       	ldi	r22, 0xD5	; 213
     b90:	71 e0       	ldi	r23, 0x01	; 1
     b92:	86 e5       	ldi	r24, 0x56	; 86
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
		int _hour=alarmArray[ith]/100;
     b9a:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <alarmArray>
     b9e:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <alarmArray+0x1>
     ba2:	c9 01       	movw	r24, r18
     ba4:	64 e6       	ldi	r22, 0x64	; 100
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     bac:	7b 01       	movw	r14, r22
     bae:	8c 01       	movw	r16, r24
		int _minute=alarmArray[ith]%100;
		
		sc.LCD_Char((char) (_hour/10)+48);
     bb0:	c9 01       	movw	r24, r18
     bb2:	68 ee       	ldi	r22, 0xE8	; 232
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     bba:	60 5d       	subi	r22, 0xD0	; 208
     bbc:	86 e5       	ldi	r24, 0x56	; 86
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		sc.LCD_Char((char) (_hour%10)+48);
     bc4:	ca e0       	ldi	r28, 0x0A	; 10
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
     bc8:	c7 01       	movw	r24, r14
     bca:	be 01       	movw	r22, r28
     bcc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     bd0:	60 e3       	ldi	r22, 0x30	; 48
     bd2:	68 0f       	add	r22, r24
     bd4:	86 e5       	ldi	r24, 0x56	; 86
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		sc.LCD_String(":");
     bdc:	6d e7       	ldi	r22, 0x7D	; 125
     bde:	71 e0       	ldi	r23, 0x01	; 1
     be0:	86 e5       	ldi	r24, 0x56	; 86
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
		sc.LCD_Char((char) (_minute/10)+48);
     be8:	c8 01       	movw	r24, r16
     bea:	be 01       	movw	r22, r28
     bec:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     bf0:	c8 2f       	mov	r28, r24
     bf2:	60 5d       	subi	r22, 0xD0	; 208
     bf4:	86 e5       	ldi	r24, 0x56	; 86
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		sc.LCD_Char((char) (_minute%10)+48);
     bfc:	60 e3       	ldi	r22, 0x30	; 48
     bfe:	6c 0f       	add	r22, r28
     c00:	86 e5       	ldi	r24, 0x56	; 86
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	return;
}

//--------------------------------------------------------------------------------------

void deleteAlarm(){
     c08:	c0 e0       	ldi	r28, 0x00	; 0
     c0a:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	while(1){
		
		char btn = sc.Control_buttons();
     c0c:	86 e5       	ldi	r24, 0x56	; 86
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN6Screen15Control_buttonsEv>
		if (btn=='d'){
     c14:	84 36       	cpi	r24, 0x64	; 100
     c16:	29 f4       	brne	.+10     	; 0xc22 <_Z11deleteAlarmv+0xd2>
			switch(ith)
     c18:	c4 30       	cpi	r28, 0x04	; 4
     c1a:	d1 05       	cpc	r29, r1
     c1c:	41 f0       	breq	.+16     	; 0xc2e <_Z11deleteAlarmv+0xde>
			{
				case 4: ith = 0; break;
				default: ith ++; break;
     c1e:	21 96       	adiw	r28, 0x01	; 1
     c20:	0b c0       	rjmp	.+22     	; 0xc38 <_Z11deleteAlarmv+0xe8>
			}
		}
		
		else if (btn=='u'){
     c22:	85 37       	cpi	r24, 0x75	; 117
     c24:	49 f4       	brne	.+18     	; 0xc38 <_Z11deleteAlarmv+0xe8>
			switch (ith)
     c26:	20 97       	sbiw	r28, 0x00	; 0
     c28:	29 f0       	breq	.+10     	; 0xc34 <_Z11deleteAlarmv+0xe4>
			{
				case 0: ith = 4; break;
				default: ith --; break;
     c2a:	21 97       	sbiw	r28, 0x01	; 1
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <_Z11deleteAlarmv+0xe8>
		
		char btn = sc.Control_buttons();
		if (btn=='d'){
			switch(ith)
			{
				case 4: ith = 0; break;
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
     c30:	d0 e0       	ldi	r29, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <_Z11deleteAlarmv+0xe8>
		}
		
		else if (btn=='u'){
			switch (ith)
			{
				case 0: ith = 4; break;
     c34:	c4 e0       	ldi	r28, 0x04	; 4
     c36:	d0 e0       	ldi	r29, 0x00	; 0
				default: ith --; break;
			}
		}
		
		if (alarmArray[ith]==-1){
     c38:	fe 01       	movw	r30, r28
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	ec 59       	subi	r30, 0x9C	; 156
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	89 f4       	brne	.+34     	; 0xc6c <_Z11deleteAlarmv+0x11c>
			sc.LCD_clear();
     c4a:	86 e5       	ldi	r24, 0x56	; 86
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
			sc.LCD_Char((char) ( ith+ 49));
     c52:	6c 2f       	mov	r22, r28
     c54:	6f 5c       	subi	r22, 0xCF	; 207
     c56:	86 e5       	ldi	r24, 0x56	; 86
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
			sc.LCD_String(". NONE");
     c5e:	6e ec       	ldi	r22, 0xCE	; 206
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	86 e5       	ldi	r24, 0x56	; 86
     c64:	92 e0       	ldi	r25, 0x02	; 2
     c66:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     c6a:	d0 cf       	rjmp	.-96     	; 0xc0c <_Z11deleteAlarmv+0xbc>
		}
		else {
			sc.LCD_clear();
     c6c:	86 e5       	ldi	r24, 0x56	; 86
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
			sc.LCD_Char((char) ( ith+ 49));
     c74:	6c 2f       	mov	r22, r28
     c76:	6f 5c       	subi	r22, 0xCF	; 207
     c78:	86 e5       	ldi	r24, 0x56	; 86
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
			sc.LCD_String(". ");
     c80:	65 ed       	ldi	r22, 0xD5	; 213
     c82:	71 e0       	ldi	r23, 0x01	; 1
     c84:	86 e5       	ldi	r24, 0x56	; 86
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
			int _hour=alarmArray[ith]/100;
     c8c:	fe 01       	movw	r30, r28
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	ec 59       	subi	r30, 0x9C	; 156
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	20 81       	ld	r18, Z
     c98:	31 81       	ldd	r19, Z+1	; 0x01
     c9a:	c9 01       	movw	r24, r18
     c9c:	64 e6       	ldi	r22, 0x64	; 100
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24
			int _minute=alarmArray[ith]%100;
			
			sc.LCD_Char((char) (_hour/10)+48);
     ca8:	c9 01       	movw	r24, r18
     caa:	68 ee       	ldi	r22, 0xE8	; 232
     cac:	73 e0       	ldi	r23, 0x03	; 3
     cae:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     cb2:	60 5d       	subi	r22, 0xD0	; 208
     cb4:	86 e5       	ldi	r24, 0x56	; 86
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
			sc.LCD_Char((char) (_hour%10)+48);
     cbc:	0a e0       	ldi	r16, 0x0A	; 10
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	c6 01       	movw	r24, r12
     cc2:	b8 01       	movw	r22, r16
     cc4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     cc8:	60 e3       	ldi	r22, 0x30	; 48
     cca:	68 0f       	add	r22, r24
     ccc:	86 e5       	ldi	r24, 0x56	; 86
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
			sc.LCD_String(":");
     cd4:	6d e7       	ldi	r22, 0x7D	; 125
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	86 e5       	ldi	r24, 0x56	; 86
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
			sc.LCD_Char((char) (_minute/10)+48);
     ce0:	c7 01       	movw	r24, r14
     ce2:	b8 01       	movw	r22, r16
     ce4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     ce8:	18 2f       	mov	r17, r24
     cea:	60 5d       	subi	r22, 0xD0	; 208
     cec:	86 e5       	ldi	r24, 0x56	; 86
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
			sc.LCD_Char((char) (_minute%10)+48);
     cf4:	60 e3       	ldi	r22, 0x30	; 48
     cf6:	61 0f       	add	r22, r17
     cf8:	86 e5       	ldi	r24, 0x56	; 86
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
     d00:	85 cf       	rjmp	.-246    	; 0xc0c <_Z11deleteAlarmv+0xbc>

00000d02 <_Z12factoryResetv>:
	}
}

//-----------------------------------------------------------------------------------------------

void factoryReset(){
     d02:	cf 92       	push	r12
     d04:	ef 92       	push	r14
     d06:	0f 93       	push	r16
	sc.LCD_clear();
     d08:	86 e5       	ldi	r24, 0x56	; 86
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	
	sc.LCD_String("Are you sure?");
     d10:	68 ed       	ldi	r22, 0xD8	; 216
     d12:	71 e0       	ldi	r23, 0x01	; 1
     d14:	86 e5       	ldi	r24, 0x56	; 86
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
     d1c:	60 ec       	ldi	r22, 0xC0	; 192
     d1e:	86 e5       	ldi	r24, 0x56	; 86
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("Yes           No");
     d26:	66 ee       	ldi	r22, 0xE6	; 230
     d28:	71 e0       	ldi	r23, 0x01	; 1
     d2a:	86 e5       	ldi	r24, 0x56	; 86
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	while(1){
		if (sc.pressedSelect()){
     d32:	86 e5       	ldi	r24, 0x56	; 86
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	0e 94 32 03 	call	0x664	; 0x664 <_ZN6Screen13pressedSelectEv>
     d3a:	88 23       	and	r24, r24
     d3c:	09 f4       	brne	.+2      	; 0xd40 <_Z12factoryResetv+0x3e>
     d3e:	a3 c0       	rjmp	.+326    	; 0xe86 <_Z12factoryResetv+0x184>
			int alarmArray[5] ={-1,-1,-1,-1,-1};
			ds1307_setdate(00,01,01, 00,00,00,00);
     d40:	c1 2c       	mov	r12, r1
     d42:	e1 2c       	mov	r14, r1
     d44:	00 e0       	ldi	r16, 0x00	; 0
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14ds1307_setdatehhhhhhh>
			sc.LCD_String("Please Wait");
     d52:	67 ef       	ldi	r22, 0xF7	; 247
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	86 e5       	ldi	r24, 0x56	; 86
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     d5e:	2f e3       	ldi	r18, 0x3F	; 63
     d60:	8d e0       	ldi	r24, 0x0D	; 13
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	80 40       	sbci	r24, 0x00	; 0
     d68:	90 40       	sbci	r25, 0x00	; 0
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <_Z12factoryResetv+0x62>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <_Z12factoryResetv+0x6c>
     d6e:	00 00       	nop
//This process is to be shown as a percentange			
			_delay_ms(1000);
			sc.LCD_String(".");
     d70:	63 e0       	ldi	r22, 0x03	; 3
     d72:	72 e0       	ldi	r23, 0x02	; 2
     d74:	86 e5       	ldi	r24, 0x56	; 86
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     d7c:	2f e3       	ldi	r18, 0x3F	; 63
     d7e:	8d e0       	ldi	r24, 0x0D	; 13
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	80 40       	sbci	r24, 0x00	; 0
     d86:	90 40       	sbci	r25, 0x00	; 0
     d88:	e1 f7       	brne	.-8      	; 0xd82 <_Z12factoryResetv+0x80>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <_Z12factoryResetv+0x8a>
     d8c:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_String(".");
     d8e:	63 e0       	ldi	r22, 0x03	; 3
     d90:	72 e0       	ldi	r23, 0x02	; 2
     d92:	86 e5       	ldi	r24, 0x56	; 86
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     d9a:	2f e3       	ldi	r18, 0x3F	; 63
     d9c:	8d e0       	ldi	r24, 0x0D	; 13
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	80 40       	sbci	r24, 0x00	; 0
     da4:	90 40       	sbci	r25, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <_Z12factoryResetv+0x9e>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <_Z12factoryResetv+0xa8>
     daa:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_String(".");
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	72 e0       	ldi	r23, 0x02	; 2
     db0:	86 e5       	ldi	r24, 0x56	; 86
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     db8:	2f e3       	ldi	r18, 0x3F	; 63
     dba:	8d e0       	ldi	r24, 0x0D	; 13
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	21 50       	subi	r18, 0x01	; 1
     dc0:	80 40       	sbci	r24, 0x00	; 0
     dc2:	90 40       	sbci	r25, 0x00	; 0
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <_Z12factoryResetv+0xbc>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <_Z12factoryResetv+0xc6>
     dc8:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_clear();
     dca:	86 e5       	ldi	r24, 0x56	; 86
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
     dd2:	83 ec       	ldi	r24, 0xC3	; 195
     dd4:	99 e0       	ldi	r25, 0x09	; 9
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <_Z12factoryResetv+0xd4>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <_Z12factoryResetv+0xda>
     ddc:	00 00       	nop
			_delay_ms(10);
			sc.LCD_String("Please Wait");
     dde:	67 ef       	ldi	r22, 0xF7	; 247
     de0:	71 e0       	ldi	r23, 0x01	; 1
     de2:	86 e5       	ldi	r24, 0x56	; 86
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     dea:	9f e3       	ldi	r25, 0x3F	; 63
     dec:	2d e0       	ldi	r18, 0x0D	; 13
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	91 50       	subi	r25, 0x01	; 1
     df2:	20 40       	sbci	r18, 0x00	; 0
     df4:	80 40       	sbci	r24, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <_Z12factoryResetv+0xee>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <_Z12factoryResetv+0xf8>
     dfa:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_String(".");
     dfc:	63 e0       	ldi	r22, 0x03	; 3
     dfe:	72 e0       	ldi	r23, 0x02	; 2
     e00:	86 e5       	ldi	r24, 0x56	; 86
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     e08:	9f e3       	ldi	r25, 0x3F	; 63
     e0a:	2d e0       	ldi	r18, 0x0D	; 13
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	91 50       	subi	r25, 0x01	; 1
     e10:	20 40       	sbci	r18, 0x00	; 0
     e12:	80 40       	sbci	r24, 0x00	; 0
     e14:	e1 f7       	brne	.-8      	; 0xe0e <_Z12factoryResetv+0x10c>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <_Z12factoryResetv+0x116>
     e18:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_String(".");
     e1a:	63 e0       	ldi	r22, 0x03	; 3
     e1c:	72 e0       	ldi	r23, 0x02	; 2
     e1e:	86 e5       	ldi	r24, 0x56	; 86
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     e26:	9f e3       	ldi	r25, 0x3F	; 63
     e28:	2d e0       	ldi	r18, 0x0D	; 13
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	91 50       	subi	r25, 0x01	; 1
     e2e:	20 40       	sbci	r18, 0x00	; 0
     e30:	80 40       	sbci	r24, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <_Z12factoryResetv+0x12a>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <_Z12factoryResetv+0x134>
     e36:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_String(".");
     e38:	63 e0       	ldi	r22, 0x03	; 3
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	86 e5       	ldi	r24, 0x56	; 86
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     e44:	9f e3       	ldi	r25, 0x3F	; 63
     e46:	2d e0       	ldi	r18, 0x0D	; 13
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	91 50       	subi	r25, 0x01	; 1
     e4c:	20 40       	sbci	r18, 0x00	; 0
     e4e:	80 40       	sbci	r24, 0x00	; 0
     e50:	e1 f7       	brne	.-8      	; 0xe4a <_Z12factoryResetv+0x148>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <_Z12factoryResetv+0x152>
     e54:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_clear();
     e56:	86 e5       	ldi	r24, 0x56	; 86
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
			sc.LCD_String("DONE!!!");
     e5e:	65 e0       	ldi	r22, 0x05	; 5
     e60:	72 e0       	ldi	r23, 0x02	; 2
     e62:	86 e5       	ldi	r24, 0x56	; 86
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
     e6a:	9f e3       	ldi	r25, 0x3F	; 63
     e6c:	2d e0       	ldi	r18, 0x0D	; 13
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	91 50       	subi	r25, 0x01	; 1
     e72:	20 40       	sbci	r18, 0x00	; 0
     e74:	80 40       	sbci	r24, 0x00	; 0
     e76:	e1 f7       	brne	.-8      	; 0xe70 <_Z12factoryResetv+0x16e>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <_Z12factoryResetv+0x178>
     e7a:	00 00       	nop
			_delay_ms(1000);
			sc.LCD_clear();
     e7c:	86 e5       	ldi	r24, 0x56	; 86
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <_Z12factoryResetv+0x192>
			break;
		}
		else if (sc.pressedBack()){
     e86:	86 e5       	ldi	r24, 0x56	; 86
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	0e 94 41 03 	call	0x682	; 0x682 <_ZN6Screen11pressedBackEv>
     e8e:	88 23       	and	r24, r24
     e90:	09 f4       	brne	.+2      	; 0xe94 <_Z12factoryResetv+0x192>
     e92:	4f cf       	rjmp	.-354    	; 0xd32 <_Z12factoryResetv+0x30>
		}
	}
	
	
		
}
     e94:	0f 91       	pop	r16
     e96:	ef 90       	pop	r14
     e98:	cf 90       	pop	r12
     e9a:	08 95       	ret

00000e9c <_Z15moveCursorRighti>:

void moveCursorRight(int i){
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	8c 01       	movw	r16, r24
	for (int l=0; l<i;l++){
     ea6:	c0 e0       	ldi	r28, 0x00	; 0
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
     eaa:	c0 17       	cp	r28, r16
     eac:	d1 07       	cpc	r29, r17
     eae:	3c f4       	brge	.+14     	; 0xebe <_Z15moveCursorRighti+0x22>
		sc.LCD_Command(0x14);
     eb0:	64 e1       	ldi	r22, 0x14	; 20
     eb2:	86 e5       	ldi	r24, 0x56	; 86
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	
		
}

void moveCursorRight(int i){
	for (int l=0; l<i;l++){
     eba:	21 96       	adiw	r28, 0x01	; 1
     ebc:	f6 cf       	rjmp	.-20     	; 0xeaa <_Z15moveCursorRighti+0xe>
		sc.LCD_Command(0x14);
	}
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <_Z14moveCursorLefti>:

void moveCursorLeft(int j){
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	8c 01       	movw	r16, r24
	for (int k =0; k<j; k++){
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	c0 17       	cp	r28, r16
     ed8:	d1 07       	cpc	r29, r17
     eda:	3c f4       	brge	.+14     	; 0xeea <_Z14moveCursorLefti+0x22>
		sc.LCD_Command(0x10);
     edc:	60 e1       	ldi	r22, 0x10	; 16
     ede:	86 e5       	ldi	r24, 0x56	; 86
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
		sc.LCD_Command(0x14);
	}
}

void moveCursorLeft(int j){
	for (int k =0; k<j; k++){
     ee6:	21 96       	adiw	r28, 0x01	; 1
     ee8:	f6 cf       	rjmp	.-20     	; 0xed6 <_Z14moveCursorLefti+0xe>
		sc.LCD_Command(0x10);
	}
}
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <_Z12setClockTimev>:
		return false;
	}
}

//----------------------------------------------------------------------------------------------------------------------
void setClockTime(){
     ef4:	8f 92       	push	r8
     ef6:	9f 92       	push	r9
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	ef 92       	push	r14
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
	sc.LCD_clear();
     f08:	86 e5       	ldi	r24, 0x56	; 86
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("Set time here");
     f10:	6d e0       	ldi	r22, 0x0D	; 13
     f12:	72 e0       	ldi	r23, 0x02	; 2
     f14:	86 e5       	ldi	r24, 0x56	; 86
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
     f1c:	60 ec       	ldi	r22, 0xC0	; 192
     f1e:	86 e5       	ldi	r24, 0x56	; 86
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("hh : mm");
     f26:	62 ea       	ldi	r22, 0xA2	; 162
     f28:	71 e0       	ldi	r23, 0x01	; 1
     f2a:	86 e5       	ldi	r24, 0x56	; 86
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	//sc.LCD_Command(0XC0);
	//sc.LCD_String("YY : MM : DD");
	//sc.LCD_Command(0x80);
	
	while (1){
		sc.LCD_Command(0xc0);
     f32:	60 ec       	ldi	r22, 0xC0	; 192
     f34:	86 e5       	ldi	r24, 0x56	; 86
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
		sc.blink();
     f3c:	86 e5       	ldi	r24, 0x56	; 86
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN6Screen5blinkEv>
		h = (int (kp.pressedKey())-48)*10;
     f44:	85 e5       	ldi	r24, 0x55	; 85
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	20 53       	subi	r18, 0x30	; 48
     f52:	31 09       	sbc	r19, r1
     f54:	c9 01       	movw	r24, r18
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <h+0x1>
     f6e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <h>
		sc.LCD_Char((char) (h/10)+48);
     f72:	ca e0       	ldi	r28, 0x0A	; 10
     f74:	d0 e0       	ldi	r29, 0x00	; 0
     f76:	be 01       	movw	r22, r28
     f78:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     f7c:	60 5d       	subi	r22, 0xD0	; 208
     f7e:	86 e5       	ldi	r24, 0x56	; 86
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		h += (int (kp.pressedKey()) -48);
     f86:	85 e5       	ldi	r24, 0x55	; 85
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	c0 97       	sbiw	r24, 0x30	; 48
     f92:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <h>
     f96:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <h+0x1>
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <h+0x1>
     fa2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <h>
		sc.LCD_Char((char) (h%10)+48);
     fa6:	be 01       	movw	r22, r28
     fa8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
     fac:	60 e3       	ldi	r22, 0x30	; 48
     fae:	68 0f       	add	r22, r24
     fb0:	86 e5       	ldi	r24, 0x56	; 86
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		sc.stopBlink();
     fb8:	86 e5       	ldi	r24, 0x56	; 86
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
     fc0:	83 e2       	ldi	r24, 0x23	; 35
     fc2:	94 ef       	ldi	r25, 0xF4	; 244
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <_Z12setClockTimev+0xd0>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <_Z12setClockTimev+0xd6>
     fca:	00 00       	nop
		_delay_ms(250);
		
		if(h<24){
     fcc:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <h>
     fd0:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <h+0x1>
     fd4:	48 97       	sbiw	r24, 0x18	; 24
     fd6:	64 f0       	brlt	.+24     	; 0xff0 <_Z12setClockTimev+0xfc>
			break;
		}
		sc.LCD_Command(0xc0); 
     fd8:	60 ec       	ldi	r22, 0xC0	; 192
     fda:	86 e5       	ldi	r24, 0x56	; 86
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("hh");
     fe2:	6b e1       	ldi	r22, 0x1B	; 27
     fe4:	72 e0       	ldi	r23, 0x02	; 2
     fe6:	86 e5       	ldi	r24, 0x56	; 86
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_String("hh : mm");
	//sc.LCD_Command(0XC0);
	//sc.LCD_String("YY : MM : DD");
	//sc.LCD_Command(0x80);
	
	while (1){
     fee:	a1 cf       	rjmp	.-190    	; 0xf32 <_Z12setClockTimev+0x3e>
		}
		sc.LCD_Command(0xc0); 
		sc.LCD_String("hh");
		}
	
	sc.LCD_String(" : ");
     ff0:	6a ea       	ldi	r22, 0xAA	; 170
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	86 e5       	ldi	r24, 0x56	; 86
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	while(1){
		sc.blink();
     ffc:	86 e5       	ldi	r24, 0x56	; 86
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN6Screen5blinkEv>
		M = (int (kp.pressedKey())-48)*10;
    1004:	85 e5       	ldi	r24, 0x55	; 85
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	20 53       	subi	r18, 0x30	; 48
    1012:	31 09       	sbc	r19, r1
    1014:	c9 01       	movw	r24, r18
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	22 0f       	add	r18, r18
    1024:	33 1f       	adc	r19, r19
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <M+0x1>
    102e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <M>
		sc.LCD_Char((char) (M/10)+48);
    1032:	ca e0       	ldi	r28, 0x0A	; 10
    1034:	d0 e0       	ldi	r29, 0x00	; 0
    1036:	be 01       	movw	r22, r28
    1038:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    103c:	60 5d       	subi	r22, 0xD0	; 208
    103e:	86 e5       	ldi	r24, 0x56	; 86
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		M += (int (kp.pressedKey()) -48);
    1046:	85 e5       	ldi	r24, 0x55	; 85
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	c0 97       	sbiw	r24, 0x30	; 48
    1052:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <M>
    1056:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <M+0x1>
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <M+0x1>
    1062:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <M>
		sc.LCD_Char((char) (M%10)+48);
    1066:	be 01       	movw	r22, r28
    1068:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    106c:	60 e3       	ldi	r22, 0x30	; 48
    106e:	68 0f       	add	r22, r24
    1070:	86 e5       	ldi	r24, 0x56	; 86
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
    1078:	83 e2       	ldi	r24, 0x23	; 35
    107a:	94 ef       	ldi	r25, 0xF4	; 244
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <_Z12setClockTimev+0x188>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <_Z12setClockTimev+0x18e>
    1082:	00 00       	nop
		_delay_ms(250);
		sc.stopBlink();
    1084:	86 e5       	ldi	r24, 0x56	; 86
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
		
		if (M<60){
    108c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <M>
    1090:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <M+0x1>
    1094:	cc 97       	sbiw	r24, 0x3c	; 60
    1096:	a4 f0       	brlt	.+40     	; 0x10c0 <_Z12setClockTimev+0x1cc>
			break;
		}
		sc.LCD_Command(0xc0);  
    1098:	60 ec       	ldi	r22, 0xC0	; 192
    109a:	86 e5       	ldi	r24, 0x56	; 86
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(5);
    10a2:	85 e0       	ldi	r24, 0x05	; 5
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_Z15moveCursorRighti>
		sc.LCD_String("mm");
    10aa:	67 ea       	ldi	r22, 0xA7	; 167
    10ac:	71 e0       	ldi	r23, 0x01	; 1
    10ae:	86 e5       	ldi	r24, 0x56	; 86
    10b0:	92 e0       	ldi	r25, 0x02	; 2
    10b2:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
		moveCursorLeft(2);}
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z14moveCursorLefti>
		sc.LCD_Command(0xc0); 
		sc.LCD_String("hh");
		}
	
	sc.LCD_String(" : ");
	while(1){
    10be:	9e cf       	rjmp	.-196    	; 0xffc <_Z12setClockTimev+0x108>
    10c0:	9f e9       	ldi	r25, 0x9F	; 159
    10c2:	26 e8       	ldi	r18, 0x86	; 134
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	91 50       	subi	r25, 0x01	; 1
    10c8:	20 40       	sbci	r18, 0x00	; 0
    10ca:	80 40       	sbci	r24, 0x00	; 0
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <_Z12setClockTimev+0x1d2>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <_Z12setClockTimev+0x1dc>
    10d0:	00 00       	nop
	
	int s=0;
	
	_delay_ms(500);
	
	sc.LCD_clear();
    10d2:	86 e5       	ldi	r24, 0x56	; 86
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("Set date here");
    10da:	6e e1       	ldi	r22, 0x1E	; 30
    10dc:	72 e0       	ldi	r23, 0x02	; 2
    10de:	86 e5       	ldi	r24, 0x56	; 86
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    10e6:	60 ec       	ldi	r22, 0xC0	; 192
    10e8:	86 e5       	ldi	r24, 0x56	; 86
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("YY : MM : DD");
    10f0:	6c e2       	ldi	r22, 0x2C	; 44
    10f2:	72 e0       	ldi	r23, 0x02	; 2
    10f4:	86 e5       	ldi	r24, 0x56	; 86
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    10fc:	60 ec       	ldi	r22, 0xC0	; 192
    10fe:	86 e5       	ldi	r24, 0x56	; 86
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>

	sc.blink();
    1106:	86 e5       	ldi	r24, 0x56	; 86
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN6Screen5blinkEv>
	int y = (int (kp.pressedKey())-48)*10;
    110e:	85 e5       	ldi	r24, 0x55	; 85
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	c0 97       	sbiw	r24, 0x30	; 48
    111a:	ec 01       	movw	r28, r24
    111c:	cc 0f       	add	r28, r28
    111e:	dd 1f       	adc	r29, r29
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	8e 01       	movw	r16, r28
    112e:	08 0f       	add	r16, r24
    1130:	19 1f       	adc	r17, r25
	sc.LCD_Char((char) (y/10)+48);
    1132:	0f 2e       	mov	r0, r31
    1134:	fa e0       	ldi	r31, 0x0A	; 10
    1136:	af 2e       	mov	r10, r31
    1138:	b1 2c       	mov	r11, r1
    113a:	f0 2d       	mov	r31, r0
    113c:	c8 01       	movw	r24, r16
    113e:	b5 01       	movw	r22, r10
    1140:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    1144:	60 5d       	subi	r22, 0xD0	; 208
    1146:	86 e5       	ldi	r24, 0x56	; 86
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	y += (int (kp.pressedKey()) -48);
    114e:	85 e5       	ldi	r24, 0x55	; 85
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1156:	c8 2f       	mov	r28, r24
    1158:	d0 e0       	ldi	r29, 0x00	; 0
    115a:	e0 97       	sbiw	r28, 0x30	; 48
    115c:	c0 0f       	add	r28, r16
    115e:	d1 1f       	adc	r29, r17
	sc.LCD_Char((char) (y%10)+48);
    1160:	ce 01       	movw	r24, r28
    1162:	b5 01       	movw	r22, r10
    1164:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    1168:	60 e3       	ldi	r22, 0x30	; 48
    116a:	68 0f       	add	r22, r24
    116c:	86 e5       	ldi	r24, 0x56	; 86
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
	sc.stopBlink();
    1174:	86 e5       	ldi	r24, 0x56	; 86
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
    117c:	83 e2       	ldi	r24, 0x23	; 35
    117e:	94 ef       	ldi	r25, 0xF4	; 244
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <_Z12setClockTimev+0x28c>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <_Z12setClockTimev+0x292>
    1186:	00 00       	nop
	_delay_ms(250);
	
	sc.LCD_String(" : ");
    1188:	6a ea       	ldi	r22, 0xAA	; 170
    118a:	71 e0       	ldi	r23, 0x01	; 1
    118c:	86 e5       	ldi	r24, 0x56	; 86
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		sc.blink();
    1194:	86 e5       	ldi	r24, 0x56	; 86
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN6Screen5blinkEv>
		m = (int (kp.pressedKey())-48)*10;
    119c:	85 e5       	ldi	r24, 0x55	; 85
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	20 53       	subi	r18, 0x30	; 48
    11aa:	31 09       	sbc	r19, r1
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	82 0f       	add	r24, r18
    11c0:	93 1f       	adc	r25, r19
    11c2:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <m+0x1>
    11c6:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <m>
		sc.LCD_Char((char) (m/10)+48);
    11ca:	0a e0       	ldi	r16, 0x0A	; 10
    11cc:	10 e0       	ldi	r17, 0x00	; 0
    11ce:	b8 01       	movw	r22, r16
    11d0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    11d4:	60 5d       	subi	r22, 0xD0	; 208
    11d6:	86 e5       	ldi	r24, 0x56	; 86
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		m += (int (kp.pressedKey()) -48);
    11de:	85 e5       	ldi	r24, 0x55	; 85
    11e0:	92 e0       	ldi	r25, 0x02	; 2
    11e2:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	c0 97       	sbiw	r24, 0x30	; 48
    11ea:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <m>
    11ee:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <m+0x1>
    11f2:	82 0f       	add	r24, r18
    11f4:	93 1f       	adc	r25, r19
    11f6:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <m+0x1>
    11fa:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <m>
		sc.LCD_Char((char) (m%10)+48);
    11fe:	b8 01       	movw	r22, r16
    1200:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    1204:	60 e3       	ldi	r22, 0x30	; 48
    1206:	68 0f       	add	r22, r24
    1208:	86 e5       	ldi	r24, 0x56	; 86
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
    1210:	83 e2       	ldi	r24, 0x23	; 35
    1212:	94 ef       	ldi	r25, 0xF4	; 244
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <_Z12setClockTimev+0x320>
    1218:	00 c0       	rjmp	.+0      	; 0x121a <_Z12setClockTimev+0x326>
    121a:	00 00       	nop
		_delay_ms(250);
		sc.stopBlink();
    121c:	86 e5       	ldi	r24, 0x56	; 86
    121e:	92 e0       	ldi	r25, 0x02	; 2
    1220:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
		
		if (m<13){
    1224:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <m>
    1228:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <m+0x1>
    122c:	0d 97       	sbiw	r24, 0x0d	; 13
    122e:	a4 f0       	brlt	.+40     	; 0x1258 <_Z12setClockTimev+0x364>
			break;
		}
		sc.LCD_Command(0xc0);
    1230:	60 ec       	ldi	r22, 0xC0	; 192
    1232:	86 e5       	ldi	r24, 0x56	; 86
    1234:	92 e0       	ldi	r25, 0x02	; 2
    1236:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(5);
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_Z15moveCursorRighti>
		sc.LCD_String("MM");
    1242:	69 e3       	ldi	r22, 0x39	; 57
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	86 e5       	ldi	r24, 0x56	; 86
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	moveCursorLeft(2);}
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z14moveCursorLefti>
	sc.stopBlink();
	_delay_ms(250);
	
	sc.LCD_String(" : ");
	
	while(1){
    1256:	9e cf       	rjmp	.-196    	; 0x1194 <_Z12setClockTimev+0x2a0>
		moveCursorRight(5);
		sc.LCD_String("MM");
	moveCursorLeft(2);}
	
	
	sc.LCD_String(" : ");
    1258:	6a ea       	ldi	r22, 0xAA	; 170
    125a:	71 e0       	ldi	r23, 0x01	; 1
    125c:	86 e5       	ldi	r24, 0x56	; 86
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		sc.blink();
    1264:	86 e5       	ldi	r24, 0x56	; 86
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN6Screen5blinkEv>
		d = (int (kp.pressedKey())-48)*10;
    126c:	85 e5       	ldi	r24, 0x55	; 85
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	20 53       	subi	r18, 0x30	; 48
    127a:	31 09       	sbc	r19, r1
    127c:	c9 01       	movw	r24, r18
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <d+0x1>
    1296:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <d>
		sc.LCD_Char((char) (d/10)+48);
    129a:	0a e0       	ldi	r16, 0x0A	; 10
    129c:	10 e0       	ldi	r17, 0x00	; 0
    129e:	b8 01       	movw	r22, r16
    12a0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    12a4:	60 5d       	subi	r22, 0xD0	; 208
    12a6:	86 e5       	ldi	r24, 0x56	; 86
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
		d += (int (kp.pressedKey()) -48);
    12ae:	85 e5       	ldi	r24, 0x55	; 85
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	c0 97       	sbiw	r24, 0x30	; 48
    12ba:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <d>
    12be:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <d+0x1>
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <d+0x1>
    12ca:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <d>
		sc.LCD_Char((char) (d%10)+48);
    12ce:	b8 01       	movw	r22, r16
    12d0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divmodhi4>
    12d4:	60 e3       	ldi	r22, 0x30	; 48
    12d6:	68 0f       	add	r22, r24
    12d8:	86 e5       	ldi	r24, 0x56	; 86
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_ZN6Screen8LCD_CharEh>
    12e0:	83 e2       	ldi	r24, 0x23	; 35
    12e2:	94 ef       	ldi	r25, 0xF4	; 244
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <_Z12setClockTimev+0x3f0>
    12e8:	00 c0       	rjmp	.+0      	; 0x12ea <_Z12setClockTimev+0x3f6>
    12ea:	00 00       	nop
		_delay_ms(250);
		sc.stopBlink();
    12ec:	86 e5       	ldi	r24, 0x56	; 86
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen9stopBlinkEv>
		
		if (d<monthsDays[m-1]){
    12f4:	a0 90 4c 02 	lds	r10, 0x024C	; 0x80024c <m>
    12f8:	b0 90 4d 02 	lds	r11, 0x024D	; 0x80024d <m+0x1>
    12fc:	f5 01       	movw	r30, r10
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	e4 5b       	subi	r30, 0xB4	; 180
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	80 90 4a 02 	lds	r8, 0x024A	; 0x80024a <d>
    1310:	90 90 4b 02 	lds	r9, 0x024B	; 0x80024b <d+0x1>
    1314:	88 16       	cp	r8, r24
    1316:	99 06       	cpc	r9, r25
    1318:	a4 f0       	brlt	.+40     	; 0x1342 <_Z12setClockTimev+0x44e>
			break;
		}
		sc.LCD_Command(0xc0);
    131a:	60 ec       	ldi	r22, 0xC0	; 192
    131c:	86 e5       	ldi	r24, 0x56	; 86
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(10);
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_Z15moveCursorRighti>
		sc.LCD_String("DD");
    132c:	66 e3       	ldi	r22, 0x36	; 54
    132e:	72 e0       	ldi	r23, 0x02	; 2
    1330:	86 e5       	ldi	r24, 0x56	; 86
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	moveCursorLeft(2);}
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 64 07 	call	0xec8	; 0xec8 <_Z14moveCursorLefti>
	moveCursorLeft(2);}
	
	
	sc.LCD_String(" : ");
	
	while(1){
    1340:	91 cf       	rjmp	.-222    	; 0x1264 <_Z12setClockTimev+0x370>
		sc.LCD_Command(0xc0);
		moveCursorRight(10);
		sc.LCD_String("DD");
	moveCursorLeft(2);}
	
	int D = getDay(y,m,d);
    1342:	a4 01       	movw	r20, r8
    1344:	b5 01       	movw	r22, r10
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <_Z6getDayiii>
	ds1307_setdate(y,m, d, D, h, M, s);
    134c:	e0 90 46 02 	lds	r14, 0x0246	; 0x800246 <M>
    1350:	00 91 48 02 	lds	r16, 0x0248	; 0x800248 <h>
    1354:	c1 2c       	mov	r12, r1
    1356:	28 2f       	mov	r18, r24
    1358:	48 2d       	mov	r20, r8
    135a:	6a 2d       	mov	r22, r10
    135c:	8c 2f       	mov	r24, r28
    135e:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14ds1307_setdatehhhhhhh>
		
}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ef 90       	pop	r14
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	9f 90       	pop	r9
    1374:	8f 90       	pop	r8
    1376:	08 95       	ret

00001378 <_Z8mainLoopv>:
		
	}
}

void mainLoop(){
	showTime();
    1378:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_Z8showTimev>
	if (sc.pressedSelect()){
    137c:	86 e5       	ldi	r24, 0x56	; 86
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	0e 94 32 03 	call	0x664	; 0x664 <_ZN6Screen13pressedSelectEv>
    1384:	88 23       	and	r24, r24
    1386:	31 f0       	breq	.+12     	; 0x1394 <_Z8mainLoopv+0x1c>
		sc.LCD_clear();
    1388:	86 e5       	ldi	r24, 0x56	; 86
    138a:	92 e0       	ldi	r25, 0x02	; 2
    138c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
		mainMenu();
    1390:	0e 94 cb 09 	call	0x1396	; 0x1396 <_Z8mainMenuv>
    1394:	08 95       	ret

00001396 <_Z8mainMenuv>:
}


void mainMenu()
{
	sc.LCD_clear();
    1396:	86 e5       	ldi	r24, 0x56	; 86
    1398:	92 e0       	ldi	r25, 0x02	; 2
    139a:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
	sc.LCD_String(menu[menu_i]);
    139e:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <menu_i>
    13a2:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <menu_i+0x1>
    13a6:	62 95       	swap	r22
    13a8:	72 95       	swap	r23
    13aa:	70 7f       	andi	r23, 0xF0	; 240
    13ac:	76 27       	eor	r23, r22
    13ae:	60 7f       	andi	r22, 0xF0	; 240
    13b0:	76 27       	eor	r23, r22
    13b2:	64 5f       	subi	r22, 0xF4	; 244
    13b4:	7e 4f       	sbci	r23, 0xFE	; 254
    13b6:	86 e5       	ldi	r24, 0x56	; 86
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		
		char btn = sc.Control_buttons();
    13be:	86 e5       	ldi	r24, 0x56	; 86
    13c0:	92 e0       	ldi	r25, 0x02	; 2
    13c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN6Screen15Control_buttonsEv>
		if (btn=='d'){
    13c6:	84 36       	cpi	r24, 0x64	; 100
    13c8:	91 f4       	brne	.+36     	; 0x13ee <_Z8mainMenuv+0x58>
			switch(menu_i)
    13ca:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <menu_i>
    13ce:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <menu_i+0x1>
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	91 05       	cpc	r25, r1
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <_Z8mainMenuv+0x4c>
			{
				case 3: menu_i = 0; break;
    13d8:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <menu_i+0x1>
    13dc:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <menu_i>
    13e0:	3d c0       	rjmp	.+122    	; 0x145c <_Z8mainMenuv+0xc6>
				default: menu_i ++; break;
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <menu_i+0x1>
    13e8:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <menu_i>
    13ec:	37 c0       	rjmp	.+110    	; 0x145c <_Z8mainMenuv+0xc6>
			}
		}
		else if (btn=='u'){
    13ee:	85 37       	cpi	r24, 0x75	; 117
    13f0:	99 f4       	brne	.+38     	; 0x1418 <_Z8mainMenuv+0x82>
			switch (menu_i)
    13f2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <menu_i>
    13f6:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <menu_i+0x1>
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	39 f4       	brne	.+14     	; 0x140c <_Z8mainMenuv+0x76>
			{
				case 0: menu_i = 3; break;
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <menu_i+0x1>
    1406:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <menu_i>
    140a:	28 c0       	rjmp	.+80     	; 0x145c <_Z8mainMenuv+0xc6>
				default: menu_i --; break;
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <menu_i+0x1>
    1412:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <menu_i>
    1416:	22 c0       	rjmp	.+68     	; 0x145c <_Z8mainMenuv+0xc6>
			}
		}
		
		else if (btn=='b'){
    1418:	82 36       	cpi	r24, 0x62	; 98
    141a:	19 f4       	brne	.+6      	; 0x1422 <_Z8mainMenuv+0x8c>
			mainLoop();
    141c:	0e 94 bc 09 	call	0x1378	; 0x1378 <_Z8mainLoopv>
		_delay_ms(500);
		
		
		
	}
}
    1420:	08 95       	ret
		
		else if (btn=='b'){
			mainLoop();
		break;}
		
		else if (btn=='s'){
    1422:	83 37       	cpi	r24, 0x73	; 115
    1424:	d9 f4       	brne	.+54     	; 0x145c <_Z8mainMenuv+0xc6>
			switch (menu_i)
    1426:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <menu_i>
    142a:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <menu_i+0x1>
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	69 f0       	breq	.+26     	; 0x144e <_Z8mainMenuv+0xb8>
    1434:	1c f4       	brge	.+6      	; 0x143c <_Z8mainMenuv+0xa6>
    1436:	89 2b       	or	r24, r25
    1438:	39 f0       	breq	.+14     	; 0x1448 <_Z8mainMenuv+0xb2>
    143a:	10 c0       	rjmp	.+32     	; 0x145c <_Z8mainMenuv+0xc6>
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	91 05       	cpc	r25, r1
    1440:	49 f0       	breq	.+18     	; 0x1454 <_Z8mainMenuv+0xbe>
    1442:	03 97       	sbiw	r24, 0x03	; 3
    1444:	49 f0       	breq	.+18     	; 0x1458 <_Z8mainMenuv+0xc2>
    1446:	0a c0       	rjmp	.+20     	; 0x145c <_Z8mainMenuv+0xc6>
			{case 0:
				set_alarm();
    1448:	0e 94 bc 04 	call	0x978	; 0x978 <_Z9set_alarmv>
				break;
    144c:	07 c0       	rjmp	.+14     	; 0x145c <_Z8mainMenuv+0xc6>
				
				case 1:
				setClockTime();
    144e:	0e 94 7a 07 	call	0xef4	; 0xef4 <_Z12setClockTimev>
				break;
    1452:	04 c0       	rjmp	.+8      	; 0x145c <_Z8mainMenuv+0xc6>
				
				case 2:
				deleteAlarm();
    1454:	0e 94 a8 05 	call	0xb50	; 0xb50 <_Z11deleteAlarmv>
				break;
				case 3:
				factoryReset();
    1458:	0e 94 81 06 	call	0xd02	; 0xd02 <_Z12factoryResetv>
				
			}
		}
		

		sc.LCD_clear();
    145c:	86 e5       	ldi	r24, 0x56	; 86
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN6Screen9LCD_clearEv>
		sc.LCD_String(menu[menu_i]);
    1464:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <menu_i>
    1468:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <menu_i+0x1>
    146c:	62 95       	swap	r22
    146e:	72 95       	swap	r23
    1470:	70 7f       	andi	r23, 0xF0	; 240
    1472:	76 27       	eor	r23, r22
    1474:	60 7f       	andi	r22, 0xF0	; 240
    1476:	76 27       	eor	r23, r22
    1478:	64 5f       	subi	r22, 0xF4	; 244
    147a:	7e 4f       	sbci	r23, 0xFE	; 254
    147c:	86 e5       	ldi	r24, 0x56	; 86
    147e:	92 e0       	ldi	r25, 0x02	; 2
    1480:	0e 94 92 02 	call	0x524	; 0x524 <_ZN6Screen10LCD_StringEPc>
    1484:	2f e9       	ldi	r18, 0x9F	; 159
    1486:	86 e8       	ldi	r24, 0x86	; 134
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	21 50       	subi	r18, 0x01	; 1
    148c:	80 40       	sbci	r24, 0x00	; 0
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	e1 f7       	brne	.-8      	; 0x148a <_Z8mainMenuv+0xf4>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <_Z8mainMenuv+0xfe>
    1494:	00 00       	nop
    1496:	93 cf       	rjmp	.-218    	; 0x13be <_Z8mainMenuv+0x28>

00001498 <_ZN4ToneC1Eii>:

int changing;

Tone::Tone(int pin_1,int pin_2)
{
	SPEAKER_PIN=pin_1;
    1498:	fc 01       	movw	r30, r24
    149a:	71 83       	std	Z+1, r23	; 0x01
    149c:	60 83       	st	Z, r22
	BUTTON_PIN =pin_2;
    149e:	53 83       	std	Z+3, r21	; 0x03
    14a0:	42 83       	std	Z+2, r20	; 0x02
    14a2:	08 95       	ret

000014a4 <__divmodhi4>:
    14a4:	97 fb       	bst	r25, 7
    14a6:	07 2e       	mov	r0, r23
    14a8:	16 f4       	brtc	.+4      	; 0x14ae <__divmodhi4+0xa>
    14aa:	00 94       	com	r0
    14ac:	07 d0       	rcall	.+14     	; 0x14bc <__divmodhi4_neg1>
    14ae:	77 fd       	sbrc	r23, 7
    14b0:	09 d0       	rcall	.+18     	; 0x14c4 <__divmodhi4_neg2>
    14b2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__udivmodhi4>
    14b6:	07 fc       	sbrc	r0, 7
    14b8:	05 d0       	rcall	.+10     	; 0x14c4 <__divmodhi4_neg2>
    14ba:	3e f4       	brtc	.+14     	; 0x14ca <__divmodhi4_exit>

000014bc <__divmodhi4_neg1>:
    14bc:	90 95       	com	r25
    14be:	81 95       	neg	r24
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	08 95       	ret

000014c4 <__divmodhi4_neg2>:
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255

000014ca <__divmodhi4_exit>:
    14ca:	08 95       	ret

000014cc <__udivmodhi4>:
    14cc:	aa 1b       	sub	r26, r26
    14ce:	bb 1b       	sub	r27, r27
    14d0:	51 e1       	ldi	r21, 0x11	; 17
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <__udivmodhi4_ep>

000014d4 <__udivmodhi4_loop>:
    14d4:	aa 1f       	adc	r26, r26
    14d6:	bb 1f       	adc	r27, r27
    14d8:	a6 17       	cp	r26, r22
    14da:	b7 07       	cpc	r27, r23
    14dc:	10 f0       	brcs	.+4      	; 0x14e2 <__udivmodhi4_ep>
    14de:	a6 1b       	sub	r26, r22
    14e0:	b7 0b       	sbc	r27, r23

000014e2 <__udivmodhi4_ep>:
    14e2:	88 1f       	adc	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	5a 95       	dec	r21
    14e8:	a9 f7       	brne	.-22     	; 0x14d4 <__udivmodhi4_loop>
    14ea:	80 95       	com	r24
    14ec:	90 95       	com	r25
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	08 95       	ret

000014f4 <__tablejump2__>:
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	05 90       	lpm	r0, Z+
    14fa:	f4 91       	lpm	r31, Z
    14fc:	e0 2d       	mov	r30, r0
    14fe:	09 94       	ijmp

00001500 <_exit>:
    1500:	f8 94       	cli

00001502 <__stop_program>:
    1502:	ff cf       	rjmp	.-2      	; 0x1502 <__stop_program>
