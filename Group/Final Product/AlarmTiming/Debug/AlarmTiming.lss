
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000470  00800100  00002b20  00002bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800570  00800570  00003024  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003024  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005f08  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ec  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002315  00000000  00000000  0000a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  0000c900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c44  00000000  00000000  0000d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003999  00000000  00000000  0000dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  000116c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	38 02       	muls	r19, r24
      6a:	e4 0b       	sbc	r30, r20

0000006c <__ctors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	15 e0       	ldi	r17, 0x05	; 5
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e0 e2       	ldi	r30, 0x20	; 32
      80:	fb e2       	ldi	r31, 0x2B	; 43
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a0 37       	cpi	r26, 0x70	; 112
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	25 e0       	ldi	r18, 0x05	; 5
      90:	a0 e7       	ldi	r26, 0x70	; 112
      92:	b5 e0       	ldi	r27, 0x05	; 5
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	ac 38       	cpi	r26, 0x8C	; 140
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c6 e3       	ldi	r28, 0x36	; 54
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
      b8:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_Z14ds1307_dec2bcdh>:




uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
      c0:	9d ec       	ldi	r25, 0xCD	; 205
      c2:	89 9f       	mul	r24, r25
      c4:	91 2d       	mov	r25, r1
      c6:	11 24       	eor	r1, r1
      c8:	96 95       	lsr	r25
      ca:	96 95       	lsr	r25
      cc:	96 95       	lsr	r25
      ce:	29 2f       	mov	r18, r25
      d0:	22 0f       	add	r18, r18
      d2:	92 0f       	add	r25, r18
      d4:	29 2f       	mov	r18, r25
      d6:	22 0f       	add	r18, r18
}
      d8:	82 0f       	add	r24, r18
      da:	08 95       	ret

000000dc <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
      dc:	28 2f       	mov	r18, r24
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	35 95       	asr	r19
      e2:	27 95       	ror	r18
      e4:	35 95       	asr	r19
      e6:	27 95       	ror	r18
      e8:	35 95       	asr	r19
      ea:	27 95       	ror	r18
      ec:	35 95       	asr	r19
      ee:	27 95       	ror	r18
      f0:	92 2f       	mov	r25, r18
      f2:	99 0f       	add	r25, r25
      f4:	29 0f       	add	r18, r25
      f6:	92 2f       	mov	r25, r18
      f8:	99 0f       	add	r25, r25
}
      fa:	89 1b       	sub	r24, r25
      fc:	08 95       	ret

000000fe <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
      fe:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z8i2c_initv>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	8a 95       	dec	r24
     106:	f1 f7       	brne	.-4      	; 0x104 <_Z11ds1307_initv+0x6>
     108:	08 95       	ret

0000010a <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
     10a:	cf 92       	push	r12
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	c8 2f       	mov	r28, r24
     11a:	d6 2f       	mov	r29, r22
     11c:	14 2f       	mov	r17, r20
     11e:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
     120:	80 ed       	ldi	r24, 0xD0	; 208
     122:	0e 94 4a 01 	call	0x294	; 0x294 <_Z14i2c_start_waith>
	i2c_write(0x00);
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
     12c:	8c 2d       	mov	r24, r12
     12e:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     132:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
     136:	8e 2d       	mov	r24, r14
     138:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     13c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
     140:	80 2f       	mov	r24, r16
     142:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     146:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
     14a:	8f 2d       	mov	r24, r15
     14c:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     150:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
     154:	81 2f       	mov	r24, r17
     156:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     15a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
     15e:	8d 2f       	mov	r24, r29
     160:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     164:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
     168:	8c 2f       	mov	r24, r28
     16a:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z14ds1307_dec2bcdh>
     16e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_write(0x00);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_stop();
     178:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>
}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	cf 90       	pop	r12
     18a:	08 95       	ret

0000018c <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
     18c:	6f 92       	push	r6
     18e:	7f 92       	push	r7
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
     1aa:	3b 01       	movw	r6, r22
     1ac:	5a 01       	movw	r10, r20
     1ae:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
     1b0:	80 ed       	ldi	r24, 0xD0	; 208
     1b2:	0e 94 4a 01 	call	0x294	; 0x294 <_Z14i2c_start_waith>
	i2c_write(0x00);
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z9i2c_writeh>
	i2c_stop();
     1bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
     1c0:	81 ed       	ldi	r24, 0xD1	; 209
     1c2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
     1c6:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1ca:	8f 77       	andi	r24, 0x7F	; 127
     1cc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1d0:	f6 01       	movw	r30, r12
     1d2:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
     1d4:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1d8:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1dc:	f7 01       	movw	r30, r14
     1de:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
     1e0:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1e4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1e8:	f8 01       	movw	r30, r16
     1ea:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
     1ec:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1f0:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     1f4:	f4 01       	movw	r30, r8
     1f6:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
     1f8:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     1fc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     200:	f5 01       	movw	r30, r10
     202:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
     204:	0e 94 8e 01 	call	0x31c	; 0x31c <_Z11i2c_readAckv>
     208:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     20c:	f3 01       	movw	r30, r6
     20e:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
     210:	0e 94 98 01 	call	0x330	; 0x330 <_Z11i2c_readNakv>
     214:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z14ds1307_bcd2dech>
     218:	88 83       	st	Y, r24
	i2c_stop();
     21a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z8i2c_stopv>
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	8f 90       	pop	r8
     236:	7f 90       	pop	r7
     238:	6f 90       	pop	r6
     23a:	08 95       	ret

0000023c <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     23c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     240:	8d ef       	ldi	r24, 0xFD	; 253
     242:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     246:	08 95       	ret

00000248 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     248:	94 ea       	ldi	r25, 0xA4	; 164
     24a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     24e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     252:	99 23       	and	r25, r25
     254:	e4 f7       	brge	.-8      	; 0x24e <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     256:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     25a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     25c:	98 30       	cpi	r25, 0x08	; 8
     25e:	11 f0       	breq	.+4      	; 0x264 <_Z9i2c_starth+0x1c>
     260:	90 31       	cpi	r25, 0x10	; 16
     262:	91 f4       	brne	.+36     	; 0x288 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
     264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     268:	84 e8       	ldi	r24, 0x84	; 132
     26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     26e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     272:	88 23       	and	r24, r24
     274:	e4 f7       	brge	.-8      	; 0x26e <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     27a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     27c:	88 31       	cpi	r24, 0x18	; 24
     27e:	31 f0       	breq	.+12     	; 0x28c <_Z9i2c_starth+0x44>
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	31 f4       	brne	.+12     	; 0x290 <_Z9i2c_starth+0x48>

	return 0;
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     290:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
     292:	08 95       	ret

00000294 <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     294:	94 ea       	ldi	r25, 0xA4	; 164
     296:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     29a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29e:	99 23       	and	r25, r25
     2a0:	e4 f7       	brge	.-8      	; 0x29a <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2a2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2a6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     2a8:	98 30       	cpi	r25, 0x08	; 8
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <_Z14i2c_start_waith+0x1c>
     2ac:	90 31       	cpi	r25, 0x10	; 16
     2ae:	91 f7       	brne	.-28     	; 0x294 <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
     2b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
     2b4:	94 e8       	ldi	r25, 0x84	; 132
     2b6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     2ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2be:	99 23       	and	r25, r25
     2c0:	e4 f7       	brge	.-8      	; 0x2ba <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     2c2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2c6:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     2c8:	90 32       	cpi	r25, 0x20	; 32
     2ca:	11 f0       	breq	.+4      	; 0x2d0 <_Z14i2c_start_waith+0x3c>
     2cc:	98 35       	cpi	r25, 0x58	; 88
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2d0:	94 e9       	ldi	r25, 0x94	; 148
     2d2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     2d6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2da:	94 fd       	sbrc	r25, 4
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <_Z14i2c_start_waith+0x42>
     2de:	da cf       	rjmp	.-76     	; 0x294 <_Z14i2c_start_waith>
     2e0:	08 95       	ret

000002e2 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     2e2:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_starth>

}/* i2c_rep_start */
     2e6:	08 95       	ret

000002e8 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2e8:	84 e9       	ldi	r24, 0x94	; 148
     2ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     2ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2f2:	84 fd       	sbrc	r24, 4
     2f4:	fc cf       	rjmp	.-8      	; 0x2ee <_Z8i2c_stopv+0x6>

}/* i2c_stop */
     2f6:	08 95       	ret

000002f8 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     2fc:	84 e8       	ldi	r24, 0x84	; 132
     2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     302:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     306:	88 23       	and	r24, r24
     308:	e4 f7       	brge	.-8      	; 0x302 <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     30a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     30e:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     310:	88 32       	cpi	r24, 0x28	; 40
     312:	11 f0       	breq	.+4      	; 0x318 <_Z9i2c_writeh+0x20>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	08 95       	ret
	return 0;
     318:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
     31a:	08 95       	ret

0000031c <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     31c:	84 ec       	ldi	r24, 0xC4	; 196
     31e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
     322:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     326:	88 23       	and	r24, r24
     328:	e4 f7       	brge	.-8      	; 0x322 <_Z11i2c_readAckv+0x6>

    return TWDR;
     32a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
     32e:	08 95       	ret

00000330 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     330:	84 e8       	ldi	r24, 0x84	; 132
     332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     336:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     33a:	88 23       	and	r24, r24
     33c:	e4 f7       	brge	.-8      	; 0x336 <_Z11i2c_readNakv+0x6>
	
    return TWDR;
     33e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
     342:	08 95       	ret

00000344 <_ZN7Key_Pad8keyInputEv>:
char keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	while (1){
		if (sc2.pressedBack()){
     344:	80 e7       	ldi	r24, 0x70	; 112
     346:	95 e0       	ldi	r25, 0x05	; 5
     348:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN6Screen11pressedBackEv>
     34c:	88 23       	and	r24, r24
     34e:	51 f0       	breq	.+20     	; 0x364 <_ZN7Key_Pad8keyInputEv+0x20>
			sc2.stopBlink();
     350:	80 e7       	ldi	r24, 0x70	; 112
     352:	95 e0       	ldi	r25, 0x05	; 5
     354:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
			sc2.LCD_clear();
     358:	80 e7       	ldi	r24, 0x70	; 112
     35a:	95 e0       	ldi	r25, 0x05	; 5
     35c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
			return 'Y';
     360:	89 e5       	ldi	r24, 0x59	; 89
     362:	08 95       	ret
		}
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
     364:	88 b1       	in	r24, 0x08	; 8
     366:	8f 60       	ori	r24, 0x0F	; 15
     368:	88 b9       	out	0x08, r24	; 8
		for (int r=0; r<=3; r++){
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	44 30       	cpi	r20, 0x04	; 4
     370:	51 05       	cpc	r21, r1
     372:	0c f0       	brlt	.+2      	; 0x376 <_ZN7Key_Pad8keyInputEv+0x32>
     374:	4f c0       	rjmp	.+158    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
     376:	87 b1       	in	r24, 0x07	; 7
     378:	80 7f       	andi	r24, 0xF0	; 240
     37a:	87 b9       	out	0x07, r24	; 7
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
     37c:	84 b1       	in	r24, 0x04	; 4
     37e:	88 7f       	andi	r24, 0xF8	; 248
     380:	84 b9       	out	0x04, r24	; 4
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
     382:	27 b1       	in	r18, 0x07	; 7
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	04 2e       	mov	r0, r20
     38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN7Key_Pad8keyInputEv+0x4c>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN7Key_Pad8keyInputEv+0x48>
     394:	92 2f       	mov	r25, r18
     396:	98 2b       	or	r25, r24
     398:	97 b9       	out	0x07, r25	; 7
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
     39a:	98 b1       	in	r25, 0x08	; 8
     39c:	80 95       	com	r24
     39e:	89 23       	and	r24, r25
     3a0:	88 b9       	out	0x08, r24	; 8
			for (int c=0; c<=2; c++){
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	23 30       	cpi	r18, 0x03	; 3
     3a8:	31 05       	cpc	r19, r1
     3aa:	8c f5       	brge	.+98     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
				KEYCOL_PORT |= (0b00000001 << c);
     3ac:	65 b1       	in	r22, 0x05	; 5
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 2e       	mov	r0, r18
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <_ZN7Key_Pad8keyInputEv+0x76>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <_ZN7Key_Pad8keyInputEv+0x72>
     3be:	86 2b       	or	r24, r22
     3c0:	85 b9       	out	0x05, r24	; 5
				if (!(KEYCOL_PIN & (0b00000001 << c))){ // check each column in the respective row for a pressed key
     3c2:	83 b1       	in	r24, 0x03	; 3
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 2e       	mov	r0, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_ZN7Key_Pad8keyInputEv+0x8a>
     3ca:	95 95       	asr	r25
     3cc:	87 95       	ror	r24
     3ce:	0a 94       	dec	r0
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <_ZN7Key_Pad8keyInputEv+0x86>
     3d2:	80 fd       	sbrc	r24, 0
     3d4:	19 c0       	rjmp	.+50     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
					char pressed = keys[r][c]; // obtain the pressed key
     3d6:	ca 01       	movw	r24, r20
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	48 0f       	add	r20, r24
     3de:	59 1f       	adc	r21, r25
     3e0:	40 50       	subi	r20, 0x00	; 0
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	fa 01       	movw	r30, r20
     3e6:	e2 0f       	add	r30, r18
     3e8:	f3 1f       	adc	r31, r19
     3ea:	80 81       	ld	r24, Z
					if ((pressed!='*') & (pressed!='#')){
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	8a 32       	cpi	r24, 0x2A	; 42
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <_ZN7Key_Pad8keyInputEv+0xb0>
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	99 23       	and	r25, r25
     3f6:	31 f0       	breq	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	83 32       	cpi	r24, 0x23	; 35
     3fc:	09 f4       	brne	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	91 11       	cpse	r25, r1
     402:	09 c0       	rjmp	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
						return pressed;
					}
					return 'X';
     404:	88 e5       	ldi	r24, 0x58	; 88
     406:	08 95       	ret
		for (int r=0; r<=3; r++){
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
			for (int c=0; c<=2; c++){
     408:	2f 5f       	subi	r18, 0xFF	; 255
     40a:	3f 4f       	sbci	r19, 0xFF	; 255
     40c:	cc cf       	rjmp	.-104    	; 0x3a6 <_ZN7Key_Pad8keyInputEv+0x62>
			sc2.stopBlink();
			sc2.LCD_clear();
			return 'Y';
		}
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
		for (int r=0; r<=3; r++){
     40e:	4f 5f       	subi	r20, 0xFF	; 255
     410:	5f 4f       	sbci	r21, 0xFF	; 255
     412:	ad cf       	rjmp	.-166    	; 0x36e <_ZN7Key_Pad8keyInputEv+0x2a>
					}
					return 'X';
				}
			}
		}
	return 'X';}
     414:	88 e5       	ldi	r24, 0x58	; 88
}
     416:	08 95       	ret

00000418 <_ZN7Key_Pad10pressedKeyEv>:

char Key_Pad :: pressedKey(){
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
	while (1){
	char key = keyInput();
     41e:	ce 01       	movw	r24, r28
     420:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN7Key_Pad8keyInputEv>
	if (key != 'X'){
     424:	88 35       	cpi	r24, 0x58	; 88
     426:	d9 f3       	breq	.-10     	; 0x41e <_ZN7Key_Pad10pressedKeyEv+0x6>
     428:	20 e2       	ldi	r18, 0x20	; 32
     42a:	3e e4       	ldi	r19, 0x4E	; 78
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     42c:	21 15       	cp	r18, r1
     42e:	31 05       	cpc	r19, r1
     430:	39 f0       	breq	.+14     	; 0x440 <_ZN7Key_Pad10pressedKeyEv+0x28>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     432:	e9 e1       	ldi	r30, 0x19	; 25
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <_ZN7Key_Pad10pressedKeyEv+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	31 09       	sbc	r19, r1
     43e:	f6 cf       	rjmp	.-20     	; 0x42c <_ZN7Key_Pad10pressedKeyEv+0x14>
		_delay_ms(2000);
		return key; // if a number is pressed return the pressed key
	 }
	}
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <_Z41__static_initialization_and_destruction_0ii>:
		mainLoop();
			
	}
		
	
}
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	49 f4       	brne	.+18     	; 0x45c <_Z41__static_initialization_and_destruction_0ii+0x16>
     44a:	6f 3f       	cpi	r22, 0xFF	; 255
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	31 f4       	brne	.+12     	; 0x45c <_Z41__static_initialization_and_destruction_0ii+0x16>
#include "Tone.h"


Screen scrn;
Key_Pad key;
Tone t(3);
     450:	63 e0       	ldi	r22, 0x03	; 3
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	81 e7       	ldi	r24, 0x71	; 113
     456:	95 e0       	ldi	r25, 0x05	; 5
     458:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN4ToneC1Ei>
     45c:	08 95       	ret

0000045e <main>:


int main(void)
{
	ds1307_init();
     45e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z11ds1307_initv>
	scrn.LCD_Init();
     462:	83 e7       	ldi	r24, 0x73	; 115
     464:	95 e0       	ldi	r25, 0x05	; 5
     466:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN6Screen8LCD_InitEv>
	while (1)
	{
		mainLoop();
     46a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z8mainLoopv>
     46e:	fd cf       	rjmp	.-6      	; 0x46a <main+0xc>

00000470 <_GLOBAL__sub_I_scrn>:
			
	}
		
	
}
     470:	6f ef       	ldi	r22, 0xFF	; 255
     472:	7f ef       	ldi	r23, 0xFF	; 255
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 23 02 	call	0x446	; 0x446 <_Z41__static_initialization_and_destruction_0ii>
     47c:	08 95       	ret

0000047e <_ZN6Screen11LCD_CommandEh>:
int _a=0 , _b=0 , _c=0 , _d=0;   //assume that the Time is in ab:cd format

//this command is use to send a command to the LCD as an unsigned char
void Screen::LCD_Command(unsigned char cmnd)      
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
     47e:	8b b1       	in	r24, 0x0b	; 11
     480:	8f 70       	andi	r24, 0x0F	; 15
     482:	96 2f       	mov	r25, r22
     484:	90 7f       	andi	r25, 0xF0	; 240
     486:	89 2b       	or	r24, r25
     488:	8b b9       	out	0x0b, r24	; 11
	LCD_Port &= ~ (1<<RS);
     48a:	8b b1       	in	r24, 0x0b	; 11
     48c:	8e 7f       	andi	r24, 0xFE	; 254
     48e:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
     490:	8b b1       	in	r24, 0x0b	; 11
     492:	82 60       	ori	r24, 0x02	; 2
     494:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	98 2f       	mov	r25, r24
     49a:	9a 95       	dec	r25
     49c:	f1 f7       	brne	.-4      	; 0x49a <_ZN6Screen11LCD_CommandEh+0x1c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     49e:	9b b1       	in	r25, 0x0b	; 11
     4a0:	9d 7f       	andi	r25, 0xFD	; 253
     4a2:	9b b9       	out	0x0b, r25	; 11
     4a4:	92 e4       	ldi	r25, 0x42	; 66
     4a6:	9a 95       	dec	r25
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <_ZN6Screen11LCD_CommandEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
     4aa:	9b b1       	in	r25, 0x0b	; 11
     4ac:	20 e1       	ldi	r18, 0x10	; 16
     4ae:	62 9f       	mul	r22, r18
     4b0:	b0 01       	movw	r22, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	9f 70       	andi	r25, 0x0F	; 15
     4b6:	69 2b       	or	r22, r25
     4b8:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
     4ba:	9b b1       	in	r25, 0x0b	; 11
     4bc:	92 60       	ori	r25, 0x02	; 2
     4be:	9b b9       	out	0x0b, r25	; 11
     4c0:	8a 95       	dec	r24
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <_ZN6Screen11LCD_CommandEh+0x42>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4c4:	8b b1       	in	r24, 0x0b	; 11
     4c6:	8d 7f       	andi	r24, 0xFD	; 253
     4c8:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     4ca:	84 ef       	ldi	r24, 0xF4	; 244
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <_ZN6Screen11LCD_CommandEh+0x50>
     4d2:	08 95       	ret

000004d4 <_ZN6Screen8LCD_CharEh>:
	_delay_ms(2);
}

void Screen::LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
     4d4:	8b b1       	in	r24, 0x0b	; 11
     4d6:	8f 70       	andi	r24, 0x0F	; 15
     4d8:	96 2f       	mov	r25, r22
     4da:	90 7f       	andi	r25, 0xF0	; 240
     4dc:	89 2b       	or	r24, r25
     4de:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<RS);		//RS = 1
     4e0:	8b b1       	in	r24, 0x0b	; 11
     4e2:	81 60       	ori	r24, 0x01	; 1
     4e4:	8b b9       	out	0x0b, r24	; 11
	LCD_Port|= (1<<EN);
     4e6:	8b b1       	in	r24, 0x0b	; 11
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	98 2f       	mov	r25, r24
     4f0:	9a 95       	dec	r25
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <_ZN6Screen8LCD_CharEh+0x1c>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     4f4:	9b b1       	in	r25, 0x0b	; 11
     4f6:	9d 7f       	andi	r25, 0xFD	; 253
     4f8:	9b b9       	out	0x0b, r25	; 11
     4fa:	92 e4       	ldi	r25, 0x42	; 66
     4fc:	9a 95       	dec	r25
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <_ZN6Screen8LCD_CharEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
     500:	9b b1       	in	r25, 0x0b	; 11
     502:	20 e1       	ldi	r18, 0x10	; 16
     504:	62 9f       	mul	r22, r18
     506:	b0 01       	movw	r22, r0
     508:	11 24       	eor	r1, r1
     50a:	9f 70       	andi	r25, 0x0F	; 15
     50c:	69 2b       	or	r22, r25
     50e:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
     510:	9b b1       	in	r25, 0x0b	; 11
     512:	92 60       	ori	r25, 0x02	; 2
     514:	9b b9       	out	0x0b, r25	; 11
     516:	8a 95       	dec	r24
     518:	f1 f7       	brne	.-4      	; 0x516 <_ZN6Screen8LCD_CharEh+0x42>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     51a:	8b b1       	in	r24, 0x0b	; 11
     51c:	8d 7f       	andi	r24, 0xFD	; 253
     51e:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     520:	84 ef       	ldi	r24, 0xF4	; 244
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <_ZN6Screen8LCD_CharEh+0x50>
     528:	08 95       	ret

0000052a <_ZN6Screen10LCD_StringEPc>:
}


//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	7c 01       	movw	r14, r24
     538:	8b 01       	movw	r16, r22
	int i;
	for(i=0;str[i]!=0;i++)
     53a:	c0 e0       	ldi	r28, 0x00	; 0
     53c:	d0 e0       	ldi	r29, 0x00	; 0
     53e:	f8 01       	movw	r30, r16
     540:	ec 0f       	add	r30, r28
     542:	fd 1f       	adc	r31, r29
     544:	60 81       	ld	r22, Z
     546:	66 23       	and	r22, r22
     548:	29 f0       	breq	.+10     	; 0x554 <_ZN6Screen10LCD_StringEPc+0x2a>
	{
		LCD_Char (str[i]);
     54a:	c7 01       	movw	r24, r14
     54c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>

//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
     550:	21 96       	adiw	r28, 0x01	; 1
     552:	f5 cf       	rjmp	.-22     	; 0x53e <_ZN6Screen10LCD_StringEPc+0x14>
	{
		LCD_Char (str[i]);
	}
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	08 95       	ret

00000562 <_ZN6Screen8LCD_InitEv>:
}


//function to initialize the LCD dispay
void Screen::LCD_Init(void)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;			//LCD data direction is output
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	8a b9       	out	0x0a, r24	; 10
     56c:	88 e8       	ldi	r24, 0x88	; 136
     56e:	93 e1       	ldi	r25, 0x13	; 19
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <_ZN6Screen8LCD_InitEv+0xe>
	_delay_ms(20);
	
	LCD_Command(0x02);
     574:	62 e0       	ldi	r22, 0x02	; 2
     576:	ce 01       	movw	r24, r28
     578:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x28);
     57c:	68 e2       	ldi	r22, 0x28	; 40
     57e:	ce 01       	movw	r24, r28
     580:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
     584:	6c e0       	ldi	r22, 0x0C	; 12
     586:	ce 01       	movw	r24, r28
     588:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x06);              //Command - shift cursor to right
     58c:	66 e0       	ldi	r22, 0x06	; 6
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x01);              //Command - Clear display
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	ce 01       	movw	r24, r28
     598:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	
	LCD_String("Welcome");
     59c:	68 e8       	ldi	r22, 0x88	; 136
     59e:	74 e0       	ldi	r23, 0x04	; 4
     5a0:	ce 01       	movw	r24, r28
     5a2:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a6:	80 e1       	ldi	r24, 0x10	; 16
     5a8:	97 e2       	ldi	r25, 0x27	; 39
		while(__ticks)
     5aa:	00 97       	sbiw	r24, 0x00	; 0
     5ac:	31 f0       	breq	.+12     	; 0x5ba <_ZN6Screen8LCD_InitEv+0x58>
     5ae:	e9 e1       	ldi	r30, 0x19	; 25
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <_ZN6Screen8LCD_InitEv+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f8 cf       	rjmp	.-16     	; 0x5aa <_ZN6Screen8LCD_InitEv+0x48>
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);*/
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <_ZN6Screen9LCD_clearEv>:
}


//function to clear the display
void Screen::LCD_clear()
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	ec 01       	movw	r28, r24
	LCD_Command (0x01);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     5cc:	84 ef       	ldi	r24, 0xF4	; 244
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <_ZN6Screen9LCD_clearEv+0x10>
	_delay_ms(2);
	LCD_Command (0x80);
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <_ZN6Screen15Control_buttonsEv>:


char Screen::Control_buttons(){
	DDRB = 0xCF;
     5e2:	8f ec       	ldi	r24, 0xCF	; 207
     5e4:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011;
     5e6:	8a b1       	in	r24, 0x0a	; 10
     5e8:	83 7f       	andi	r24, 0xF3	; 243
     5ea:	8a b9       	out	0x0a, r24	; 10
	while (1)
	{
		if (PINB & 0b00010000){
     5ec:	1c 9b       	sbis	0x03, 4	; 3
     5ee:	0a c0       	rjmp	.+20     	; 0x604 <_ZN6Screen15Control_buttonsEv+0x22>
     5f0:	88 e9       	ldi	r24, 0x98	; 152
     5f2:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	51 f1       	breq	.+84     	; 0x64c <_ZN6Screen15Control_buttonsEv+0x6a>
     5f8:	e9 e1       	ldi	r30, 0x19	; 25
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <_ZN6Screen15Control_buttonsEv+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f8 cf       	rjmp	.-16     	; 0x5f4 <_ZN6Screen15Control_buttonsEv+0x12>
			_delay_ms(1500);
			return 's' ;
			break;
		}
		else if (PINB & 0b00100000){
     604:	1d 9b       	sbis	0x03, 5	; 3
     606:	0a c0       	rjmp	.+20     	; 0x61c <_ZN6Screen15Control_buttonsEv+0x3a>
     608:	88 e9       	ldi	r24, 0x98	; 152
     60a:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	01 f1       	breq	.+64     	; 0x650 <_ZN6Screen15Control_buttonsEv+0x6e>
     610:	e9 e1       	ldi	r30, 0x19	; 25
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	31 97       	sbiw	r30, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <_ZN6Screen15Control_buttonsEv+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f8 cf       	rjmp	.-16     	; 0x60c <_ZN6Screen15Control_buttonsEv+0x2a>
			_delay_ms(1500);
			return 'b';
			break;
		}
		else if (PIND & 0b000000100){
     61c:	4a 9b       	sbis	0x09, 2	; 9
     61e:	0a c0       	rjmp	.+20     	; 0x634 <_ZN6Screen15Control_buttonsEv+0x52>
     620:	88 e9       	ldi	r24, 0x98	; 152
     622:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     624:	00 97       	sbiw	r24, 0x00	; 0
     626:	b1 f0       	breq	.+44     	; 0x654 <_ZN6Screen15Control_buttonsEv+0x72>
     628:	e9 e1       	ldi	r30, 0x19	; 25
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <_ZN6Screen15Control_buttonsEv+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f8 cf       	rjmp	.-16     	; 0x624 <_ZN6Screen15Control_buttonsEv+0x42>
			_delay_ms(1500);
			return 'u';
			break;
		}
		else if (PIND & 0b000001000){
     634:	4b 9b       	sbis	0x09, 3	; 9
     636:	da cf       	rjmp	.-76     	; 0x5ec <_ZN6Screen15Control_buttonsEv+0xa>
     638:	88 e9       	ldi	r24, 0x98	; 152
     63a:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	61 f0       	breq	.+24     	; 0x658 <_ZN6Screen15Control_buttonsEv+0x76>
     640:	e9 e1       	ldi	r30, 0x19	; 25
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <_ZN6Screen15Control_buttonsEv+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f8 cf       	rjmp	.-16     	; 0x63c <_ZN6Screen15Control_buttonsEv+0x5a>
	DDRD &= 0b11110011;
	while (1)
	{
		if (PINB & 0b00010000){
			_delay_ms(1500);
			return 's' ;
     64c:	83 e7       	ldi	r24, 0x73	; 115
     64e:	08 95       	ret
			break;
		}
		else if (PINB & 0b00100000){
			_delay_ms(1500);
			return 'b';
     650:	82 e6       	ldi	r24, 0x62	; 98
     652:	08 95       	ret
			break;
		}
		else if (PIND & 0b000000100){
			_delay_ms(1500);
			return 'u';
     654:	85 e7       	ldi	r24, 0x75	; 117
     656:	08 95       	ret
			break;
		}
		else if (PIND & 0b000001000){
			_delay_ms(1500);
			return 'd';
     658:	84 e6       	ldi	r24, 0x64	; 100
			break;
		}
		
	}
	
}
     65a:	08 95       	ret

0000065c <_ZN6Screen13pressedButtonEv>:

char Screen::pressedButton(){
	DDRB = 0xCF;
     65c:	8f ec       	ldi	r24, 0xCF	; 207
     65e:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011;
     660:	8a b1       	in	r24, 0x0a	; 10
     662:	83 7f       	andi	r24, 0xF3	; 243
     664:	8a b9       	out	0x0a, r24	; 10
		if (PINB & 0b00010000){
     666:	1c 9b       	sbis	0x03, 4	; 3
     668:	0a c0       	rjmp	.+20     	; 0x67e <_ZN6Screen13pressedButtonEv+0x22>
     66a:	88 e9       	ldi	r24, 0x98	; 152
     66c:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	51 f1       	breq	.+84     	; 0x6c6 <_ZN6Screen13pressedButtonEv+0x6a>
     672:	e9 e1       	ldi	r30, 0x19	; 25
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <_ZN6Screen13pressedButtonEv+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f8 cf       	rjmp	.-16     	; 0x66e <_ZN6Screen13pressedButtonEv+0x12>
			_delay_ms(1500);
			return 's' ;
		}
		else if (PINB & 0b00100000){
     67e:	1d 9b       	sbis	0x03, 5	; 3
     680:	0a c0       	rjmp	.+20     	; 0x696 <_ZN6Screen13pressedButtonEv+0x3a>
     682:	88 e9       	ldi	r24, 0x98	; 152
     684:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	01 f1       	breq	.+64     	; 0x6ca <_ZN6Screen13pressedButtonEv+0x6e>
     68a:	e9 e1       	ldi	r30, 0x19	; 25
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <_ZN6Screen13pressedButtonEv+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f8 cf       	rjmp	.-16     	; 0x686 <_ZN6Screen13pressedButtonEv+0x2a>
			_delay_ms(1500);
			return 'b';
		}
		else if (PIND & 0b000000100){
     696:	4a 9b       	sbis	0x09, 2	; 9
     698:	0a c0       	rjmp	.+20     	; 0x6ae <_ZN6Screen13pressedButtonEv+0x52>
     69a:	88 e9       	ldi	r24, 0x98	; 152
     69c:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	b1 f0       	breq	.+44     	; 0x6ce <_ZN6Screen13pressedButtonEv+0x72>
     6a2:	e9 e1       	ldi	r30, 0x19	; 25
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	31 97       	sbiw	r30, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <_ZN6Screen13pressedButtonEv+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f8 cf       	rjmp	.-16     	; 0x69e <_ZN6Screen13pressedButtonEv+0x42>
			_delay_ms(1500);
			return 'u';
		}
		else if (PIND & 0b000001000){
     6ae:	4b 9b       	sbis	0x09, 3	; 9
     6b0:	10 c0       	rjmp	.+32     	; 0x6d2 <_ZN6Screen13pressedButtonEv+0x76>
     6b2:	88 e9       	ldi	r24, 0x98	; 152
     6b4:	9a e3       	ldi	r25, 0x3A	; 58
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	71 f0       	breq	.+28     	; 0x6d6 <_ZN6Screen13pressedButtonEv+0x7a>
     6ba:	e9 e1       	ldi	r30, 0x19	; 25
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <_ZN6Screen13pressedButtonEv+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f8 cf       	rjmp	.-16     	; 0x6b6 <_ZN6Screen13pressedButtonEv+0x5a>
char Screen::pressedButton(){
	DDRB = 0xCF;
	DDRD &= 0b11110011;
		if (PINB & 0b00010000){
			_delay_ms(1500);
			return 's' ;
     6c6:	83 e7       	ldi	r24, 0x73	; 115
     6c8:	08 95       	ret
		}
		else if (PINB & 0b00100000){
			_delay_ms(1500);
			return 'b';
     6ca:	82 e6       	ldi	r24, 0x62	; 98
     6cc:	08 95       	ret
		}
		else if (PIND & 0b000000100){
			_delay_ms(1500);
			return 'u';
     6ce:	85 e7       	ldi	r24, 0x75	; 117
     6d0:	08 95       	ret
		else if (PIND & 0b000001000){
			_delay_ms(1500);
			return 'd';
		}
		else{
			return '0';
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	08 95       	ret
			_delay_ms(1500);
			return 'u';
		}
		else if (PIND & 0b000001000){
			_delay_ms(1500);
			return 'd';
     6d6:	84 e6       	ldi	r24, 0x64	; 100
		}
		else{
			return '0';
		}
	
}
     6d8:	08 95       	ret

000006da <_ZN6Screen5blinkEv>:



void Screen::blink(){
	LCD_Command(0x0F);
     6da:	6f e0       	ldi	r22, 0x0F	; 15
     6dc:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     6e0:	08 95       	ret

000006e2 <_ZN6Screen9stopBlinkEv>:
}

void Screen::stopBlink(){
	LCD_Command(0x0c);
     6e2:	6c e0       	ldi	r22, 0x0C	; 12
     6e4:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     6e8:	08 95       	ret

000006ea <_ZN6Screen13pressedSelectEv>:
}

bool  Screen::pressedSelect(){
	if (PINB & 0b00010000) {
     6ea:	1c 9b       	sbis	0x03, 4	; 3
     6ec:	0a c0       	rjmp	.+20     	; 0x702 <_ZN6Screen13pressedSelectEv+0x18>
     6ee:	80 e1       	ldi	r24, 0x10	; 16
     6f0:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	41 f0       	breq	.+16     	; 0x706 <_ZN6Screen13pressedSelectEv+0x1c>
     6f6:	e9 e1       	ldi	r30, 0x19	; 25
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <_ZN6Screen13pressedSelectEv+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f8 cf       	rjmp	.-16     	; 0x6f2 <_ZN6Screen13pressedSelectEv+0x8>
		_delay_ms(1000);
		return true;
	}
	else {
		return false;
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	08 95       	ret
}

bool  Screen::pressedSelect(){
	if (PINB & 0b00010000) {
		_delay_ms(1000);
		return true;
     706:	81 e0       	ldi	r24, 0x01	; 1
	}
	else {
		return false;
	}
}
     708:	08 95       	ret

0000070a <_ZN6Screen11pressedBackEv>:

bool  Screen::pressedBack(){
	if (PINB & 0b00100000){
     70a:	1d 9b       	sbis	0x03, 5	; 3
     70c:	0a c0       	rjmp	.+20     	; 0x722 <_ZN6Screen11pressedBackEv+0x18>
     70e:	80 e2       	ldi	r24, 0x20	; 32
     710:	9e e4       	ldi	r25, 0x4E	; 78
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	41 f0       	breq	.+16     	; 0x726 <_ZN6Screen11pressedBackEv+0x1c>
     716:	e9 e1       	ldi	r30, 0x19	; 25
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	31 97       	sbiw	r30, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <_ZN6Screen11pressedBackEv+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	f8 cf       	rjmp	.-16     	; 0x712 <_ZN6Screen11pressedBackEv+0x8>
		_delay_ms(2000);
		return true;
	}
	else{
		return false;
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	08 95       	ret
}

bool  Screen::pressedBack(){
	if (PINB & 0b00100000){
		_delay_ms(2000);
		return true;
     726:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
     728:	08 95       	ret

0000072a <_Z41__static_initialization_and_destruction_0ii>:
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	49 f4       	brne	.+18     	; 0x740 <_Z41__static_initialization_and_destruction_0ii+0x16>
     72e:	6f 3f       	cpi	r22, 0xFF	; 255
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	31 f4       	brne	.+12     	; 0x740 <_Z41__static_initialization_and_destruction_0ii+0x16>
     734:	63 e0       	ldi	r22, 0x03	; 3
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	89 e8       	ldi	r24, 0x89	; 137
     73a:	95 e0       	ldi	r25, 0x05	; 5
     73c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN4ToneC1Ei>
     740:	08 95       	ret

00000742 <_Z8showTimev>:
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	60 e8       	ldi	r22, 0x80	; 128
     752:	88 e8       	ldi	r24, 0x88	; 136
     754:	95 e0       	ldi	r25, 0x05	; 5
     756:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     75a:	0f 2e       	mov	r0, r31
     75c:	f0 e8       	ldi	r31, 0x80	; 128
     75e:	cf 2e       	mov	r12, r31
     760:	f5 e0       	ldi	r31, 0x05	; 5
     762:	df 2e       	mov	r13, r31
     764:	f0 2d       	mov	r31, r0
     766:	0f 2e       	mov	r0, r31
     768:	f1 e8       	ldi	r31, 0x81	; 129
     76a:	ef 2e       	mov	r14, r31
     76c:	f5 e0       	ldi	r31, 0x05	; 5
     76e:	ff 2e       	mov	r15, r31
     770:	f0 2d       	mov	r31, r0
     772:	02 e8       	ldi	r16, 0x82	; 130
     774:	15 e0       	ldi	r17, 0x05	; 5
     776:	23 e8       	ldi	r18, 0x83	; 131
     778:	35 e0       	ldi	r19, 0x05	; 5
     77a:	44 e8       	ldi	r20, 0x84	; 132
     77c:	55 e0       	ldi	r21, 0x05	; 5
     77e:	65 e8       	ldi	r22, 0x85	; 133
     780:	75 e0       	ldi	r23, 0x05	; 5
     782:	86 e8       	ldi	r24, 0x86	; 134
     784:	95 e0       	ldi	r25, 0x05	; 5
     786:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z14ds1307_getdatePhS_S_S_S_S_S_>
     78a:	60 e9       	ldi	r22, 0x90	; 144
     78c:	74 e0       	ldi	r23, 0x04	; 4
     78e:	88 e8       	ldi	r24, 0x88	; 136
     790:	95 e0       	ldi	r25, 0x05	; 5
     792:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     796:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <hour>
     79a:	cd ec       	ldi	r28, 0xCD	; 205
     79c:	6c 9f       	mul	r22, r28
     79e:	61 2d       	mov	r22, r1
     7a0:	11 24       	eor	r1, r1
     7a2:	66 95       	lsr	r22
     7a4:	66 95       	lsr	r22
     7a6:	66 95       	lsr	r22
     7a8:	60 5d       	subi	r22, 0xD0	; 208
     7aa:	88 e8       	ldi	r24, 0x88	; 136
     7ac:	95 e0       	ldi	r25, 0x05	; 5
     7ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     7b2:	60 91 82 05 	lds	r22, 0x0582	; 0x800582 <hour>
     7b6:	6c 9f       	mul	r22, r28
     7b8:	81 2d       	mov	r24, r1
     7ba:	11 24       	eor	r1, r1
     7bc:	86 95       	lsr	r24
     7be:	86 95       	lsr	r24
     7c0:	86 95       	lsr	r24
     7c2:	88 0f       	add	r24, r24
     7c4:	98 2f       	mov	r25, r24
     7c6:	99 0f       	add	r25, r25
     7c8:	99 0f       	add	r25, r25
     7ca:	89 0f       	add	r24, r25
     7cc:	68 1b       	sub	r22, r24
     7ce:	60 5d       	subi	r22, 0xD0	; 208
     7d0:	88 e8       	ldi	r24, 0x88	; 136
     7d2:	95 e0       	ldi	r25, 0x05	; 5
     7d4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     7d8:	67 e9       	ldi	r22, 0x97	; 151
     7da:	74 e0       	ldi	r23, 0x04	; 4
     7dc:	88 e8       	ldi	r24, 0x88	; 136
     7de:	95 e0       	ldi	r25, 0x05	; 5
     7e0:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     7e4:	60 91 81 05 	lds	r22, 0x0581	; 0x800581 <minute>
     7e8:	6c 9f       	mul	r22, r28
     7ea:	61 2d       	mov	r22, r1
     7ec:	11 24       	eor	r1, r1
     7ee:	66 95       	lsr	r22
     7f0:	66 95       	lsr	r22
     7f2:	66 95       	lsr	r22
     7f4:	60 5d       	subi	r22, 0xD0	; 208
     7f6:	88 e8       	ldi	r24, 0x88	; 136
     7f8:	95 e0       	ldi	r25, 0x05	; 5
     7fa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     7fe:	60 91 81 05 	lds	r22, 0x0581	; 0x800581 <minute>
     802:	6c 9f       	mul	r22, r28
     804:	81 2d       	mov	r24, r1
     806:	11 24       	eor	r1, r1
     808:	86 95       	lsr	r24
     80a:	86 95       	lsr	r24
     80c:	86 95       	lsr	r24
     80e:	88 0f       	add	r24, r24
     810:	98 2f       	mov	r25, r24
     812:	99 0f       	add	r25, r25
     814:	99 0f       	add	r25, r25
     816:	89 0f       	add	r24, r25
     818:	68 1b       	sub	r22, r24
     81a:	60 5d       	subi	r22, 0xD0	; 208
     81c:	88 e8       	ldi	r24, 0x88	; 136
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     824:	67 e9       	ldi	r22, 0x97	; 151
     826:	74 e0       	ldi	r23, 0x04	; 4
     828:	88 e8       	ldi	r24, 0x88	; 136
     82a:	95 e0       	ldi	r25, 0x05	; 5
     82c:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     830:	60 91 80 05 	lds	r22, 0x0580	; 0x800580 <second>
     834:	6c 9f       	mul	r22, r28
     836:	61 2d       	mov	r22, r1
     838:	11 24       	eor	r1, r1
     83a:	66 95       	lsr	r22
     83c:	66 95       	lsr	r22
     83e:	66 95       	lsr	r22
     840:	60 5d       	subi	r22, 0xD0	; 208
     842:	88 e8       	ldi	r24, 0x88	; 136
     844:	95 e0       	ldi	r25, 0x05	; 5
     846:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     84a:	60 91 80 05 	lds	r22, 0x0580	; 0x800580 <second>
     84e:	6c 9f       	mul	r22, r28
     850:	81 2d       	mov	r24, r1
     852:	11 24       	eor	r1, r1
     854:	86 95       	lsr	r24
     856:	86 95       	lsr	r24
     858:	86 95       	lsr	r24
     85a:	88 0f       	add	r24, r24
     85c:	98 2f       	mov	r25, r24
     85e:	99 0f       	add	r25, r25
     860:	99 0f       	add	r25, r25
     862:	89 0f       	add	r24, r25
     864:	68 1b       	sub	r22, r24
     866:	60 5d       	subi	r22, 0xD0	; 208
     868:	88 e8       	ldi	r24, 0x88	; 136
     86a:	95 e0       	ldi	r25, 0x05	; 5
     86c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     870:	60 ec       	ldi	r22, 0xC0	; 192
     872:	88 e8       	ldi	r24, 0x88	; 136
     874:	95 e0       	ldi	r25, 0x05	; 5
     876:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     87a:	69 e9       	ldi	r22, 0x99	; 153
     87c:	74 e0       	ldi	r23, 0x04	; 4
     87e:	88 e8       	ldi	r24, 0x88	; 136
     880:	95 e0       	ldi	r25, 0x05	; 5
     882:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     886:	60 ea       	ldi	r22, 0xA0	; 160
     888:	74 e0       	ldi	r23, 0x04	; 4
     88a:	88 e8       	ldi	r24, 0x88	; 136
     88c:	95 e0       	ldi	r25, 0x05	; 5
     88e:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     892:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <year>
     896:	6c 9f       	mul	r22, r28
     898:	61 2d       	mov	r22, r1
     89a:	11 24       	eor	r1, r1
     89c:	66 95       	lsr	r22
     89e:	66 95       	lsr	r22
     8a0:	66 95       	lsr	r22
     8a2:	60 5d       	subi	r22, 0xD0	; 208
     8a4:	88 e8       	ldi	r24, 0x88	; 136
     8a6:	95 e0       	ldi	r25, 0x05	; 5
     8a8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     8ac:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <year>
     8b0:	6c 9f       	mul	r22, r28
     8b2:	81 2d       	mov	r24, r1
     8b4:	11 24       	eor	r1, r1
     8b6:	86 95       	lsr	r24
     8b8:	86 95       	lsr	r24
     8ba:	86 95       	lsr	r24
     8bc:	88 0f       	add	r24, r24
     8be:	98 2f       	mov	r25, r24
     8c0:	99 0f       	add	r25, r25
     8c2:	99 0f       	add	r25, r25
     8c4:	89 0f       	add	r24, r25
     8c6:	68 1b       	sub	r22, r24
     8c8:	60 5d       	subi	r22, 0xD0	; 208
     8ca:	88 e8       	ldi	r24, 0x88	; 136
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     8d2:	63 ea       	ldi	r22, 0xA3	; 163
     8d4:	74 e0       	ldi	r23, 0x04	; 4
     8d6:	88 e8       	ldi	r24, 0x88	; 136
     8d8:	95 e0       	ldi	r25, 0x05	; 5
     8da:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     8de:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <month>
     8e2:	6c 9f       	mul	r22, r28
     8e4:	61 2d       	mov	r22, r1
     8e6:	11 24       	eor	r1, r1
     8e8:	66 95       	lsr	r22
     8ea:	66 95       	lsr	r22
     8ec:	66 95       	lsr	r22
     8ee:	60 5d       	subi	r22, 0xD0	; 208
     8f0:	88 e8       	ldi	r24, 0x88	; 136
     8f2:	95 e0       	ldi	r25, 0x05	; 5
     8f4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     8f8:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <month>
     8fc:	6c 9f       	mul	r22, r28
     8fe:	81 2d       	mov	r24, r1
     900:	11 24       	eor	r1, r1
     902:	86 95       	lsr	r24
     904:	86 95       	lsr	r24
     906:	86 95       	lsr	r24
     908:	88 0f       	add	r24, r24
     90a:	98 2f       	mov	r25, r24
     90c:	99 0f       	add	r25, r25
     90e:	99 0f       	add	r25, r25
     910:	89 0f       	add	r24, r25
     912:	68 1b       	sub	r22, r24
     914:	60 5d       	subi	r22, 0xD0	; 208
     916:	88 e8       	ldi	r24, 0x88	; 136
     918:	95 e0       	ldi	r25, 0x05	; 5
     91a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     91e:	63 ea       	ldi	r22, 0xA3	; 163
     920:	74 e0       	ldi	r23, 0x04	; 4
     922:	88 e8       	ldi	r24, 0x88	; 136
     924:	95 e0       	ldi	r25, 0x05	; 5
     926:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     92a:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <day>
     92e:	6c 9f       	mul	r22, r28
     930:	61 2d       	mov	r22, r1
     932:	11 24       	eor	r1, r1
     934:	66 95       	lsr	r22
     936:	66 95       	lsr	r22
     938:	66 95       	lsr	r22
     93a:	60 5d       	subi	r22, 0xD0	; 208
     93c:	88 e8       	ldi	r24, 0x88	; 136
     93e:	95 e0       	ldi	r25, 0x05	; 5
     940:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     944:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <day>
     948:	6c 9f       	mul	r22, r28
     94a:	c1 2d       	mov	r28, r1
     94c:	11 24       	eor	r1, r1
     94e:	c6 95       	lsr	r28
     950:	c6 95       	lsr	r28
     952:	c6 95       	lsr	r28
     954:	cc 0f       	add	r28, r28
     956:	8c 2f       	mov	r24, r28
     958:	88 0f       	add	r24, r24
     95a:	88 0f       	add	r24, r24
     95c:	c8 0f       	add	r28, r24
     95e:	6c 1b       	sub	r22, r28
     960:	60 5d       	subi	r22, 0xD0	; 208
     962:	88 e8       	ldi	r24, 0x88	; 136
     964:	95 e0       	ldi	r25, 0x05	; 5
     966:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	08 95       	ret

0000097a <_Z6getDayiii>:
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	ec 01       	movw	r28, r24
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	e0 e0       	ldi	r30, 0x00	; 0
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	c2 17       	cp	r28, r18
     98a:	d3 07       	cpc	r29, r19
     98c:	6c f0       	brlt	.+26     	; 0x9a8 <_Z6getDayiii+0x2e>
     98e:	c9 01       	movw	r24, r18
     990:	83 70       	andi	r24, 0x03	; 3
     992:	99 27       	eor	r25, r25
     994:	89 2b       	or	r24, r25
     996:	19 f4       	brne	.+6      	; 0x99e <_Z6getDayiii+0x24>
     998:	e2 59       	subi	r30, 0x92	; 146
     99a:	fe 4f       	sbci	r31, 0xFE	; 254
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <_Z6getDayiii+0x28>
     99e:	e3 59       	subi	r30, 0x93	; 147
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	2f 5f       	subi	r18, 0xFF	; 255
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	f0 cf       	rjmp	.-32     	; 0x988 <_Z6getDayiii+0xe>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	db 01       	movw	r26, r22
     9ae:	11 97       	sbiw	r26, 0x01	; 1
     9b0:	2a 17       	cp	r18, r26
     9b2:	3b 07       	cpc	r19, r27
     9b4:	3c f5       	brge	.+78     	; 0xa04 <_Z6getDayiii+0x8a>
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	de 01       	movw	r26, r28
     9ba:	a3 70       	andi	r26, 0x03	; 3
     9bc:	bb 27       	eor	r27, r27
     9be:	ab 2b       	or	r26, r27
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <_Z6getDayiii+0x4a>
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	99 23       	and	r25, r25
     9c6:	91 f0       	breq	.+36     	; 0x9ec <_Z6getDayiii+0x72>
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	21 30       	cpi	r18, 0x01	; 1
     9cc:	31 05       	cpc	r19, r1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <_Z6getDayiii+0x58>
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	99 23       	and	r25, r25
     9d4:	59 f0       	breq	.+22     	; 0x9ec <_Z6getDayiii+0x72>
     9d6:	d9 01       	movw	r26, r18
     9d8:	aa 0f       	add	r26, r26
     9da:	bb 1f       	adc	r27, r27
     9dc:	a4 55       	subi	r26, 0x54	; 84
     9de:	be 4f       	sbci	r27, 0xFE	; 254
     9e0:	8d 91       	ld	r24, X+
     9e2:	9c 91       	ld	r25, X
     9e4:	e8 0f       	add	r30, r24
     9e6:	f9 1f       	adc	r31, r25
     9e8:	31 96       	adiw	r30, 0x01	; 1
     9ea:	09 c0       	rjmp	.+18     	; 0x9fe <_Z6getDayiii+0x84>
     9ec:	d9 01       	movw	r26, r18
     9ee:	aa 0f       	add	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	a4 55       	subi	r26, 0x54	; 84
     9f4:	be 4f       	sbci	r27, 0xFE	; 254
     9f6:	8d 91       	ld	r24, X+
     9f8:	9c 91       	ld	r25, X
     9fa:	e8 0f       	add	r30, r24
     9fc:	f9 1f       	adc	r31, r25
     9fe:	2f 5f       	subi	r18, 0xFF	; 255
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	d4 cf       	rjmp	.-88     	; 0x9ac <_Z6getDayiii+0x32>
     a04:	4e 0f       	add	r20, r30
     a06:	5f 1f       	adc	r21, r31
     a08:	ca 01       	movw	r24, r20
     a0a:	05 96       	adiw	r24, 0x05	; 5
     a0c:	67 e0       	ldi	r22, 0x07	; 7
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <_Z9set_alarmv>:
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <ith_alarm>
     a32:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <ith_alarm+0x1>
     a36:	05 97       	sbiw	r24, 0x05	; 5
     a38:	01 f5       	brne	.+64     	; 0xa7a <_Z9set_alarmv+0x60>
     a3a:	88 e8       	ldi	r24, 0x88	; 136
     a3c:	95 e0       	ldi	r25, 0x05	; 5
     a3e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     a42:	65 ea       	ldi	r22, 0xA5	; 165
     a44:	74 e0       	ldi	r23, 0x04	; 4
     a46:	88 e8       	ldi	r24, 0x88	; 136
     a48:	95 e0       	ldi	r25, 0x05	; 5
     a4a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     a4e:	60 ec       	ldi	r22, 0xC0	; 192
     a50:	88 e8       	ldi	r24, 0x88	; 136
     a52:	95 e0       	ldi	r25, 0x05	; 5
     a54:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     a58:	63 eb       	ldi	r22, 0xB3	; 179
     a5a:	74 e0       	ldi	r23, 0x04	; 4
     a5c:	88 e8       	ldi	r24, 0x88	; 136
     a5e:	95 e0       	ldi	r25, 0x05	; 5
     a60:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     a64:	80 e2       	ldi	r24, 0x20	; 32
     a66:	9e e4       	ldi	r25, 0x4E	; 78
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	09 f4       	brne	.+2      	; 0xa6e <_Z9set_alarmv+0x54>
     a6c:	44 c1       	rjmp	.+648    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     a6e:	e9 e1       	ldi	r30, 0x19	; 25
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <_Z9set_alarmv+0x58>
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f7 cf       	rjmp	.-18     	; 0xa68 <_Z9set_alarmv+0x4e>
     a7a:	88 e8       	ldi	r24, 0x88	; 136
     a7c:	95 e0       	ldi	r25, 0x05	; 5
     a7e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     a82:	6c eb       	ldi	r22, 0xBC	; 188
     a84:	74 e0       	ldi	r23, 0x04	; 4
     a86:	88 e8       	ldi	r24, 0x88	; 136
     a88:	95 e0       	ldi	r25, 0x05	; 5
     a8a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     a8e:	60 e8       	ldi	r22, 0x80	; 128
     a90:	88 e8       	ldi	r24, 0x88	; 136
     a92:	95 e0       	ldi	r25, 0x05	; 5
     a94:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     a98:	88 e8       	ldi	r24, 0x88	; 136
     a9a:	95 e0       	ldi	r25, 0x05	; 5
     a9c:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN6Screen5blinkEv>
     aa0:	87 e8       	ldi	r24, 0x87	; 135
     aa2:	95 e0       	ldi	r25, 0x05	; 5
     aa4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     aa8:	c8 2f       	mov	r28, r24
     aaa:	89 35       	cpi	r24, 0x59	; 89
     aac:	09 f4       	brne	.+2      	; 0xab0 <_Z9set_alarmv+0x96>
     aae:	23 c1       	rjmp	.+582    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     ab0:	68 2f       	mov	r22, r24
     ab2:	88 e8       	ldi	r24, 0x88	; 136
     ab4:	95 e0       	ldi	r25, 0x05	; 5
     ab6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     aba:	87 e8       	ldi	r24, 0x87	; 135
     abc:	95 e0       	ldi	r25, 0x05	; 5
     abe:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     ac2:	08 2f       	mov	r16, r24
     ac4:	89 35       	cpi	r24, 0x59	; 89
     ac6:	09 f4       	brne	.+2      	; 0xaca <_Z9set_alarmv+0xb0>
     ac8:	16 c1       	rjmp	.+556    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     aca:	68 2f       	mov	r22, r24
     acc:	88 e8       	ldi	r24, 0x88	; 136
     ace:	95 e0       	ldi	r25, 0x05	; 5
     ad0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     ad4:	64 ec       	ldi	r22, 0xC4	; 196
     ad6:	74 e0       	ldi	r23, 0x04	; 4
     ad8:	88 e8       	ldi	r24, 0x88	; 136
     ada:	95 e0       	ldi	r25, 0x05	; 5
     adc:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     ae0:	87 e8       	ldi	r24, 0x87	; 135
     ae2:	95 e0       	ldi	r25, 0x05	; 5
     ae4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     ae8:	f8 2e       	mov	r15, r24
     aea:	89 e5       	ldi	r24, 0x59	; 89
     aec:	f8 16       	cp	r15, r24
     aee:	09 f4       	brne	.+2      	; 0xaf2 <_Z9set_alarmv+0xd8>
     af0:	02 c1       	rjmp	.+516    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     af2:	6f 2d       	mov	r22, r15
     af4:	88 e8       	ldi	r24, 0x88	; 136
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     afc:	87 e8       	ldi	r24, 0x87	; 135
     afe:	95 e0       	ldi	r25, 0x05	; 5
     b00:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
     b04:	d8 2e       	mov	r13, r24
     b06:	89 e5       	ldi	r24, 0x59	; 89
     b08:	d8 16       	cp	r13, r24
     b0a:	09 f4       	brne	.+2      	; 0xb0e <_Z9set_alarmv+0xf4>
     b0c:	f4 c0       	rjmp	.+488    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     b0e:	6d 2d       	mov	r22, r13
     b10:	88 e8       	ldi	r24, 0x88	; 136
     b12:	95 e0       	ldi	r25, 0x05	; 5
     b14:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     b18:	88 e8       	ldi	r24, 0x88	; 136
     b1a:	95 e0       	ldi	r25, 0x05	; 5
     b1c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
     b20:	80 e2       	ldi	r24, 0x20	; 32
     b22:	9e e4       	ldi	r25, 0x4E	; 78
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	31 f0       	breq	.+12     	; 0xb34 <_Z9set_alarmv+0x11a>
     b28:	e9 e1       	ldi	r30, 0x19	; 25
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <_Z9set_alarmv+0x112>
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f8 cf       	rjmp	.-16     	; 0xb24 <_Z9set_alarmv+0x10a>
     b34:	d0 e0       	ldi	r29, 0x00	; 0
     b36:	e0 97       	sbiw	r28, 0x30	; 48
     b38:	9e 01       	movw	r18, r28
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	ce 01       	movw	r24, r28
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	82 0f       	add	r24, r18
     b4e:	93 1f       	adc	r25, r19
     b50:	10 e0       	ldi	r17, 0x00	; 0
     b52:	00 53       	subi	r16, 0x30	; 48
     b54:	11 09       	sbc	r17, r1
     b56:	80 0f       	add	r24, r16
     b58:	91 1f       	adc	r25, r17
     b5a:	48 97       	sbiw	r24, 0x18	; 24
     b5c:	c4 f4       	brge	.+48     	; 0xb8e <_Z9set_alarmv+0x174>
     b5e:	8f 2d       	mov	r24, r15
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	c0 97       	sbiw	r24, 0x30	; 48
     b64:	7c 01       	movw	r14, r24
     b66:	ee 0c       	add	r14, r14
     b68:	ff 1c       	adc	r15, r15
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	e8 0e       	add	r14, r24
     b78:	f9 1e       	adc	r15, r25
     b7a:	cd 2c       	mov	r12, r13
     b7c:	d1 2c       	mov	r13, r1
     b7e:	80 e3       	ldi	r24, 0x30	; 48
     b80:	c8 1a       	sub	r12, r24
     b82:	d1 08       	sbc	r13, r1
     b84:	c7 01       	movw	r24, r14
     b86:	8c 0d       	add	r24, r12
     b88:	9d 1d       	adc	r25, r13
     b8a:	cc 97       	sbiw	r24, 0x3c	; 60
     b8c:	bc f0       	brlt	.+46     	; 0xbbc <_Z9set_alarmv+0x1a2>
     b8e:	88 e8       	ldi	r24, 0x88	; 136
     b90:	95 e0       	ldi	r25, 0x05	; 5
     b92:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     b96:	68 ec       	ldi	r22, 0xC8	; 200
     b98:	74 e0       	ldi	r23, 0x04	; 4
     b9a:	88 e8       	ldi	r24, 0x88	; 136
     b9c:	95 e0       	ldi	r25, 0x05	; 5
     b9e:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     ba2:	80 e1       	ldi	r24, 0x10	; 16
     ba4:	97 e2       	ldi	r25, 0x27	; 39
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	31 f0       	breq	.+12     	; 0xbb6 <_Z9set_alarmv+0x19c>
     baa:	e9 e1       	ldi	r30, 0x19	; 25
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	31 97       	sbiw	r30, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <_Z9set_alarmv+0x194>
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f8 cf       	rjmp	.-16     	; 0xba6 <_Z9set_alarmv+0x18c>
     bb6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z9set_alarmv>
     bba:	9d c0       	rjmp	.+314    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     bbc:	88 e8       	ldi	r24, 0x88	; 136
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     bc4:	69 ed       	ldi	r22, 0xD9	; 217
     bc6:	74 e0       	ldi	r23, 0x04	; 4
     bc8:	88 e8       	ldi	r24, 0x88	; 136
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     bd0:	80 e1       	ldi	r24, 0x10	; 16
     bd2:	97 e2       	ldi	r25, 0x27	; 39
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	31 f0       	breq	.+12     	; 0xbe4 <_Z9set_alarmv+0x1ca>
     bd8:	e9 e1       	ldi	r30, 0x19	; 25
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <_Z9set_alarmv+0x1c2>
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f8 cf       	rjmp	.-16     	; 0xbd4 <_Z9set_alarmv+0x1ba>
     be4:	88 e8       	ldi	r24, 0x88	; 136
     be6:	95 e0       	ldi	r25, 0x05	; 5
     be8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     bec:	6c e0       	ldi	r22, 0x0C	; 12
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	88 e8       	ldi	r24, 0x88	; 136
     bf2:	95 e0       	ldi	r25, 0x05	; 5
     bf4:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     bf8:	a1 2c       	mov	r10, r1
     bfa:	b1 2c       	mov	r11, r1
     bfc:	b5 01       	movw	r22, r10
     bfe:	89 e8       	ldi	r24, 0x89	; 137
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	0e 94 ff 12 	call	0x25fe	; 0x25fe <_ZN4Tone10playMelodyEi>
     c06:	84 36       	cpi	r24, 0x64	; 100
     c08:	49 f4       	brne	.+18     	; 0xc1c <_Z9set_alarmv+0x202>
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	a8 16       	cp	r10, r24
     c0e:	b1 04       	cpc	r11, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <_Z9set_alarmv+0x1fa>
     c12:	58 c0       	rjmp	.+176    	; 0xcc4 <_Z9set_alarmv+0x2aa>
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	a8 1a       	sub	r10, r24
     c18:	b8 0a       	sbc	r11, r24
     c1a:	5b c0       	rjmp	.+182    	; 0xcd2 <_Z9set_alarmv+0x2b8>
     c1c:	85 37       	cpi	r24, 0x75	; 117
     c1e:	41 f4       	brne	.+16     	; 0xc30 <_Z9set_alarmv+0x216>
     c20:	a1 14       	cp	r10, r1
     c22:	b1 04       	cpc	r11, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <_Z9set_alarmv+0x20e>
     c26:	51 c0       	rjmp	.+162    	; 0xcca <_Z9set_alarmv+0x2b0>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	a8 1a       	sub	r10, r24
     c2c:	b1 08       	sbc	r11, r1
     c2e:	51 c0       	rjmp	.+162    	; 0xcd2 <_Z9set_alarmv+0x2b8>
     c30:	82 36       	cpi	r24, 0x62	; 98
     c32:	09 f4       	brne	.+2      	; 0xc36 <_Z9set_alarmv+0x21c>
     c34:	60 c0       	rjmp	.+192    	; 0xcf6 <_Z9set_alarmv+0x2dc>
     c36:	83 37       	cpi	r24, 0x73	; 115
     c38:	09 f0       	breq	.+2      	; 0xc3c <_Z9set_alarmv+0x222>
     c3a:	4b c0       	rjmp	.+150    	; 0xcd2 <_Z9set_alarmv+0x2b8>
     c3c:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <ith_alarm>
     c40:	30 91 75 05 	lds	r19, 0x0575	; 0x800575 <ith_alarm+0x1>
     c44:	88 ee       	ldi	r24, 0xE8	; 232
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	c8 9f       	mul	r28, r24
     c4a:	a0 01       	movw	r20, r0
     c4c:	c9 9f       	mul	r28, r25
     c4e:	50 0d       	add	r21, r0
     c50:	d8 9f       	mul	r29, r24
     c52:	50 0d       	add	r21, r0
     c54:	11 24       	eor	r1, r1
     c56:	64 e6       	ldi	r22, 0x64	; 100
     c58:	60 9f       	mul	r22, r16
     c5a:	c0 01       	movw	r24, r0
     c5c:	61 9f       	mul	r22, r17
     c5e:	90 0d       	add	r25, r0
     c60:	11 24       	eor	r1, r1
     c62:	84 0f       	add	r24, r20
     c64:	95 1f       	adc	r25, r21
     c66:	e8 0e       	add	r14, r24
     c68:	f9 1e       	adc	r15, r25
     c6a:	ce 0c       	add	r12, r14
     c6c:	df 1c       	adc	r13, r15
     c6e:	c9 01       	movw	r24, r18
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	fc 01       	movw	r30, r24
     c76:	e2 53       	subi	r30, 0x32	; 50
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	d1 82       	std	Z+1, r13	; 0x01
     c7c:	c0 82       	st	Z, r12
     c7e:	fc 01       	movw	r30, r24
     c80:	ec 53       	subi	r30, 0x3C	; 60
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	b1 82       	std	Z+1, r11	; 0x01
     c86:	a0 82       	st	Z, r10
     c88:	88 e8       	ldi	r24, 0x88	; 136
     c8a:	95 e0       	ldi	r25, 0x05	; 5
     c8c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     c90:	67 ee       	ldi	r22, 0xE7	; 231
     c92:	74 e0       	ldi	r23, 0x04	; 4
     c94:	88 e8       	ldi	r24, 0x88	; 136
     c96:	95 e0       	ldi	r25, 0x05	; 5
     c98:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     c9c:	80 e1       	ldi	r24, 0x10	; 16
     c9e:	97 e2       	ldi	r25, 0x27	; 39
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	31 f0       	breq	.+12     	; 0xcb0 <_Z9set_alarmv+0x296>
     ca4:	e9 e1       	ldi	r30, 0x19	; 25
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <_Z9set_alarmv+0x28e>
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f8 cf       	rjmp	.-16     	; 0xca0 <_Z9set_alarmv+0x286>
     cb0:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <ith_alarm>
     cb4:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <ith_alarm+0x1>
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ith_alarm+0x1>
     cbe:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ith_alarm>
     cc2:	19 c0       	rjmp	.+50     	; 0xcf6 <_Z9set_alarmv+0x2dc>
     cc4:	a1 2c       	mov	r10, r1
     cc6:	b1 2c       	mov	r11, r1
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <_Z9set_alarmv+0x2b8>
     cca:	68 94       	set
     ccc:	aa 24       	eor	r10, r10
     cce:	a2 f8       	bld	r10, 2
     cd0:	b1 2c       	mov	r11, r1
     cd2:	88 e8       	ldi	r24, 0x88	; 136
     cd4:	95 e0       	ldi	r25, 0x05	; 5
     cd6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     cda:	b5 01       	movw	r22, r10
     cdc:	62 95       	swap	r22
     cde:	72 95       	swap	r23
     ce0:	70 7f       	andi	r23, 0xF0	; 240
     ce2:	76 27       	eor	r23, r22
     ce4:	60 7f       	andi	r22, 0xF0	; 240
     ce6:	76 27       	eor	r23, r22
     ce8:	64 5f       	subi	r22, 0xF4	; 244
     cea:	7e 4f       	sbci	r23, 0xFE	; 254
     cec:	88 e8       	ldi	r24, 0x88	; 136
     cee:	95 e0       	ldi	r25, 0x05	; 5
     cf0:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     cf4:	83 cf       	rjmp	.-250    	; 0xbfc <_Z9set_alarmv+0x1e2>
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	08 95       	ret

00000d0c <_Z11deleteAlarmv>:
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <alarmArray>
     d20:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <alarmArray+0x1>
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	b1 f4       	brne	.+44     	; 0xd54 <_Z11deleteAlarmv+0x48>
     d28:	88 e8       	ldi	r24, 0x88	; 136
     d2a:	95 e0       	ldi	r25, 0x05	; 5
     d2c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     d30:	66 ef       	ldi	r22, 0xF6	; 246
     d32:	74 e0       	ldi	r23, 0x04	; 4
     d34:	88 e8       	ldi	r24, 0x88	; 136
     d36:	95 e0       	ldi	r25, 0x05	; 5
     d38:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     d3c:	61 e3       	ldi	r22, 0x31	; 49
     d3e:	88 e8       	ldi	r24, 0x88	; 136
     d40:	95 e0       	ldi	r25, 0x05	; 5
     d42:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     d46:	68 ef       	ldi	r22, 0xF8	; 248
     d48:	74 e0       	ldi	r23, 0x04	; 4
     d4a:	88 e8       	ldi	r24, 0x88	; 136
     d4c:	95 e0       	ldi	r25, 0x05	; 5
     d4e:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     d52:	4c c0       	rjmp	.+152    	; 0xdec <_Z11deleteAlarmv+0xe0>
     d54:	88 e8       	ldi	r24, 0x88	; 136
     d56:	95 e0       	ldi	r25, 0x05	; 5
     d58:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     d5c:	66 ef       	ldi	r22, 0xF6	; 246
     d5e:	74 e0       	ldi	r23, 0x04	; 4
     d60:	88 e8       	ldi	r24, 0x88	; 136
     d62:	95 e0       	ldi	r25, 0x05	; 5
     d64:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     d68:	61 e3       	ldi	r22, 0x31	; 49
     d6a:	88 e8       	ldi	r24, 0x88	; 136
     d6c:	95 e0       	ldi	r25, 0x05	; 5
     d6e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	74 e0       	ldi	r23, 0x04	; 4
     d76:	88 e8       	ldi	r24, 0x88	; 136
     d78:	95 e0       	ldi	r25, 0x05	; 5
     d7a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     d7e:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <alarmArray>
     d82:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <alarmArray+0x1>
     d86:	c9 01       	movw	r24, r18
     d88:	64 e6       	ldi	r22, 0x64	; 100
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     d90:	7b 01       	movw	r14, r22
     d92:	8c 01       	movw	r16, r24
     d94:	c9 01       	movw	r24, r18
     d96:	68 ee       	ldi	r22, 0xE8	; 232
     d98:	73 e0       	ldi	r23, 0x03	; 3
     d9a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     d9e:	60 5d       	subi	r22, 0xD0	; 208
     da0:	88 e8       	ldi	r24, 0x88	; 136
     da2:	95 e0       	ldi	r25, 0x05	; 5
     da4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     da8:	ca e0       	ldi	r28, 0x0A	; 10
     daa:	d0 e0       	ldi	r29, 0x00	; 0
     dac:	c7 01       	movw	r24, r14
     dae:	be 01       	movw	r22, r28
     db0:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     db4:	60 e3       	ldi	r22, 0x30	; 48
     db6:	68 0f       	add	r22, r24
     db8:	88 e8       	ldi	r24, 0x88	; 136
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     dc0:	67 e9       	ldi	r22, 0x97	; 151
     dc2:	74 e0       	ldi	r23, 0x04	; 4
     dc4:	88 e8       	ldi	r24, 0x88	; 136
     dc6:	95 e0       	ldi	r25, 0x05	; 5
     dc8:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     dcc:	c8 01       	movw	r24, r16
     dce:	be 01       	movw	r22, r28
     dd0:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     dd4:	c8 2f       	mov	r28, r24
     dd6:	60 5d       	subi	r22, 0xD0	; 208
     dd8:	88 e8       	ldi	r24, 0x88	; 136
     dda:	95 e0       	ldi	r25, 0x05	; 5
     ddc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     de0:	60 e3       	ldi	r22, 0x30	; 48
     de2:	6c 0f       	add	r22, r28
     de4:	88 e8       	ldi	r24, 0x88	; 136
     de6:	95 e0       	ldi	r25, 0x05	; 5
     de8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     dec:	c0 e0       	ldi	r28, 0x00	; 0
     dee:	d0 e0       	ldi	r29, 0x00	; 0
     df0:	88 e8       	ldi	r24, 0x88	; 136
     df2:	95 e0       	ldi	r25, 0x05	; 5
     df4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN6Screen15Control_buttonsEv>
     df8:	84 36       	cpi	r24, 0x64	; 100
     dfa:	31 f4       	brne	.+12     	; 0xe08 <_Z11deleteAlarmv+0xfc>
     dfc:	c4 30       	cpi	r28, 0x04	; 4
     dfe:	d1 05       	cpc	r29, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <_Z11deleteAlarmv+0xf8>
     e02:	68 c0       	rjmp	.+208    	; 0xed4 <_Z11deleteAlarmv+0x1c8>
     e04:	21 96       	adiw	r28, 0x01	; 1
     e06:	6b c0       	rjmp	.+214    	; 0xede <_Z11deleteAlarmv+0x1d2>
     e08:	85 37       	cpi	r24, 0x75	; 117
     e0a:	29 f4       	brne	.+10     	; 0xe16 <_Z11deleteAlarmv+0x10a>
     e0c:	20 97       	sbiw	r28, 0x00	; 0
     e0e:	09 f4       	brne	.+2      	; 0xe12 <_Z11deleteAlarmv+0x106>
     e10:	64 c0       	rjmp	.+200    	; 0xeda <_Z11deleteAlarmv+0x1ce>
     e12:	21 97       	sbiw	r28, 0x01	; 1
     e14:	64 c0       	rjmp	.+200    	; 0xede <_Z11deleteAlarmv+0x1d2>
     e16:	83 37       	cpi	r24, 0x73	; 115
     e18:	09 f0       	breq	.+2      	; 0xe1c <_Z11deleteAlarmv+0x110>
     e1a:	59 c0       	rjmp	.+178    	; 0xece <_Z11deleteAlarmv+0x1c2>
     e1c:	88 e8       	ldi	r24, 0x88	; 136
     e1e:	95 e0       	ldi	r25, 0x05	; 5
     e20:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	75 e0       	ldi	r23, 0x05	; 5
     e28:	88 e8       	ldi	r24, 0x88	; 136
     e2a:	95 e0       	ldi	r25, 0x05	; 5
     e2c:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     e30:	60 ec       	ldi	r22, 0xC0	; 192
     e32:	88 e8       	ldi	r24, 0x88	; 136
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     e3a:	60 e1       	ldi	r22, 0x10	; 16
     e3c:	75 e0       	ldi	r23, 0x05	; 5
     e3e:	88 e8       	ldi	r24, 0x88	; 136
     e40:	95 e0       	ldi	r25, 0x05	; 5
     e42:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     e46:	88 e8       	ldi	r24, 0x88	; 136
     e48:	95 e0       	ldi	r25, 0x05	; 5
     e4a:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN6Screen13pressedSelectEv>
     e4e:	88 23       	and	r24, r24
     e50:	b1 f1       	breq	.+108    	; 0xebe <_Z11deleteAlarmv+0x1b2>
     e52:	ce 01       	movw	r24, r28
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	91 05       	cpc	r25, r1
     e58:	f4 f4       	brge	.+60     	; 0xe96 <_Z11deleteAlarmv+0x18a>
     e5a:	ac 01       	movw	r20, r24
     e5c:	4f 5f       	subi	r20, 0xFF	; 255
     e5e:	5f 4f       	sbci	r21, 0xFF	; 255
     e60:	9a 01       	movw	r18, r20
     e62:	22 0f       	add	r18, r18
     e64:	33 1f       	adc	r19, r19
     e66:	f9 01       	movw	r30, r18
     e68:	e2 53       	subi	r30, 0x32	; 50
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	fc 01       	movw	r30, r24
     e76:	e2 53       	subi	r30, 0x32	; 50
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	71 83       	std	Z+1, r23	; 0x01
     e7c:	60 83       	st	Z, r22
     e7e:	f9 01       	movw	r30, r18
     e80:	ec 53       	subi	r30, 0x3C	; 60
     e82:	fe 4f       	sbci	r31, 0xFE	; 254
     e84:	20 81       	ld	r18, Z
     e86:	31 81       	ldd	r19, Z+1	; 0x01
     e88:	fc 01       	movw	r30, r24
     e8a:	ec 53       	subi	r30, 0x3C	; 60
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	31 83       	std	Z+1, r19	; 0x01
     e90:	20 83       	st	Z, r18
     e92:	ca 01       	movw	r24, r20
     e94:	df cf       	rjmp	.-66     	; 0xe54 <_Z11deleteAlarmv+0x148>
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <alarmArray+0x9>
     e9e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <alarmArray+0x8>
     ea2:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <alarmToneArray+0x9>
     ea6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <alarmToneArray+0x8>
     eaa:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <ith_alarm>
     eae:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <ith_alarm+0x1>
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ith_alarm+0x1>
     eb8:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ith_alarm>
     ebc:	10 c0       	rjmp	.+32     	; 0xede <_Z11deleteAlarmv+0x1d2>
     ebe:	88 e8       	ldi	r24, 0x88	; 136
     ec0:	95 e0       	ldi	r25, 0x05	; 5
     ec2:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN6Screen11pressedBackEv>
     ec6:	88 23       	and	r24, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <_Z11deleteAlarmv+0x1c0>
     eca:	bd cf       	rjmp	.-134    	; 0xe46 <_Z11deleteAlarmv+0x13a>
     ecc:	08 c0       	rjmp	.+16     	; 0xede <_Z11deleteAlarmv+0x1d2>
     ece:	82 36       	cpi	r24, 0x62	; 98
     ed0:	31 f4       	brne	.+12     	; 0xede <_Z11deleteAlarmv+0x1d2>
     ed2:	76 c0       	rjmp	.+236    	; 0xfc0 <_Z11deleteAlarmv+0x2b4>
     ed4:	c0 e0       	ldi	r28, 0x00	; 0
     ed6:	d0 e0       	ldi	r29, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <_Z11deleteAlarmv+0x1d2>
     eda:	c4 e0       	ldi	r28, 0x04	; 4
     edc:	d0 e0       	ldi	r29, 0x00	; 0
     ede:	fe 01       	movw	r30, r28
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	e2 53       	subi	r30, 0x32	; 50
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	b9 f4       	brne	.+46     	; 0xf1e <_Z11deleteAlarmv+0x212>
     ef0:	88 e8       	ldi	r24, 0x88	; 136
     ef2:	95 e0       	ldi	r25, 0x05	; 5
     ef4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     ef8:	66 ef       	ldi	r22, 0xF6	; 246
     efa:	74 e0       	ldi	r23, 0x04	; 4
     efc:	88 e8       	ldi	r24, 0x88	; 136
     efe:	95 e0       	ldi	r25, 0x05	; 5
     f00:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     f04:	6c 2f       	mov	r22, r28
     f06:	6f 5c       	subi	r22, 0xCF	; 207
     f08:	88 e8       	ldi	r24, 0x88	; 136
     f0a:	95 e0       	ldi	r25, 0x05	; 5
     f0c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     f10:	68 ef       	ldi	r22, 0xF8	; 248
     f12:	74 e0       	ldi	r23, 0x04	; 4
     f14:	88 e8       	ldi	r24, 0x88	; 136
     f16:	95 e0       	ldi	r25, 0x05	; 5
     f18:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     f1c:	69 cf       	rjmp	.-302    	; 0xdf0 <_Z11deleteAlarmv+0xe4>
     f1e:	88 e8       	ldi	r24, 0x88	; 136
     f20:	95 e0       	ldi	r25, 0x05	; 5
     f22:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     f26:	66 ef       	ldi	r22, 0xF6	; 246
     f28:	74 e0       	ldi	r23, 0x04	; 4
     f2a:	88 e8       	ldi	r24, 0x88	; 136
     f2c:	95 e0       	ldi	r25, 0x05	; 5
     f2e:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     f32:	6c 2f       	mov	r22, r28
     f34:	6f 5c       	subi	r22, 0xCF	; 207
     f36:	88 e8       	ldi	r24, 0x88	; 136
     f38:	95 e0       	ldi	r25, 0x05	; 5
     f3a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     f3e:	6f ef       	ldi	r22, 0xFF	; 255
     f40:	74 e0       	ldi	r23, 0x04	; 4
     f42:	88 e8       	ldi	r24, 0x88	; 136
     f44:	95 e0       	ldi	r25, 0x05	; 5
     f46:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     f4a:	fe 01       	movw	r30, r28
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e2 53       	subi	r30, 0x32	; 50
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	20 81       	ld	r18, Z
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	c9 01       	movw	r24, r18
     f5a:	64 e6       	ldi	r22, 0x64	; 100
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     f62:	6b 01       	movw	r12, r22
     f64:	7c 01       	movw	r14, r24
     f66:	c9 01       	movw	r24, r18
     f68:	68 ee       	ldi	r22, 0xE8	; 232
     f6a:	73 e0       	ldi	r23, 0x03	; 3
     f6c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     f70:	60 5d       	subi	r22, 0xD0	; 208
     f72:	88 e8       	ldi	r24, 0x88	; 136
     f74:	95 e0       	ldi	r25, 0x05	; 5
     f76:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     f7a:	0a e0       	ldi	r16, 0x0A	; 10
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	c6 01       	movw	r24, r12
     f80:	b8 01       	movw	r22, r16
     f82:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     f86:	60 e3       	ldi	r22, 0x30	; 48
     f88:	68 0f       	add	r22, r24
     f8a:	88 e8       	ldi	r24, 0x88	; 136
     f8c:	95 e0       	ldi	r25, 0x05	; 5
     f8e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     f92:	67 e9       	ldi	r22, 0x97	; 151
     f94:	74 e0       	ldi	r23, 0x04	; 4
     f96:	88 e8       	ldi	r24, 0x88	; 136
     f98:	95 e0       	ldi	r25, 0x05	; 5
     f9a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     f9e:	c7 01       	movw	r24, r14
     fa0:	b8 01       	movw	r22, r16
     fa2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
     fa6:	18 2f       	mov	r17, r24
     fa8:	60 5d       	subi	r22, 0xD0	; 208
     faa:	88 e8       	ldi	r24, 0x88	; 136
     fac:	95 e0       	ldi	r25, 0x05	; 5
     fae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     fb2:	60 e3       	ldi	r22, 0x30	; 48
     fb4:	61 0f       	add	r22, r17
     fb6:	88 e8       	ldi	r24, 0x88	; 136
     fb8:	95 e0       	ldi	r25, 0x05	; 5
     fba:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
     fbe:	18 cf       	rjmp	.-464    	; 0xdf0 <_Z11deleteAlarmv+0xe4>
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <_Z12factoryResetv>:
     fd2:	cf 92       	push	r12
     fd4:	ef 92       	push	r14
     fd6:	0f 93       	push	r16
     fd8:	88 e8       	ldi	r24, 0x88	; 136
     fda:	95 e0       	ldi	r25, 0x05	; 5
     fdc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	75 e0       	ldi	r23, 0x05	; 5
     fe4:	88 e8       	ldi	r24, 0x88	; 136
     fe6:	95 e0       	ldi	r25, 0x05	; 5
     fe8:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
     fec:	60 ec       	ldi	r22, 0xC0	; 192
     fee:	88 e8       	ldi	r24, 0x88	; 136
     ff0:	95 e0       	ldi	r25, 0x05	; 5
     ff2:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
     ff6:	60 e1       	ldi	r22, 0x10	; 16
     ff8:	75 e0       	ldi	r23, 0x05	; 5
     ffa:	88 e8       	ldi	r24, 0x88	; 136
     ffc:	95 e0       	ldi	r25, 0x05	; 5
     ffe:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    1002:	88 e8       	ldi	r24, 0x88	; 136
    1004:	95 e0       	ldi	r25, 0x05	; 5
    1006:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN6Screen13pressedSelectEv>
    100a:	88 23       	and	r24, r24
    100c:	09 f4       	brne	.+2      	; 0x1010 <_Z12factoryResetv+0x3e>
    100e:	aa c0       	rjmp	.+340    	; 0x1164 <_Z12factoryResetv+0x192>
    1010:	c1 2c       	mov	r12, r1
    1012:	e1 2c       	mov	r14, r1
    1014:	00 e0       	ldi	r16, 0x00	; 0
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14ds1307_setdatehhhhhhh>
    1022:	61 e2       	ldi	r22, 0x21	; 33
    1024:	75 e0       	ldi	r23, 0x05	; 5
    1026:	88 e8       	ldi	r24, 0x88	; 136
    1028:	95 e0       	ldi	r25, 0x05	; 5
    102a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    102e:	80 e1       	ldi	r24, 0x10	; 16
    1030:	97 e2       	ldi	r25, 0x27	; 39
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	31 f0       	breq	.+12     	; 0x1042 <_Z12factoryResetv+0x70>
    1036:	e9 e1       	ldi	r30, 0x19	; 25
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	31 97       	sbiw	r30, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <_Z12factoryResetv+0x68>
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f8 cf       	rjmp	.-16     	; 0x1032 <_Z12factoryResetv+0x60>
    1042:	6d e2       	ldi	r22, 0x2D	; 45
    1044:	75 e0       	ldi	r23, 0x05	; 5
    1046:	88 e8       	ldi	r24, 0x88	; 136
    1048:	95 e0       	ldi	r25, 0x05	; 5
    104a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    104e:	80 e1       	ldi	r24, 0x10	; 16
    1050:	97 e2       	ldi	r25, 0x27	; 39
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	31 f0       	breq	.+12     	; 0x1062 <_Z12factoryResetv+0x90>
    1056:	e9 e1       	ldi	r30, 0x19	; 25
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <_Z12factoryResetv+0x88>
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f8 cf       	rjmp	.-16     	; 0x1052 <_Z12factoryResetv+0x80>
    1062:	6d e2       	ldi	r22, 0x2D	; 45
    1064:	75 e0       	ldi	r23, 0x05	; 5
    1066:	88 e8       	ldi	r24, 0x88	; 136
    1068:	95 e0       	ldi	r25, 0x05	; 5
    106a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    106e:	80 e1       	ldi	r24, 0x10	; 16
    1070:	97 e2       	ldi	r25, 0x27	; 39
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	31 f0       	breq	.+12     	; 0x1082 <_Z12factoryResetv+0xb0>
    1076:	e9 e1       	ldi	r30, 0x19	; 25
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	31 97       	sbiw	r30, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <_Z12factoryResetv+0xa8>
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f8 cf       	rjmp	.-16     	; 0x1072 <_Z12factoryResetv+0xa0>
    1082:	6d e2       	ldi	r22, 0x2D	; 45
    1084:	75 e0       	ldi	r23, 0x05	; 5
    1086:	88 e8       	ldi	r24, 0x88	; 136
    1088:	95 e0       	ldi	r25, 0x05	; 5
    108a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    108e:	80 e1       	ldi	r24, 0x10	; 16
    1090:	97 e2       	ldi	r25, 0x27	; 39
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	31 f0       	breq	.+12     	; 0x10a2 <_Z12factoryResetv+0xd0>
    1096:	e9 e1       	ldi	r30, 0x19	; 25
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	31 97       	sbiw	r30, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <_Z12factoryResetv+0xc8>
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f8 cf       	rjmp	.-16     	; 0x1092 <_Z12factoryResetv+0xc0>
    10a2:	88 e8       	ldi	r24, 0x88	; 136
    10a4:	95 e0       	ldi	r25, 0x05	; 5
    10a6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
    10aa:	84 ec       	ldi	r24, 0xC4	; 196
    10ac:	99 e0       	ldi	r25, 0x09	; 9
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <_Z12factoryResetv+0xdc>
    10b2:	61 e2       	ldi	r22, 0x21	; 33
    10b4:	75 e0       	ldi	r23, 0x05	; 5
    10b6:	88 e8       	ldi	r24, 0x88	; 136
    10b8:	95 e0       	ldi	r25, 0x05	; 5
    10ba:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    10be:	80 e1       	ldi	r24, 0x10	; 16
    10c0:	97 e2       	ldi	r25, 0x27	; 39
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <_Z12factoryResetv+0x100>
    10c6:	e9 e1       	ldi	r30, 0x19	; 25
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <_Z12factoryResetv+0xf8>
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f8 cf       	rjmp	.-16     	; 0x10c2 <_Z12factoryResetv+0xf0>
    10d2:	6d e2       	ldi	r22, 0x2D	; 45
    10d4:	75 e0       	ldi	r23, 0x05	; 5
    10d6:	88 e8       	ldi	r24, 0x88	; 136
    10d8:	95 e0       	ldi	r25, 0x05	; 5
    10da:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    10de:	80 e1       	ldi	r24, 0x10	; 16
    10e0:	97 e2       	ldi	r25, 0x27	; 39
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <_Z12factoryResetv+0x120>
    10e6:	e9 e1       	ldi	r30, 0x19	; 25
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <_Z12factoryResetv+0x118>
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f8 cf       	rjmp	.-16     	; 0x10e2 <_Z12factoryResetv+0x110>
    10f2:	6d e2       	ldi	r22, 0x2D	; 45
    10f4:	75 e0       	ldi	r23, 0x05	; 5
    10f6:	88 e8       	ldi	r24, 0x88	; 136
    10f8:	95 e0       	ldi	r25, 0x05	; 5
    10fa:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    10fe:	80 e1       	ldi	r24, 0x10	; 16
    1100:	97 e2       	ldi	r25, 0x27	; 39
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	31 f0       	breq	.+12     	; 0x1112 <_Z12factoryResetv+0x140>
    1106:	e9 e1       	ldi	r30, 0x19	; 25
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <_Z12factoryResetv+0x138>
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f8 cf       	rjmp	.-16     	; 0x1102 <_Z12factoryResetv+0x130>
    1112:	6d e2       	ldi	r22, 0x2D	; 45
    1114:	75 e0       	ldi	r23, 0x05	; 5
    1116:	88 e8       	ldi	r24, 0x88	; 136
    1118:	95 e0       	ldi	r25, 0x05	; 5
    111a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    111e:	80 e1       	ldi	r24, 0x10	; 16
    1120:	97 e2       	ldi	r25, 0x27	; 39
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	31 f0       	breq	.+12     	; 0x1132 <_Z12factoryResetv+0x160>
    1126:	e9 e1       	ldi	r30, 0x19	; 25
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <_Z12factoryResetv+0x158>
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f8 cf       	rjmp	.-16     	; 0x1122 <_Z12factoryResetv+0x150>
    1132:	88 e8       	ldi	r24, 0x88	; 136
    1134:	95 e0       	ldi	r25, 0x05	; 5
    1136:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
    113a:	6f e2       	ldi	r22, 0x2F	; 47
    113c:	75 e0       	ldi	r23, 0x05	; 5
    113e:	88 e8       	ldi	r24, 0x88	; 136
    1140:	95 e0       	ldi	r25, 0x05	; 5
    1142:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
    1146:	80 e1       	ldi	r24, 0x10	; 16
    1148:	97 e2       	ldi	r25, 0x27	; 39
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	31 f0       	breq	.+12     	; 0x115a <_Z12factoryResetv+0x188>
    114e:	e9 e1       	ldi	r30, 0x19	; 25
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	31 97       	sbiw	r30, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <_Z12factoryResetv+0x180>
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f8 cf       	rjmp	.-16     	; 0x114a <_Z12factoryResetv+0x178>
    115a:	88 e8       	ldi	r24, 0x88	; 136
    115c:	95 e0       	ldi	r25, 0x05	; 5
    115e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <_Z12factoryResetv+0x1a0>
    1164:	88 e8       	ldi	r24, 0x88	; 136
    1166:	95 e0       	ldi	r25, 0x05	; 5
    1168:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN6Screen11pressedBackEv>
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <_Z12factoryResetv+0x1a0>
    1170:	48 cf       	rjmp	.-368    	; 0x1002 <_Z12factoryResetv+0x30>
    1172:	0f 91       	pop	r16
    1174:	ef 90       	pop	r14
    1176:	cf 90       	pop	r12
    1178:	08 95       	ret

0000117a <_Z15moveCursorRighti>:
	_delay_ms(1000);
}



void moveCursorRight(int i){
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	8c 01       	movw	r16, r24
	for (int l=0; l<i;l++){
    1184:	c0 e0       	ldi	r28, 0x00	; 0
    1186:	d0 e0       	ldi	r29, 0x00	; 0
    1188:	c0 17       	cp	r28, r16
    118a:	d1 07       	cpc	r29, r17
    118c:	3c f4       	brge	.+14     	; 0x119c <_Z15moveCursorRighti+0x22>
		sc.LCD_Command(0x14);
    118e:	64 e1       	ldi	r22, 0x14	; 20
    1190:	88 e8       	ldi	r24, 0x88	; 136
    1192:	95 e0       	ldi	r25, 0x05	; 5
    1194:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
}



void moveCursorRight(int i){
	for (int l=0; l<i;l++){
    1198:	21 96       	adiw	r28, 0x01	; 1
    119a:	f6 cf       	rjmp	.-20     	; 0x1188 <_Z15moveCursorRighti+0xe>
		sc.LCD_Command(0x14);
	}
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <_Z14moveCursorLefti>:

void moveCursorLeft(int j){
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	8c 01       	movw	r16, r24
	for (int k =0; k<j; k++){
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	c0 17       	cp	r28, r16
    11b6:	d1 07       	cpc	r29, r17
    11b8:	3c f4       	brge	.+14     	; 0x11c8 <_Z14moveCursorLefti+0x22>
		sc.LCD_Command(0x10);
    11ba:	60 e1       	ldi	r22, 0x10	; 16
    11bc:	88 e8       	ldi	r24, 0x88	; 136
    11be:	95 e0       	ldi	r25, 0x05	; 5
    11c0:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
		sc.LCD_Command(0x14);
	}
}

void moveCursorLeft(int j){
	for (int k =0; k<j; k++){
    11c4:	21 96       	adiw	r28, 0x01	; 1
    11c6:	f6 cf       	rjmp	.-20     	; 0x11b4 <_Z14moveCursorLefti+0xe>
		sc.LCD_Command(0x10);
	}
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <_Z12setClockTimev>:
		return false;
	}
}

//----------------------------------------------------------------------------------------------------------------------
void setClockTime(){
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	ef 92       	push	r14
    11de:	0f 93       	push	r16
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
	sc.LCD_clear();
    11e4:	88 e8       	ldi	r24, 0x88	; 136
    11e6:	95 e0       	ldi	r25, 0x05	; 5
    11e8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("Set time here");
    11ec:	60 e4       	ldi	r22, 0x40	; 64
    11ee:	75 e0       	ldi	r23, 0x05	; 5
    11f0:	88 e8       	ldi	r24, 0x88	; 136
    11f2:	95 e0       	ldi	r25, 0x05	; 5
    11f4:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    11f8:	60 ec       	ldi	r22, 0xC0	; 192
    11fa:	88 e8       	ldi	r24, 0x88	; 136
    11fc:	95 e0       	ldi	r25, 0x05	; 5
    11fe:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("hh : mm");
    1202:	6c eb       	ldi	r22, 0xBC	; 188
    1204:	74 e0       	ldi	r23, 0x04	; 4
    1206:	88 e8       	ldi	r24, 0x88	; 136
    1208:	95 e0       	ldi	r25, 0x05	; 5
    120a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	//sc.LCD_Command(0XC0);
	//sc.LCD_String("YY : MM : DD");
	//sc.LCD_Command(0x80);
	
	while (1){
		sc.LCD_Command(0xc0);
    120e:	60 ec       	ldi	r22, 0xC0	; 192
    1210:	88 e8       	ldi	r24, 0x88	; 136
    1212:	95 e0       	ldi	r25, 0x05	; 5
    1214:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
		sc.blink();
    1218:	88 e8       	ldi	r24, 0x88	; 136
    121a:	95 e0       	ldi	r25, 0x05	; 5
    121c:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN6Screen5blinkEv>
		h = (int (kp.pressedKey())-48)*10;
    1220:	87 e8       	ldi	r24, 0x87	; 135
    1222:	95 e0       	ldi	r25, 0x05	; 5
    1224:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	20 53       	subi	r18, 0x30	; 48
    122e:	31 09       	sbc	r19, r1
    1230:	c9 01       	movw	r24, r18
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	82 0f       	add	r24, r18
    1244:	93 1f       	adc	r25, r19
    1246:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <h+0x1>
    124a:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <h>
		if (h==410){return;}
    124e:	8a 39       	cpi	r24, 0x9A	; 154
    1250:	21 e0       	ldi	r18, 0x01	; 1
    1252:	92 07       	cpc	r25, r18
    1254:	09 f4       	brne	.+2      	; 0x1258 <_Z12setClockTimev+0x86>
    1256:	1c c2       	rjmp	.+1080   	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (h/10)+48);
    1258:	6a e0       	ldi	r22, 0x0A	; 10
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1260:	60 5d       	subi	r22, 0xD0	; 208
    1262:	88 e8       	ldi	r24, 0x88	; 136
    1264:	95 e0       	ldi	r25, 0x05	; 5
    1266:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
		h += (int (kp.pressedKey()) -48);
    126a:	87 e8       	ldi	r24, 0x87	; 135
    126c:	95 e0       	ldi	r25, 0x05	; 5
    126e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	c0 97       	sbiw	r24, 0x30	; 48
    1276:	20 91 7a 05 	lds	r18, 0x057A	; 0x80057a <h>
    127a:	30 91 7b 05 	lds	r19, 0x057B	; 0x80057b <h+0x1>
    127e:	82 0f       	add	r24, r18
    1280:	93 1f       	adc	r25, r19
    1282:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <h+0x1>
    1286:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <h>
		if (h==451){return;}
    128a:	83 3c       	cpi	r24, 0xC3	; 195
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	92 07       	cpc	r25, r18
    1290:	09 f4       	brne	.+2      	; 0x1294 <_Z12setClockTimev+0xc2>
    1292:	fe c1       	rjmp	.+1020   	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (h%10)+48);
    1294:	6a e0       	ldi	r22, 0x0A	; 10
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    129c:	60 e3       	ldi	r22, 0x30	; 48
    129e:	68 0f       	add	r22, r24
    12a0:	88 e8       	ldi	r24, 0x88	; 136
    12a2:	95 e0       	ldi	r25, 0x05	; 5
    12a4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
		sc.stopBlink();
    12a8:	88 e8       	ldi	r24, 0x88	; 136
    12aa:	95 e0       	ldi	r25, 0x05	; 5
    12ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
    12b0:	84 e2       	ldi	r24, 0x24	; 36
    12b2:	94 ef       	ldi	r25, 0xF4	; 244
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <_Z12setClockTimev+0xe2>
		_delay_ms(250);
		
		if(h<24){
    12b8:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <h>
    12bc:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <h+0x1>
    12c0:	48 97       	sbiw	r24, 0x18	; 24
    12c2:	64 f0       	brlt	.+24     	; 0x12dc <_Z12setClockTimev+0x10a>
			break;
		}
		sc.LCD_Command(0xc0); 
    12c4:	60 ec       	ldi	r22, 0xC0	; 192
    12c6:	88 e8       	ldi	r24, 0x88	; 136
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
		sc.LCD_String("hh");
    12ce:	6e e4       	ldi	r22, 0x4E	; 78
    12d0:	75 e0       	ldi	r23, 0x05	; 5
    12d2:	88 e8       	ldi	r24, 0x88	; 136
    12d4:	95 e0       	ldi	r25, 0x05	; 5
    12d6:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	sc.LCD_String("hh : mm");
	//sc.LCD_Command(0XC0);
	//sc.LCD_String("YY : MM : DD");
	//sc.LCD_Command(0x80);
	
	while (1){
    12da:	99 cf       	rjmp	.-206    	; 0x120e <_Z12setClockTimev+0x3c>
		}
		sc.LCD_Command(0xc0); 
		sc.LCD_String("hh");
		}
	
	sc.LCD_String(" : ");
    12dc:	64 ec       	ldi	r22, 0xC4	; 196
    12de:	74 e0       	ldi	r23, 0x04	; 4
    12e0:	88 e8       	ldi	r24, 0x88	; 136
    12e2:	95 e0       	ldi	r25, 0x05	; 5
    12e4:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	while(1){
		sc.blink();
    12e8:	88 e8       	ldi	r24, 0x88	; 136
    12ea:	95 e0       	ldi	r25, 0x05	; 5
    12ec:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN6Screen5blinkEv>
		M = (int (kp.pressedKey())-48)*10;
    12f0:	87 e8       	ldi	r24, 0x87	; 135
    12f2:	95 e0       	ldi	r25, 0x05	; 5
    12f4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	20 53       	subi	r18, 0x30	; 48
    12fe:	31 09       	sbc	r19, r1
    1300:	c9 01       	movw	r24, r18
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <M+0x1>
    131a:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <M>
		if (M==410){return;}
    131e:	8a 39       	cpi	r24, 0x9A	; 154
    1320:	21 e0       	ldi	r18, 0x01	; 1
    1322:	92 07       	cpc	r25, r18
    1324:	09 f4       	brne	.+2      	; 0x1328 <_Z12setClockTimev+0x156>
    1326:	b4 c1       	rjmp	.+872    	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (M/10)+48);
    1328:	6a e0       	ldi	r22, 0x0A	; 10
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1330:	60 5d       	subi	r22, 0xD0	; 208
    1332:	88 e8       	ldi	r24, 0x88	; 136
    1334:	95 e0       	ldi	r25, 0x05	; 5
    1336:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
		M += (int (kp.pressedKey()) -48);
    133a:	87 e8       	ldi	r24, 0x87	; 135
    133c:	95 e0       	ldi	r25, 0x05	; 5
    133e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	c0 97       	sbiw	r24, 0x30	; 48
    1346:	20 91 78 05 	lds	r18, 0x0578	; 0x800578 <M>
    134a:	30 91 79 05 	lds	r19, 0x0579	; 0x800579 <M+0x1>
    134e:	82 0f       	add	r24, r18
    1350:	93 1f       	adc	r25, r19
    1352:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <M+0x1>
    1356:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <M>
		if (M==451){return;}
    135a:	83 3c       	cpi	r24, 0xC3	; 195
    135c:	21 e0       	ldi	r18, 0x01	; 1
    135e:	92 07       	cpc	r25, r18
    1360:	09 f4       	brne	.+2      	; 0x1364 <_Z12setClockTimev+0x192>
    1362:	96 c1       	rjmp	.+812    	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (M%10)+48);
    1364:	6a e0       	ldi	r22, 0x0A	; 10
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    136c:	60 e3       	ldi	r22, 0x30	; 48
    136e:	68 0f       	add	r22, r24
    1370:	88 e8       	ldi	r24, 0x88	; 136
    1372:	95 e0       	ldi	r25, 0x05	; 5
    1374:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
    1378:	84 e2       	ldi	r24, 0x24	; 36
    137a:	94 ef       	ldi	r25, 0xF4	; 244
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <_Z12setClockTimev+0x1aa>
		_delay_ms(250);
		sc.stopBlink();
    1380:	88 e8       	ldi	r24, 0x88	; 136
    1382:	95 e0       	ldi	r25, 0x05	; 5
    1384:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
		
		if (M<60){
    1388:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <M>
    138c:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <M+0x1>
    1390:	cc 97       	sbiw	r24, 0x3c	; 60
    1392:	a4 f0       	brlt	.+40     	; 0x13bc <_Z12setClockTimev+0x1ea>
			break;
		}
		sc.LCD_Command(0xc0);  
    1394:	60 ec       	ldi	r22, 0xC0	; 192
    1396:	88 e8       	ldi	r24, 0x88	; 136
    1398:	95 e0       	ldi	r25, 0x05	; 5
    139a:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(5);
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 bd 08 	call	0x117a	; 0x117a <_Z15moveCursorRighti>
		sc.LCD_String("mm");
    13a6:	61 ec       	ldi	r22, 0xC1	; 193
    13a8:	74 e0       	ldi	r23, 0x04	; 4
    13aa:	88 e8       	ldi	r24, 0x88	; 136
    13ac:	95 e0       	ldi	r25, 0x05	; 5
    13ae:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
		moveCursorLeft(2);}
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_Z14moveCursorLefti>
		sc.LCD_Command(0xc0); 
		sc.LCD_String("hh");
		}
	
	sc.LCD_String(" : ");
	while(1){
    13ba:	96 cf       	rjmp	.-212    	; 0x12e8 <_Z12setClockTimev+0x116>
    13bc:	88 e8       	ldi	r24, 0x88	; 136
    13be:	93 e1       	ldi	r25, 0x13	; 19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <_Z12setClockTimev+0x1fe>
    13c4:	e9 e1       	ldi	r30, 0x19	; 25
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <_Z12setClockTimev+0x1f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f8 cf       	rjmp	.-16     	; 0x13c0 <_Z12setClockTimev+0x1ee>
	
	int s=0;
	
	_delay_ms(500);
	
	sc.LCD_clear();
    13d0:	88 e8       	ldi	r24, 0x88	; 136
    13d2:	95 e0       	ldi	r25, 0x05	; 5
    13d4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String("Set date here");
    13d8:	61 e5       	ldi	r22, 0x51	; 81
    13da:	75 e0       	ldi	r23, 0x05	; 5
    13dc:	88 e8       	ldi	r24, 0x88	; 136
    13de:	95 e0       	ldi	r25, 0x05	; 5
    13e0:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    13e4:	60 ec       	ldi	r22, 0xC0	; 192
    13e6:	88 e8       	ldi	r24, 0x88	; 136
    13e8:	95 e0       	ldi	r25, 0x05	; 5
    13ea:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("YY : MM : DD");
    13ee:	6f e5       	ldi	r22, 0x5F	; 95
    13f0:	75 e0       	ldi	r23, 0x05	; 5
    13f2:	88 e8       	ldi	r24, 0x88	; 136
    13f4:	95 e0       	ldi	r25, 0x05	; 5
    13f6:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Command(0xc0);
    13fa:	60 ec       	ldi	r22, 0xC0	; 192
    13fc:	88 e8       	ldi	r24, 0x88	; 136
    13fe:	95 e0       	ldi	r25, 0x05	; 5
    1400:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>

	sc.blink();
    1404:	88 e8       	ldi	r24, 0x88	; 136
    1406:	95 e0       	ldi	r25, 0x05	; 5
    1408:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN6Screen5blinkEv>
	int y = (int (kp.pressedKey())-48)*10;
    140c:	87 e8       	ldi	r24, 0x87	; 135
    140e:	95 e0       	ldi	r25, 0x05	; 5
    1410:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	c0 97       	sbiw	r24, 0x30	; 48
    1418:	ec 01       	movw	r28, r24
    141a:	cc 0f       	add	r28, r28
    141c:	dd 1f       	adc	r29, r29
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	c8 0f       	add	r28, r24
    142c:	d9 1f       	adc	r29, r25
	if (y==410){return;}
    142e:	ca 39       	cpi	r28, 0x9A	; 154
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	d8 07       	cpc	r29, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <_Z12setClockTimev+0x266>
    1436:	2c c1       	rjmp	.+600    	; 0x1690 <_Z12setClockTimev+0x4be>
	sc.LCD_Char((char) (y/10)+48);
    1438:	ce 01       	movw	r24, r28
    143a:	6a e0       	ldi	r22, 0x0A	; 10
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1442:	60 5d       	subi	r22, 0xD0	; 208
    1444:	88 e8       	ldi	r24, 0x88	; 136
    1446:	95 e0       	ldi	r25, 0x05	; 5
    1448:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
	y += (int (kp.pressedKey()) -48);
    144c:	87 e8       	ldi	r24, 0x87	; 135
    144e:	95 e0       	ldi	r25, 0x05	; 5
    1450:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	c0 97       	sbiw	r24, 0x30	; 48
    1458:	c8 0f       	add	r28, r24
    145a:	d9 1f       	adc	r29, r25
	if (h==451){return;}
    145c:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <h>
    1460:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <h+0x1>
    1464:	83 3c       	cpi	r24, 0xC3	; 195
    1466:	91 40       	sbci	r25, 0x01	; 1
    1468:	09 f4       	brne	.+2      	; 0x146c <_Z12setClockTimev+0x29a>
    146a:	12 c1       	rjmp	.+548    	; 0x1690 <_Z12setClockTimev+0x4be>
	sc.LCD_Char((char) (y%10)+48);
    146c:	ce 01       	movw	r24, r28
    146e:	6a e0       	ldi	r22, 0x0A	; 10
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1476:	60 e3       	ldi	r22, 0x30	; 48
    1478:	68 0f       	add	r22, r24
    147a:	88 e8       	ldi	r24, 0x88	; 136
    147c:	95 e0       	ldi	r25, 0x05	; 5
    147e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
	sc.stopBlink();
    1482:	88 e8       	ldi	r24, 0x88	; 136
    1484:	95 e0       	ldi	r25, 0x05	; 5
    1486:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
    148a:	84 e2       	ldi	r24, 0x24	; 36
    148c:	94 ef       	ldi	r25, 0xF4	; 244
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <_Z12setClockTimev+0x2bc>
	_delay_ms(250);
	
	sc.LCD_String(" : ");
    1492:	64 ec       	ldi	r22, 0xC4	; 196
    1494:	74 e0       	ldi	r23, 0x04	; 4
    1496:	88 e8       	ldi	r24, 0x88	; 136
    1498:	95 e0       	ldi	r25, 0x05	; 5
    149a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		sc.blink();
    149e:	88 e8       	ldi	r24, 0x88	; 136
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN6Screen5blinkEv>
		m = (int (kp.pressedKey())-48)*10;
    14a6:	87 e8       	ldi	r24, 0x87	; 135
    14a8:	95 e0       	ldi	r25, 0x05	; 5
    14aa:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	20 53       	subi	r18, 0x30	; 48
    14b4:	31 09       	sbc	r19, r1
    14b6:	c9 01       	movw	r24, r18
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	82 0f       	add	r24, r18
    14ca:	93 1f       	adc	r25, r19
    14cc:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <m+0x1>
    14d0:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <m>
		if (m==410){return;}
    14d4:	8a 39       	cpi	r24, 0x9A	; 154
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	92 07       	cpc	r25, r18
    14da:	09 f4       	brne	.+2      	; 0x14de <_Z12setClockTimev+0x30c>
    14dc:	d9 c0       	rjmp	.+434    	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (m/10)+48);
    14de:	6a e0       	ldi	r22, 0x0A	; 10
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    14e6:	60 5d       	subi	r22, 0xD0	; 208
    14e8:	88 e8       	ldi	r24, 0x88	; 136
    14ea:	95 e0       	ldi	r25, 0x05	; 5
    14ec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
		m += (int (kp.pressedKey()) -48);
    14f0:	87 e8       	ldi	r24, 0x87	; 135
    14f2:	95 e0       	ldi	r25, 0x05	; 5
    14f4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	c0 97       	sbiw	r24, 0x30	; 48
    14fc:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <m>
    1500:	30 91 7f 05 	lds	r19, 0x057F	; 0x80057f <m+0x1>
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <m+0x1>
    150c:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <m>
		if (m==451){return;}
    1510:	83 3c       	cpi	r24, 0xC3	; 195
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	92 07       	cpc	r25, r18
    1516:	09 f4       	brne	.+2      	; 0x151a <_Z12setClockTimev+0x348>
    1518:	bb c0       	rjmp	.+374    	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (m%10)+48);
    151a:	6a e0       	ldi	r22, 0x0A	; 10
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1522:	60 e3       	ldi	r22, 0x30	; 48
    1524:	68 0f       	add	r22, r24
    1526:	88 e8       	ldi	r24, 0x88	; 136
    1528:	95 e0       	ldi	r25, 0x05	; 5
    152a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
    152e:	84 e2       	ldi	r24, 0x24	; 36
    1530:	94 ef       	ldi	r25, 0xF4	; 244
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <_Z12setClockTimev+0x360>
		_delay_ms(250);
		sc.stopBlink();
    1536:	88 e8       	ldi	r24, 0x88	; 136
    1538:	95 e0       	ldi	r25, 0x05	; 5
    153a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
		
		if (m<13){
    153e:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <m>
    1542:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <m+0x1>
    1546:	0d 97       	sbiw	r24, 0x0d	; 13
    1548:	a4 f0       	brlt	.+40     	; 0x1572 <_Z12setClockTimev+0x3a0>
			break;
		}
		sc.LCD_Command(0xc0);
    154a:	60 ec       	ldi	r22, 0xC0	; 192
    154c:	88 e8       	ldi	r24, 0x88	; 136
    154e:	95 e0       	ldi	r25, 0x05	; 5
    1550:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(5);
    1554:	85 e0       	ldi	r24, 0x05	; 5
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 bd 08 	call	0x117a	; 0x117a <_Z15moveCursorRighti>
		sc.LCD_String("MM");
    155c:	6c e6       	ldi	r22, 0x6C	; 108
    155e:	75 e0       	ldi	r23, 0x05	; 5
    1560:	88 e8       	ldi	r24, 0x88	; 136
    1562:	95 e0       	ldi	r25, 0x05	; 5
    1564:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	moveCursorLeft(2);}
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_Z14moveCursorLefti>
	sc.stopBlink();
	_delay_ms(250);
	
	sc.LCD_String(" : ");
	
	while(1){
    1570:	96 cf       	rjmp	.-212    	; 0x149e <_Z12setClockTimev+0x2cc>
		moveCursorRight(5);
		sc.LCD_String("MM");
	moveCursorLeft(2);}
	
	
	sc.LCD_String(" : ");
    1572:	64 ec       	ldi	r22, 0xC4	; 196
    1574:	74 e0       	ldi	r23, 0x04	; 4
    1576:	88 e8       	ldi	r24, 0x88	; 136
    1578:	95 e0       	ldi	r25, 0x05	; 5
    157a:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		sc.blink();
    157e:	88 e8       	ldi	r24, 0x88	; 136
    1580:	95 e0       	ldi	r25, 0x05	; 5
    1582:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN6Screen5blinkEv>
		d = (int (kp.pressedKey())-48)*10;
    1586:	87 e8       	ldi	r24, 0x87	; 135
    1588:	95 e0       	ldi	r25, 0x05	; 5
    158a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	20 53       	subi	r18, 0x30	; 48
    1594:	31 09       	sbc	r19, r1
    1596:	c9 01       	movw	r24, r18
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	22 0f       	add	r18, r18
    159e:	33 1f       	adc	r19, r19
    15a0:	22 0f       	add	r18, r18
    15a2:	33 1f       	adc	r19, r19
    15a4:	22 0f       	add	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	82 0f       	add	r24, r18
    15aa:	93 1f       	adc	r25, r19
    15ac:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <d+0x1>
    15b0:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <d>
		if (d==410){return;}
    15b4:	8a 39       	cpi	r24, 0x9A	; 154
    15b6:	21 e0       	ldi	r18, 0x01	; 1
    15b8:	92 07       	cpc	r25, r18
    15ba:	09 f4       	brne	.+2      	; 0x15be <_Z12setClockTimev+0x3ec>
    15bc:	69 c0       	rjmp	.+210    	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (d/10)+48);
    15be:	6a e0       	ldi	r22, 0x0A	; 10
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    15c6:	60 5d       	subi	r22, 0xD0	; 208
    15c8:	88 e8       	ldi	r24, 0x88	; 136
    15ca:	95 e0       	ldi	r25, 0x05	; 5
    15cc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
		d += (int (kp.pressedKey()) -48);
    15d0:	87 e8       	ldi	r24, 0x87	; 135
    15d2:	95 e0       	ldi	r25, 0x05	; 5
    15d4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7Key_Pad10pressedKeyEv>
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9c 01       	movw	r18, r24
    15dc:	20 53       	subi	r18, 0x30	; 48
    15de:	31 09       	sbc	r19, r1
    15e0:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <d>
    15e4:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <d+0x1>
    15e8:	82 0f       	add	r24, r18
    15ea:	93 1f       	adc	r25, r19
    15ec:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <d+0x1>
    15f0:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <d>
		if (d==451){return;}
    15f4:	83 3c       	cpi	r24, 0xC3	; 195
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	92 07       	cpc	r25, r18
    15fa:	09 f4       	brne	.+2      	; 0x15fe <_Z12setClockTimev+0x42c>
    15fc:	49 c0       	rjmp	.+146    	; 0x1690 <_Z12setClockTimev+0x4be>
		sc.LCD_Char((char) (d%10)+48);
    15fe:	6a e0       	ldi	r22, 0x0A	; 10
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1606:	60 e3       	ldi	r22, 0x30	; 48
    1608:	68 0f       	add	r22, r24
    160a:	88 e8       	ldi	r24, 0x88	; 136
    160c:	95 e0       	ldi	r25, 0x05	; 5
    160e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Screen8LCD_CharEh>
    1612:	84 e2       	ldi	r24, 0x24	; 36
    1614:	94 ef       	ldi	r25, 0xF4	; 244
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <_Z12setClockTimev+0x444>
		_delay_ms(250);
		sc.stopBlink();
    161a:	88 e8       	ldi	r24, 0x88	; 136
    161c:	95 e0       	ldi	r25, 0x05	; 5
    161e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_ZN6Screen9stopBlinkEv>
		
		if (d<monthsDays[m-1]){
    1622:	a0 90 7e 05 	lds	r10, 0x057E	; 0x80057e <m>
    1626:	b0 90 7f 05 	lds	r11, 0x057F	; 0x80057f <m+0x1>
    162a:	f5 01       	movw	r30, r10
    162c:	31 97       	sbiw	r30, 0x01	; 1
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	e4 55       	subi	r30, 0x54	; 84
    1634:	fe 4f       	sbci	r31, 0xFE	; 254
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	80 90 7c 05 	lds	r8, 0x057C	; 0x80057c <d>
    163e:	90 90 7d 05 	lds	r9, 0x057D	; 0x80057d <d+0x1>
    1642:	88 16       	cp	r8, r24
    1644:	99 06       	cpc	r9, r25
    1646:	a4 f0       	brlt	.+40     	; 0x1670 <_Z12setClockTimev+0x49e>
			break;
		}
		sc.LCD_Command(0xc0);
    1648:	60 ec       	ldi	r22, 0xC0	; 192
    164a:	88 e8       	ldi	r24, 0x88	; 136
    164c:	95 e0       	ldi	r25, 0x05	; 5
    164e:	0e 94 3f 02 	call	0x47e	; 0x47e <_ZN6Screen11LCD_CommandEh>
		moveCursorRight(10);
    1652:	8a e0       	ldi	r24, 0x0A	; 10
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 bd 08 	call	0x117a	; 0x117a <_Z15moveCursorRighti>
		sc.LCD_String("DD");
    165a:	69 e6       	ldi	r22, 0x69	; 105
    165c:	75 e0       	ldi	r23, 0x05	; 5
    165e:	88 e8       	ldi	r24, 0x88	; 136
    1660:	95 e0       	ldi	r25, 0x05	; 5
    1662:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	moveCursorLeft(2);}
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_Z14moveCursorLefti>
	moveCursorLeft(2);}
	
	
	sc.LCD_String(" : ");
	
	while(1){
    166e:	87 cf       	rjmp	.-242    	; 0x157e <_Z12setClockTimev+0x3ac>
		sc.LCD_Command(0xc0);
		moveCursorRight(10);
		sc.LCD_String("DD");
	moveCursorLeft(2);}
	
	int D = getDay(y,m,d);
    1670:	a4 01       	movw	r20, r8
    1672:	b5 01       	movw	r22, r10
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 bd 04 	call	0x97a	; 0x97a <_Z6getDayiii>
	ds1307_setdate(y,m, d, D, h, M, s);
    167a:	e0 90 78 05 	lds	r14, 0x0578	; 0x800578 <M>
    167e:	00 91 7a 05 	lds	r16, 0x057A	; 0x80057a <h>
    1682:	c1 2c       	mov	r12, r1
    1684:	28 2f       	mov	r18, r24
    1686:	48 2d       	mov	r20, r8
    1688:	6a 2d       	mov	r22, r10
    168a:	8c 2f       	mov	r24, r28
    168c:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14ds1307_setdatehhhhhhh>
		
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	0f 91       	pop	r16
    1696:	ef 90       	pop	r14
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	08 95       	ret

000016a4 <_Z8mainLoopv>:
		
	}
}

void mainLoop(){
	showTime();
    16a4:	0e 94 a1 03 	call	0x742	; 0x742 <_Z8showTimev>
	if (sc.pressedSelect()){
    16a8:	88 e8       	ldi	r24, 0x88	; 136
    16aa:	95 e0       	ldi	r25, 0x05	; 5
    16ac:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN6Screen13pressedSelectEv>
    16b0:	88 23       	and	r24, r24
    16b2:	31 f0       	breq	.+12     	; 0x16c0 <_Z8mainLoopv+0x1c>
		sc.LCD_clear();
    16b4:	88 e8       	ldi	r24, 0x88	; 136
    16b6:	95 e0       	ldi	r25, 0x05	; 5
    16b8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
		mainMenu();
    16bc:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_Z8mainMenuv>
    16c0:	08 95       	ret

000016c2 <_Z8mainMenuv>:
}


void mainMenu()
{
	sc.LCD_clear();
    16c2:	88 e8       	ldi	r24, 0x88	; 136
    16c4:	95 e0       	ldi	r25, 0x05	; 5
    16c6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
	sc.LCD_String(menu[menu_i]);
    16ca:	60 91 76 05 	lds	r22, 0x0576	; 0x800576 <menu_i>
    16ce:	70 91 77 05 	lds	r23, 0x0577	; 0x800577 <menu_i+0x1>
    16d2:	62 95       	swap	r22
    16d4:	72 95       	swap	r23
    16d6:	70 7f       	andi	r23, 0xF0	; 240
    16d8:	76 27       	eor	r23, r22
    16da:	60 7f       	andi	r22, 0xF0	; 240
    16dc:	76 27       	eor	r23, r22
    16de:	64 5a       	subi	r22, 0xA4	; 164
    16e0:	7e 4f       	sbci	r23, 0xFE	; 254
    16e2:	88 e8       	ldi	r24, 0x88	; 136
    16e4:	95 e0       	ldi	r25, 0x05	; 5
    16e6:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	
	while(1){
		
		char btn = sc.Control_buttons();
    16ea:	88 e8       	ldi	r24, 0x88	; 136
    16ec:	95 e0       	ldi	r25, 0x05	; 5
    16ee:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN6Screen15Control_buttonsEv>
		if (btn=='d'){
    16f2:	84 36       	cpi	r24, 0x64	; 100
    16f4:	91 f4       	brne	.+36     	; 0x171a <_Z8mainMenuv+0x58>
			switch(menu_i)
    16f6:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <menu_i>
    16fa:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <menu_i+0x1>
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	91 05       	cpc	r25, r1
    1702:	29 f4       	brne	.+10     	; 0x170e <_Z8mainMenuv+0x4c>
			{
				case 4: menu_i = 0; break;
    1704:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menu_i+0x1>
    1708:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <menu_i>
    170c:	3e c0       	rjmp	.+124    	; 0x178a <_Z8mainMenuv+0xc8>
				default: menu_i ++; break;
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <menu_i+0x1>
    1714:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <menu_i>
    1718:	38 c0       	rjmp	.+112    	; 0x178a <_Z8mainMenuv+0xc8>
			}
		}
		else if (btn=='u'){
    171a:	85 37       	cpi	r24, 0x75	; 117
    171c:	99 f4       	brne	.+38     	; 0x1744 <_Z8mainMenuv+0x82>
			switch (menu_i)
    171e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <menu_i>
    1722:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <menu_i+0x1>
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	39 f4       	brne	.+14     	; 0x1738 <_Z8mainMenuv+0x76>
			{
				case 0: menu_i = 4; break;
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <menu_i+0x1>
    1732:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <menu_i>
    1736:	29 c0       	rjmp	.+82     	; 0x178a <_Z8mainMenuv+0xc8>
				default: menu_i --; break;
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <menu_i+0x1>
    173e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <menu_i>
    1742:	23 c0       	rjmp	.+70     	; 0x178a <_Z8mainMenuv+0xc8>
			}
		}
		
		else if (btn=='b'){
    1744:	82 36       	cpi	r24, 0x62	; 98
    1746:	19 f4       	brne	.+6      	; 0x174e <_Z8mainMenuv+0x8c>
			mainLoop();
    1748:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z8mainLoopv>
		_delay_ms(500);
		
		
		
	}
}
    174c:	08 95       	ret
		
		else if (btn=='b'){
			mainLoop();
		break;}
		
		else if (btn=='s'){
    174e:	83 37       	cpi	r24, 0x73	; 115
    1750:	e1 f4       	brne	.+56     	; 0x178a <_Z8mainMenuv+0xc8>
			switch (menu_i)
    1752:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <menu_i>
    1756:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <menu_i+0x1>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	69 f0       	breq	.+26     	; 0x177a <_Z8mainMenuv+0xb8>
    1760:	1c f4       	brge	.+6      	; 0x1768 <_Z8mainMenuv+0xa6>
    1762:	89 2b       	or	r24, r25
    1764:	39 f0       	breq	.+14     	; 0x1774 <_Z8mainMenuv+0xb2>
    1766:	11 c0       	rjmp	.+34     	; 0x178a <_Z8mainMenuv+0xc8>
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	91 05       	cpc	r25, r1
    176c:	49 f0       	breq	.+18     	; 0x1780 <_Z8mainMenuv+0xbe>
    176e:	03 97       	sbiw	r24, 0x03	; 3
    1770:	51 f0       	breq	.+20     	; 0x1786 <_Z8mainMenuv+0xc4>
    1772:	0b c0       	rjmp	.+22     	; 0x178a <_Z8mainMenuv+0xc8>
			{case 0:
				set_alarm();
    1774:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z9set_alarmv>
				break;
    1778:	08 c0       	rjmp	.+16     	; 0x178a <_Z8mainMenuv+0xc8>
				
				case 1:
				setClockTime();
    177a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z12setClockTimev>
				break;
    177e:	05 c0       	rjmp	.+10     	; 0x178a <_Z8mainMenuv+0xc8>
				
				case 2:
				deleteAlarm();
    1780:	0e 94 86 06 	call	0xd0c	; 0xd0c <_Z11deleteAlarmv>
				break;
    1784:	02 c0       	rjmp	.+4      	; 0x178a <_Z8mainMenuv+0xc8>
				case 3:
				factoryReset();
    1786:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_Z12factoryResetv>
				
			}
		}
		

		sc.LCD_clear();
    178a:	88 e8       	ldi	r24, 0x88	; 136
    178c:	95 e0       	ldi	r25, 0x05	; 5
    178e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN6Screen9LCD_clearEv>
		sc.LCD_String(menu[menu_i]);
    1792:	60 91 76 05 	lds	r22, 0x0576	; 0x800576 <menu_i>
    1796:	70 91 77 05 	lds	r23, 0x0577	; 0x800577 <menu_i+0x1>
    179a:	62 95       	swap	r22
    179c:	72 95       	swap	r23
    179e:	70 7f       	andi	r23, 0xF0	; 240
    17a0:	76 27       	eor	r23, r22
    17a2:	60 7f       	andi	r22, 0xF0	; 240
    17a4:	76 27       	eor	r23, r22
    17a6:	64 5a       	subi	r22, 0xA4	; 164
    17a8:	7e 4f       	sbci	r23, 0xFE	; 254
    17aa:	88 e8       	ldi	r24, 0x88	; 136
    17ac:	95 e0       	ldi	r25, 0x05	; 5
    17ae:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN6Screen10LCD_StringEPc>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b2:	88 e8       	ldi	r24, 0x88	; 136
    17b4:	93 e1       	ldi	r25, 0x13	; 19
		while(__ticks)
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	09 f4       	brne	.+2      	; 0x17bc <_Z8mainMenuv+0xfa>
    17ba:	97 cf       	rjmp	.-210    	; 0x16ea <_Z8mainMenuv+0x28>
    17bc:	e9 e1       	ldi	r30, 0x19	; 25
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <_Z8mainMenuv+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f7 cf       	rjmp	.-18     	; 0x17b6 <_Z8mainMenuv+0xf4>

000017c8 <_GLOBAL__sub_I_tone>:
	showTime();
	if (sc.pressedSelect()){
		sc.LCD_clear();
		mainMenu();
}
    17c8:	6f ef       	ldi	r22, 0xFF	; 255
    17ca:	7f ef       	ldi	r23, 0xFF	; 255
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 95 03 	call	0x72a	; 0x72a <_Z41__static_initialization_and_destruction_0ii>
    17d4:	08 95       	ret

000017d6 <_ZN4ToneC1Ei>:

Screen sc3;

Tone::Tone(int pin_1)
{
	SPEAKER_PIN=pin_1;
    17d6:	fc 01       	movw	r30, r24
    17d8:	71 83       	std	Z+1, r23	; 0x01
    17da:	60 83       	st	Z, r22
    17dc:	08 95       	ret

000017de <_ZN4Tone8playNoteEff>:
}

//Function to play a single note

void Tone:: playNote(float frequency, float duration)
{
    17de:	2f 92       	push	r2
    17e0:	3f 92       	push	r3
    17e2:	4f 92       	push	r4
    17e4:	5f 92       	push	r5
    17e6:	6f 92       	push	r6
    17e8:	7f 92       	push	r7
    17ea:	8f 92       	push	r8
    17ec:	9f 92       	push	r9
    17ee:	af 92       	push	r10
    17f0:	bf 92       	push	r11
    17f2:	cf 92       	push	r12
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	62 97       	sbiw	r28, 0x12	; 18
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	1c 01       	movw	r2, r24
    1814:	6a 01       	movw	r12, r20
    1816:	7b 01       	movw	r14, r22
    1818:	c9 01       	movw	r24, r18
    181a:	b8 01       	movw	r22, r16
	duration*=0.5;
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	5f e3       	ldi	r21, 0x3F	; 63
    1824:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1828:	4b 01       	movw	r8, r22
    182a:	5c 01       	movw	r10, r24
	long int cycles;
	float half_period;
	float wavelength;
	
	SPEAKER_DDR |= (1 << SPEAKER_PIN);
    182c:	24 b1       	in	r18, 0x04	; 4
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	f1 01       	movw	r30, r2
    1834:	00 80       	ld	r0, Z
    1836:	02 c0       	rjmp	.+4      	; 0x183c <_ZN4Tone8playNoteEff+0x5e>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <_ZN4Tone8playNoteEff+0x5a>
    1840:	82 2b       	or	r24, r18
    1842:	84 b9       	out	0x04, r24	; 4
	if (frequency==0){
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	c7 01       	movw	r24, r14
    184c:	b6 01       	movw	r22, r12
    184e:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    1852:	81 11       	cpse	r24, r1
    1854:	da c0       	rjmp	.+436    	; 0x1a0a <_ZN4Tone8playNoteEff+0x22c>
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    1856:	25 b1       	in	r18, 0x05	; 5
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	f1 01       	movw	r30, r2
    185e:	00 80       	ld	r0, Z
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <_ZN4Tone8playNoteEff+0x88>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <_ZN4Tone8playNoteEff+0x84>
    186a:	80 95       	com	r24
    186c:	82 23       	and	r24, r18
    186e:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1870:	2b ea       	ldi	r18, 0xAB	; 171
    1872:	3a ea       	ldi	r19, 0xAA	; 170
    1874:	4a ea       	ldi	r20, 0xAA	; 170
    1876:	5e e3       	ldi	r21, 0x3E	; 62
    1878:	c5 01       	movw	r24, r10
    187a:	b4 01       	movw	r22, r8
    187c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1880:	6b 01       	movw	r12, r22
    1882:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5e e3       	ldi	r21, 0x3E	; 62
    188c:	c5 01       	movw	r24, r10
    188e:	b4 01       	movw	r22, r8
    1890:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1894:	2b 01       	movw	r4, r22
    1896:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	c7 01       	movw	r24, r14
    18a2:	b6 01       	movw	r22, r12
    18a4:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	0c f4       	brge	.+2      	; 0x18ae <_ZN4Tone8playNoteEff+0xd0>
    18ac:	66 c0       	rjmp	.+204    	; 0x197a <_ZN4Tone8playNoteEff+0x19c>
		__ticks = 1;
	else if (__tmp2 > 65535)
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	c3 01       	movw	r24, r6
    18b8:	b2 01       	movw	r22, r4
    18ba:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    18be:	18 16       	cp	r1, r24
    18c0:	0c f0       	brlt	.+2      	; 0x18c4 <_ZN4Tone8playNoteEff+0xe6>
    18c2:	43 c0       	rjmp	.+134    	; 0x194a <_ZN4Tone8playNoteEff+0x16c>
	{
		_delay_ms(__us / 1000.0);
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a e7       	ldi	r20, 0x7A	; 122
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	c5 01       	movw	r24, r10
    18ce:	b4 01       	movw	r22, r8
    18d0:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
    18d4:	2b 01       	movw	r4, r22
    18d6:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a e7       	ldi	r20, 0x7A	; 122
    18de:	53 e4       	ldi	r21, 0x43	; 67
    18e0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    18e4:	6b 01       	movw	r12, r22
    18e6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	5f e3       	ldi	r21, 0x3F	; 63
    18f0:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    18f4:	88 23       	and	r24, r24
    18f6:	1c f1       	brlt	.+70     	; 0x193e <_ZN4Tone8playNoteEff+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	c7 01       	movw	r24, r14
    1902:	b6 01       	movw	r22, r12
    1904:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1908:	18 16       	cp	r1, r24
    190a:	a4 f4       	brge	.+40     	; 0x1934 <_ZN4Tone8playNoteEff+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	c3 01       	movw	r24, r6
    1916:	b2 01       	movw	r22, r4
    1918:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    191c:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    1920:	61 15       	cp	r22, r1
    1922:	71 05       	cpc	r23, r1
    1924:	69 f1       	breq	.+90     	; 0x1980 <_ZN4Tone8playNoteEff+0x1a2>
    1926:	89 e1       	ldi	r24, 0x19	; 25
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <_ZN4Tone8playNoteEff+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	61 50       	subi	r22, 0x01	; 1
    1930:	71 09       	sbc	r23, r1
    1932:	f6 cf       	rjmp	.-20     	; 0x1920 <_ZN4Tone8playNoteEff+0x142>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1934:	c7 01       	movw	r24, r14
    1936:	b6 01       	movw	r22, r12
    1938:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <_ZN4Tone8playNoteEff+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	cb 01       	movw	r24, r22
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <_ZN4Tone8playNoteEff+0x166>
    1948:	1b c0       	rjmp	.+54     	; 0x1980 <_ZN4Tone8playNoteEff+0x1a2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	53 e4       	ldi	r21, 0x43	; 67
    1952:	c7 01       	movw	r24, r14
    1954:	b6 01       	movw	r22, r12
    1956:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    195a:	18 16       	cp	r1, r24
    195c:	44 f4       	brge	.+16     	; 0x196e <_ZN4Tone8playNoteEff+0x190>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    195e:	c3 01       	movw	r24, r6
    1960:	b2 01       	movw	r22, r4
    1962:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1966:	cb 01       	movw	r24, r22
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <_ZN4Tone8playNoteEff+0x18a>
    196c:	0c c0       	rjmp	.+24     	; 0x1986 <_ZN4Tone8playNoteEff+0x1a8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    196e:	c7 01       	movw	r24, r14
    1970:	b6 01       	movw	r22, r12
    1972:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1976:	69 87       	std	Y+9, r22	; 0x09
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <_ZN4Tone8playNoteEff+0x1a2>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	29 87       	std	Y+9, r18	; 0x09
    197e:	00 c0       	rjmp	.+0      	; 0x1980 <_ZN4Tone8playNoteEff+0x1a2>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1980:	89 85       	ldd	r24, Y+9	; 0x09
    1982:	8a 95       	dec	r24
    1984:	f1 f7       	brne	.-4      	; 0x1982 <_ZN4Tone8playNoteEff+0x1a4>
		_delay_us(duration);
		float pauseBetweenNotes= duration*2;
    1986:	a5 01       	movw	r20, r10
    1988:	94 01       	movw	r18, r8
    198a:	c5 01       	movw	r24, r10
    198c:	b4 01       	movw	r22, r8
    198e:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    1992:	4b 01       	movw	r8, r22
    1994:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	53 e4       	ldi	r21, 0x43	; 67
    199e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    19a2:	6b 01       	movw	r12, r22
    19a4:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	24 f1       	brlt	.+72     	; 0x19fe <_ZN4Tone8playNoteEff+0x220>
		__ticks = 1;
	else if (__tmp > 65535)
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	c7 01       	movw	r24, r14
    19c0:	b6 01       	movw	r22, r12
    19c2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	ac f4       	brge	.+42     	; 0x19f4 <_ZN4Tone8playNoteEff+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	c5 01       	movw	r24, r10
    19d4:	b4 01       	movw	r22, r8
    19d6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    19da:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    19de:	61 15       	cp	r22, r1
    19e0:	71 05       	cpc	r23, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <_ZN4Tone8playNoteEff+0x208>
    19e4:	8c c1       	rjmp	.+792    	; 0x1cfe <_ZN4Tone8playNoteEff+0x520>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    19e6:	89 e1       	ldi	r24, 0x19	; 25
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <_ZN4Tone8playNoteEff+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	61 50       	subi	r22, 0x01	; 1
    19f0:	71 09       	sbc	r23, r1
    19f2:	f5 cf       	rjmp	.-22     	; 0x19de <_ZN4Tone8playNoteEff+0x200>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	c7 01       	movw	r24, r14
    19f6:	b6 01       	movw	r22, r12
    19f8:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <_ZN4Tone8playNoteEff+0x224>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	cb 01       	movw	r24, r22
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <_ZN4Tone8playNoteEff+0x226>
    1a08:	7a c1       	rjmp	.+756    	; 0x1cfe <_ZN4Tone8playNoteEff+0x520>
			_delay_ms (pauseBetweenNotes);
	}
	
	
	else{
		wavelength=(1/frequency)*1000;
    1a0a:	a7 01       	movw	r20, r14
    1a0c:	96 01       	movw	r18, r12
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	9f e3       	ldi	r25, 0x3F	; 63
    1a16:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a e7       	ldi	r20, 0x7A	; 122
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1a26:	6b 01       	movw	r12, r22
    1a28:	7c 01       	movw	r14, r24
		cycles=2*duration/wavelength;
    1a2a:	a5 01       	movw	r20, r10
    1a2c:	94 01       	movw	r18, r8
    1a2e:	c5 01       	movw	r24, r10
    1a30:	b4 01       	movw	r22, r8
    1a32:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    1a36:	a7 01       	movw	r20, r14
    1a38:	96 01       	movw	r18, r12
    1a3a:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
    1a3e:	0e 94 06 14 	call	0x280c	; 0x280c <__fixsfsi>
    1a42:	2b 01       	movw	r4, r22
    1a44:	3c 01       	movw	r6, r24
		half_period = wavelength/2;
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1a56:	69 87       	std	Y+9, r22	; 0x09
    1a58:	7a 87       	std	Y+10, r23	; 0x0a
    1a5a:	8b 87       	std	Y+11, r24	; 0x0b
    1a5c:	9c 87       	std	Y+12, r25	; 0x0c

		
		
		for (int i=0;i<cycles;i++)
    1a5e:	e0 e0       	ldi	r30, 0x00	; 0
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	fa 8b       	std	Y+18, r31	; 0x12
    1a64:	e9 8b       	std	Y+17, r30	; 0x11
    1a66:	19 81       	ldd	r17, Y+1	; 0x01
    1a68:	0d 81       	ldd	r16, Y+5	; 0x05
    1a6a:	29 89       	ldd	r18, Y+17	; 0x11
    1a6c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a6e:	c9 01       	movw	r24, r18
    1a70:	33 0f       	add	r19, r19
    1a72:	aa 0b       	sbc	r26, r26
    1a74:	bb 0b       	sbc	r27, r27
    1a76:	84 15       	cp	r24, r4
    1a78:	95 05       	cpc	r25, r5
    1a7a:	a6 05       	cpc	r26, r6
    1a7c:	b7 05       	cpc	r27, r7
    1a7e:	0c f0       	brlt	.+2      	; 0x1a82 <_ZN4Tone8playNoteEff+0x2a4>
    1a80:	3e c1       	rjmp	.+636    	; 0x1cfe <_ZN4Tone8playNoteEff+0x520>
		{
			_delay_us(half_period*1000);
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a e7       	ldi	r20, 0x7A	; 122
    1a88:	54 e4       	ldi	r21, 0x44	; 68
    1a8a:	69 85       	ldd	r22, Y+9	; 0x09
    1a8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a90:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a92:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1a96:	4b 01       	movw	r8, r22
    1a98:	5c 01       	movw	r10, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a9a:	2b ea       	ldi	r18, 0xAB	; 171
    1a9c:	3a ea       	ldi	r19, 0xAA	; 170
    1a9e:	4a ea       	ldi	r20, 0xAA	; 170
    1aa0:	5e e3       	ldi	r21, 0x3E	; 62
    1aa2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1aa6:	6b 01       	movw	r12, r22
    1aa8:	7c 01       	movw	r14, r24
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5e e3       	ldi	r21, 0x3E	; 62
    1ab2:	c5 01       	movw	r24, r10
    1ab4:	b4 01       	movw	r22, r8
    1ab6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1aba:	69 83       	std	Y+1, r22	; 0x01
    1abc:	7a 83       	std	Y+2, r23	; 0x02
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
	if (__tmp < 1.0)
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	c7 01       	movw	r24, r14
    1acc:	b6 01       	movw	r22, r12
    1ace:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	0c f4       	brge	.+2      	; 0x1ad8 <_ZN4Tone8playNoteEff+0x2fa>
    1ad6:	74 c0       	rjmp	.+232    	; 0x1bc0 <_ZN4Tone8playNoteEff+0x3e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	69 81       	ldd	r22, Y+1	; 0x01
    1ae2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <_ZN4Tone8playNoteEff+0x314>
    1af0:	4d c0       	rjmp	.+154    	; 0x1b8c <_ZN4Tone8playNoteEff+0x3ae>
	{
		_delay_ms(__us / 1000.0);
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	c5 01       	movw	r24, r10
    1afc:	b4 01       	movw	r22, r8
    1afe:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
    1b02:	6d 87       	std	Y+13, r22	; 0x0d
    1b04:	7e 87       	std	Y+14, r23	; 0x0e
    1b06:	8f 87       	std	Y+15, r24	; 0x0f
    1b08:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	4a e7       	ldi	r20, 0x7A	; 122
    1b10:	53 e4       	ldi	r21, 0x43	; 67
    1b12:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1b16:	6d 83       	std	Y+5, r22	; 0x05
    1b18:	7e 83       	std	Y+6, r23	; 0x06
    1b1a:	8f 83       	std	Y+7, r24	; 0x07
    1b1c:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	4c f1       	brlt	.+82     	; 0x1b80 <_ZN4Tone8playNoteEff+0x3a2>
		__ticks = 1;
	else if (__tmp > 65535)
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	3f ef       	ldi	r19, 0xFF	; 255
    1b32:	4f e7       	ldi	r20, 0x7F	; 127
    1b34:	57 e4       	ldi	r21, 0x47	; 71
    1b36:	6d 81       	ldd	r22, Y+5	; 0x05
    1b38:	7e 81       	ldd	r23, Y+6	; 0x06
    1b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3c:	98 85       	ldd	r25, Y+8	; 0x08
    1b3e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1b42:	18 16       	cp	r1, r24
    1b44:	b4 f4       	brge	.+44     	; 0x1b72 <_ZN4Tone8playNoteEff+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b50:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b54:	98 89       	ldd	r25, Y+16	; 0x10
    1b56:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1b5a:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    1b5e:	61 15       	cp	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	81 f1       	breq	.+96     	; 0x1bc4 <_ZN4Tone8playNoteEff+0x3e6>
    1b64:	89 e1       	ldi	r24, 0x19	; 25
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <_ZN4Tone8playNoteEff+0x38a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	61 50       	subi	r22, 0x01	; 1
    1b6e:	71 09       	sbc	r23, r1
    1b70:	f6 cf       	rjmp	.-20     	; 0x1b5e <_ZN4Tone8playNoteEff+0x380>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	6d 81       	ldd	r22, Y+5	; 0x05
    1b74:	7e 81       	ldd	r23, Y+6	; 0x06
    1b76:	8f 81       	ldd	r24, Y+7	; 0x07
    1b78:	98 85       	ldd	r25, Y+8	; 0x08
    1b7a:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <_ZN4Tone8playNoteEff+0x3a6>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	cb 01       	movw	r24, r22
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <_ZN4Tone8playNoteEff+0x3a8>
    1b8a:	1c c0       	rjmp	.+56     	; 0x1bc4 <_ZN4Tone8playNoteEff+0x3e6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	53 e4       	ldi	r21, 0x43	; 67
    1b94:	c7 01       	movw	r24, r14
    1b96:	b6 01       	movw	r22, r12
    1b98:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	54 f4       	brge	.+20     	; 0x1bb4 <_ZN4Tone8playNoteEff+0x3d6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1ba0:	69 81       	ldd	r22, Y+1	; 0x01
    1ba2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1bac:	cb 01       	movw	r24, r22
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <_ZN4Tone8playNoteEff+0x3d0>
    1bb2:	0b c0       	rjmp	.+22     	; 0x1bca <_ZN4Tone8playNoteEff+0x3ec>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	b6 01       	movw	r22, r12
    1bb8:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1bbc:	06 2f       	mov	r16, r22
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <_ZN4Tone8playNoteEff+0x3e6>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1bc0:	01 e0       	ldi	r16, 0x01	; 1
    1bc2:	00 c0       	rjmp	.+0      	; 0x1bc4 <_ZN4Tone8playNoteEff+0x3e6>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1bc4:	80 2f       	mov	r24, r16
    1bc6:	8a 95       	dec	r24
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <_ZN4Tone8playNoteEff+0x3e8>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
    1bca:	25 b1       	in	r18, 0x05	; 5
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	f1 01       	movw	r30, r2
    1bd2:	00 80       	ld	r0, Z
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <_ZN4Tone8playNoteEff+0x3fc>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <_ZN4Tone8playNoteEff+0x3f8>
    1bde:	82 2b       	or	r24, r18
    1be0:	85 b9       	out	0x05, r24	; 5
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	c7 01       	movw	r24, r14
    1bec:	b6 01       	movw	r22, r12
    1bee:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	0c f4       	brge	.+2      	; 0x1bf8 <_ZN4Tone8playNoteEff+0x41a>
    1bf6:	6a c0       	rjmp	.+212    	; 0x1ccc <_ZN4Tone8playNoteEff+0x4ee>
		__ticks = 1;
	else if (__tmp2 > 65535)
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	69 81       	ldd	r22, Y+1	; 0x01
    1c02:	7a 81       	ldd	r23, Y+2	; 0x02
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <_ZN4Tone8playNoteEff+0x434>
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <_ZN4Tone8playNoteEff+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a e7       	ldi	r20, 0x7A	; 122
    1c18:	54 e4       	ldi	r21, 0x44	; 68
    1c1a:	c5 01       	movw	r24, r10
    1c1c:	b4 01       	movw	r22, r8
    1c1e:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
    1c22:	4b 01       	movw	r8, r22
    1c24:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	53 e4       	ldi	r21, 0x43	; 67
    1c2e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1c32:	6b 01       	movw	r12, r22
    1c34:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	1c f1       	brlt	.+70     	; 0x1c8c <_ZN4Tone8playNoteEff+0x4ae>
		__ticks = 1;
	else if (__tmp > 65535)
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	c7 01       	movw	r24, r14
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	a4 f4       	brge	.+40     	; 0x1c82 <_ZN4Tone8playNoteEff+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	c5 01       	movw	r24, r10
    1c64:	b4 01       	movw	r22, r8
    1c66:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1c6a:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    1c6e:	61 15       	cp	r22, r1
    1c70:	71 05       	cpc	r23, r1
    1c72:	71 f1       	breq	.+92     	; 0x1cd0 <_ZN4Tone8playNoteEff+0x4f2>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1c74:	89 e1       	ldi	r24, 0x19	; 25
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <_ZN4Tone8playNoteEff+0x49a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	61 50       	subi	r22, 0x01	; 1
    1c7e:	71 09       	sbc	r23, r1
    1c80:	f6 cf       	rjmp	.-20     	; 0x1c6e <_ZN4Tone8playNoteEff+0x490>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	c7 01       	movw	r24, r14
    1c84:	b6 01       	movw	r22, r12
    1c86:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <_ZN4Tone8playNoteEff+0x4b2>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	cb 01       	movw	r24, r22
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <_ZN4Tone8playNoteEff+0x4b4>
    1c96:	1c c0       	rjmp	.+56     	; 0x1cd0 <_ZN4Tone8playNoteEff+0x4f2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	53 e4       	ldi	r21, 0x43	; 67
    1ca0:	c7 01       	movw	r24, r14
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	54 f4       	brge	.+20     	; 0x1cc0 <_ZN4Tone8playNoteEff+0x4e2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1cac:	69 81       	ldd	r22, Y+1	; 0x01
    1cae:	7a 81       	ldd	r23, Y+2	; 0x02
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1cb8:	cb 01       	movw	r24, r22
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <_ZN4Tone8playNoteEff+0x4dc>
    1cbe:	0b c0       	rjmp	.+22     	; 0x1cd6 <_ZN4Tone8playNoteEff+0x4f8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc0:	c7 01       	movw	r24, r14
    1cc2:	b6 01       	movw	r22, r12
    1cc4:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1cc8:	16 2f       	mov	r17, r22
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <_ZN4Tone8playNoteEff+0x4f2>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
    1ccc:	11 e0       	ldi	r17, 0x01	; 1
    1cce:	00 c0       	rjmp	.+0      	; 0x1cd0 <_ZN4Tone8playNoteEff+0x4f2>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1cd0:	81 2f       	mov	r24, r17
    1cd2:	8a 95       	dec	r24
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <_ZN4Tone8playNoteEff+0x4f4>
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    1cd6:	25 b1       	in	r18, 0x05	; 5
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	f1 01       	movw	r30, r2
    1cde:	00 80       	ld	r0, Z
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <_ZN4Tone8playNoteEff+0x508>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <_ZN4Tone8playNoteEff+0x504>
    1cea:	80 95       	com	r24
    1cec:	82 23       	and	r24, r18
    1cee:	85 b9       	out	0x05, r24	; 5
		cycles=2*duration/wavelength;
		half_period = wavelength/2;

		
		
		for (int i=0;i<cycles;i++)
    1cf0:	29 89       	ldd	r18, Y+17	; 0x11
    1cf2:	3a 89       	ldd	r19, Y+18	; 0x12
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	3a 8b       	std	Y+18, r19	; 0x12
    1cfa:	29 8b       	std	Y+17, r18	; 0x11
    1cfc:	b6 ce       	rjmp	.-660    	; 0x1a6a <_ZN4Tone8playNoteEff+0x28c>
			SPEAKER_PORT |= (1 << SPEAKER_PIN);
			_delay_us(half_period*1000);
			SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		}
	}
}
    1cfe:	62 96       	adiw	r28, 0x12	; 18
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	ff 90       	pop	r15
    1d14:	ef 90       	pop	r14
    1d16:	df 90       	pop	r13
    1d18:	cf 90       	pop	r12
    1d1a:	bf 90       	pop	r11
    1d1c:	af 90       	pop	r10
    1d1e:	9f 90       	pop	r9
    1d20:	8f 90       	pop	r8
    1d22:	7f 90       	pop	r7
    1d24:	6f 90       	pop	r6
    1d26:	5f 90       	pop	r5
    1d28:	4f 90       	pop	r4
    1d2a:	3f 90       	pop	r3
    1d2c:	2f 90       	pop	r2
    1d2e:	08 95       	ret

00001d30 <_ZN4Tone7melody1Ev>:

//Notes and their durations.

char Tone::melody1()
{  char state='0';
    1d30:	2f 92       	push	r2
    1d32:	3f 92       	push	r3
    1d34:	4f 92       	push	r4
    1d36:	5f 92       	push	r5
    1d38:	6f 92       	push	r6
    1d3a:	7f 92       	push	r7
    1d3c:	8f 92       	push	r8
    1d3e:	9f 92       	push	r9
    1d40:	af 92       	push	r10
    1d42:	bf 92       	push	r11
    1d44:	cf 92       	push	r12
    1d46:	df 92       	push	r13
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	65 97       	sbiw	r28, 0x15	; 21
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	6c 01       	movw	r12, r24
	int changing=0;
	int melody[] = {
		NOTE_G5,NOTE_G5,NOTE_G5,NOTE_G5,0
	};
    1d66:	8a e0       	ldi	r24, 0x0A	; 10
    1d68:	e8 ed       	ldi	r30, 0xD8	; 216
    1d6a:	f1 e0       	ldi	r31, 0x01	; 1
    1d6c:	de 01       	movw	r26, r28
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	01 90       	ld	r0, Z+
    1d72:	0d 92       	st	X+, r0
    1d74:	8a 95       	dec	r24
    1d76:	e1 f7       	brne	.-8      	; 0x1d70 <_ZN4Tone7melody1Ev+0x40>

	int noteDurations[] = {
		4,4,4,4,1
	};
    1d78:	8a e0       	ldi	r24, 0x0A	; 10
    1d7a:	e2 ee       	ldi	r30, 0xE2	; 226
    1d7c:	f1 e0       	ldi	r31, 0x01	; 1
    1d7e:	de 01       	movw	r26, r28
    1d80:	1b 96       	adiw	r26, 0x0b	; 11
    1d82:	01 90       	ld	r0, Z+
    1d84:	0d 92       	st	X+, r0
    1d86:	8a 95       	dec	r24
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <_ZN4Tone7melody1Ev+0x52>

//Notes and their durations.

char Tone::melody1()
{  char state='0';
	int changing=0;
    1d8a:	21 2c       	mov	r2, r1
    1d8c:	31 2c       	mov	r3, r1
}

//Notes and their durations.

char Tone::melody1()
{  char state='0';
    1d8e:	80 e3       	ldi	r24, 0x30	; 48
    1d90:	8d 8b       	std	Y+21, r24	; 0x15
    1d92:	03 c0       	rjmp	.+6      	; 0x1d9a <_ZN4Tone7melody1Ev+0x6a>
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    1d94:	22 24       	eor	r2, r2
    1d96:	23 94       	inc	r2
    1d98:	31 2c       	mov	r3, r1
		4,4,4,4,1
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
    1d9a:	21 14       	cp	r2, r1
    1d9c:	31 04       	cpc	r3, r1
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <_ZN4Tone7melody1Ev+0x72>
    1da0:	7a c0       	rjmp	.+244    	; 0x1e96 <_ZN4Tone7melody1Ev+0x166>
    1da2:	e1 2c       	mov	r14, r1
    1da4:	f1 2c       	mov	r15, r1
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    1da6:	95 e0       	ldi	r25, 0x05	; 5
    1da8:	e9 16       	cp	r14, r25
    1daa:	f1 04       	cpc	r15, r1
    1dac:	b4 f7       	brge	.-20     	; 0x1d9a <_ZN4Tone7melody1Ev+0x6a>
		{
			
			state=sc3.pressedButton();
    1dae:	8b e8       	ldi	r24, 0x8B	; 139
    1db0:	95 e0       	ldi	r25, 0x05	; 5
    1db2:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen13pressedButtonEv>
    1db6:	8d 8b       	std	Y+21, r24	; 0x15
			if (state !='0'){
    1db8:	80 33       	cpi	r24, 0x30	; 48
    1dba:	61 f7       	brne	.-40     	; 0x1d94 <_ZN4Tone7melody1Ev+0x64>
				changing=1;
				break;
			}
			
			float noteDuration = 200 / noteDurations[currentNote];
    1dbc:	87 01       	movw	r16, r14
    1dbe:	00 0f       	add	r16, r16
    1dc0:	11 1f       	adc	r17, r17
    1dc2:	e1 e0       	ldi	r30, 0x01	; 1
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	ec 0f       	add	r30, r28
    1dc8:	fd 1f       	adc	r31, r29
    1dca:	0e 0f       	add	r16, r30
    1dcc:	1f 1f       	adc	r17, r31
    1dce:	f8 01       	movw	r30, r16
    1dd0:	62 85       	ldd	r22, Z+10	; 0x0a
    1dd2:	73 85       	ldd	r23, Z+11	; 0x0b
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1ddc:	07 2e       	mov	r0, r23
    1dde:	00 0c       	add	r0, r0
    1de0:	88 0b       	sbc	r24, r24
    1de2:	99 0b       	sbc	r25, r25
    1de4:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    1de8:	2b 01       	movw	r4, r22
    1dea:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    1dec:	f8 01       	movw	r30, r16
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	07 2e       	mov	r0, r23
    1df4:	00 0c       	add	r0, r0
    1df6:	88 0b       	sbc	r24, r24
    1df8:	99 0b       	sbc	r25, r25
    1dfa:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    1dfe:	ab 01       	movw	r20, r22
    1e00:	bc 01       	movw	r22, r24
    1e02:	93 01       	movw	r18, r6
    1e04:	82 01       	movw	r16, r4
    1e06:	c6 01       	movw	r24, r12
    1e08:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*2;
    1e0c:	a3 01       	movw	r20, r6
    1e0e:	92 01       	movw	r18, r4
    1e10:	c3 01       	movw	r24, r6
    1e12:	b2 01       	movw	r22, r4
    1e14:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3>
    1e18:	4b 01       	movw	r8, r22
    1e1a:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a e7       	ldi	r20, 0x7A	; 122
    1e22:	53 e4       	ldi	r21, 0x43	; 67
    1e24:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1e28:	2b 01       	movw	r4, r22
    1e2a:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	1c f1       	brlt	.+70     	; 0x1e82 <_ZN4Tone7melody1Ev+0x152>
		__ticks = 1;
	else if (__tmp > 65535)
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	3f ef       	ldi	r19, 0xFF	; 255
    1e40:	4f e7       	ldi	r20, 0x7F	; 127
    1e42:	57 e4       	ldi	r21, 0x47	; 71
    1e44:	c3 01       	movw	r24, r6
    1e46:	b2 01       	movw	r22, r4
    1e48:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	a4 f4       	brge	.+40     	; 0x1e78 <_ZN4Tone7melody1Ev+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	c5 01       	movw	r24, r10
    1e5a:	b4 01       	movw	r22, r8
    1e5c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1e60:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    1e64:	61 15       	cp	r22, r1
    1e66:	71 05       	cpc	r23, r1
    1e68:	89 f0       	breq	.+34     	; 0x1e8c <_ZN4Tone7melody1Ev+0x15c>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1e6a:	89 e1       	ldi	r24, 0x19	; 25
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <_ZN4Tone7melody1Ev+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e72:	61 50       	subi	r22, 0x01	; 1
    1e74:	71 09       	sbc	r23, r1
    1e76:	f6 cf       	rjmp	.-20     	; 0x1e64 <_ZN4Tone7melody1Ev+0x134>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	c3 01       	movw	r24, r6
    1e7a:	b2 01       	movw	r22, r4
    1e7c:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <_ZN4Tone7melody1Ev+0x156>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	cb 01       	movw	r24, r22
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <_ZN4Tone7melody1Ev+0x158>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    1e8c:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    1e8e:	ff ef       	ldi	r31, 0xFF	; 255
    1e90:	ef 1a       	sub	r14, r31
    1e92:	ff 0a       	sbc	r15, r31
    1e94:	88 cf       	rjmp	.-240    	; 0x1da6 <_ZN4Tone7melody1Ev+0x76>
    1e96:	80 ea       	ldi	r24, 0xA0	; 160
    1e98:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <_ZN4Tone7melody1Ev+0x17a>
    1e9e:	e9 e1       	ldi	r30, 0x19	; 25
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	31 97       	sbiw	r30, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <_ZN4Tone7melody1Ev+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f8 cf       	rjmp	.-16     	; 0x1e9a <_ZN4Tone7melody1Ev+0x16a>
	}

	_delay_ms(400);
	
	return state;
}
    1eaa:	8d 89       	ldd	r24, Y+21	; 0x15
    1eac:	65 96       	adiw	r28, 0x15	; 21
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	ef 90       	pop	r14
    1ec4:	df 90       	pop	r13
    1ec6:	cf 90       	pop	r12
    1ec8:	bf 90       	pop	r11
    1eca:	af 90       	pop	r10
    1ecc:	9f 90       	pop	r9
    1ece:	8f 90       	pop	r8
    1ed0:	7f 90       	pop	r7
    1ed2:	6f 90       	pop	r6
    1ed4:	5f 90       	pop	r5
    1ed6:	4f 90       	pop	r4
    1ed8:	3f 90       	pop	r3
    1eda:	2f 90       	pop	r2
    1edc:	08 95       	ret

00001ede <_ZN4Tone7melody2Ev>:


char Tone:: melody2()
{  
    1ede:	2f 92       	push	r2
    1ee0:	3f 92       	push	r3
    1ee2:	4f 92       	push	r4
    1ee4:	5f 92       	push	r5
    1ee6:	6f 92       	push	r6
    1ee8:	7f 92       	push	r7
    1eea:	8f 92       	push	r8
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	c1 54       	subi	r28, 0x41	; 65
    1f08:	d1 40       	sbci	r29, 0x01	; 1
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	6c 01       	movw	r12, r24
		NOTE_A4, 0, NOTE_A4, NOTE_A4,
		NOTE_C5, 0, NOTE_AS4, NOTE_A4,
		/*NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5,
		NOTE_G4,0, NOTE_G4, NOTE_AS5,
		NOTE_A5, NOTE_AS5, NOTE_A5, NOTE_AS5*/ };
    1f16:	80 ea       	ldi	r24, 0xA0	; 160
    1f18:	ec ee       	ldi	r30, 0xEC	; 236
    1f1a:	f1 e0       	ldi	r31, 0x01	; 1
    1f1c:	de 01       	movw	r26, r28
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	01 90       	ld	r0, Z+
    1f22:	0d 92       	st	X+, r0
    1f24:	8a 95       	dec	r24
    1f26:	e1 f7       	brne	.-8      	; 0x1f20 <_ZN4Tone7melody2Ev+0x42>
		4,4,4,4,
		4,4,4,4,
		/*4,4,4,4,
		4,4,4,4,
		4,4,4,4,
		4,4,4,4*/};
    1f28:	80 ea       	ldi	r24, 0xA0	; 160
    1f2a:	ec e8       	ldi	r30, 0x8C	; 140
    1f2c:	f2 e0       	ldi	r31, 0x02	; 2
    1f2e:	de 01       	movw	r26, r28
    1f30:	af 55       	subi	r26, 0x5F	; 95
    1f32:	bf 4f       	sbci	r27, 0xFF	; 255
    1f34:	01 90       	ld	r0, Z+
    1f36:	0d 92       	st	X+, r0
    1f38:	8a 95       	dec	r24
    1f3a:	e1 f7       	brne	.-8      	; 0x1f34 <_ZN4Tone7melody2Ev+0x56>

char Tone:: melody2()
{  
	
	char state='0';
	int changing=0;
    1f3c:	21 2c       	mov	r2, r1
    1f3e:	31 2c       	mov	r3, r1


char Tone:: melody2()
{  
	
	char state='0';
    1f40:	80 e3       	ldi	r24, 0x30	; 48
    1f42:	cf 5b       	subi	r28, 0xBF	; 191
    1f44:	de 4f       	sbci	r29, 0xFE	; 254
    1f46:	88 83       	st	Y, r24
    1f48:	c1 54       	subi	r28, 0x41	; 65
    1f4a:	d1 40       	sbci	r29, 0x01	; 1
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <_ZN4Tone7melody2Ev+0x76>
	{	
		for (int currentNote=0; currentNote<length;currentNote++)
		{   
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    1f4e:	22 24       	eor	r2, r2
    1f50:	23 94       	inc	r2
    1f52:	31 2c       	mov	r3, r1
		4,4,4,4,
		4,4,4,4*/};
		
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
    1f54:	21 14       	cp	r2, r1
    1f56:	31 04       	cpc	r3, r1
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <_ZN4Tone7melody2Ev+0x7e>
    1f5a:	84 c0       	rjmp	.+264    	; 0x2064 <_ZN4Tone7melody2Ev+0x186>
    1f5c:	e1 2c       	mov	r14, r1
    1f5e:	f1 2c       	mov	r15, r1
	{	
		for (int currentNote=0; currentNote<length;currentNote++)
    1f60:	80 e5       	ldi	r24, 0x50	; 80
    1f62:	e8 16       	cp	r14, r24
    1f64:	f1 04       	cpc	r15, r1
    1f66:	b4 f7       	brge	.-20     	; 0x1f54 <_ZN4Tone7melody2Ev+0x76>
		{   
			state=sc3.pressedButton();
    1f68:	8b e8       	ldi	r24, 0x8B	; 139
    1f6a:	95 e0       	ldi	r25, 0x05	; 5
    1f6c:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen13pressedButtonEv>
    1f70:	cf 5b       	subi	r28, 0xBF	; 191
    1f72:	de 4f       	sbci	r29, 0xFE	; 254
    1f74:	88 83       	st	Y, r24
    1f76:	c1 54       	subi	r28, 0x41	; 65
    1f78:	d1 40       	sbci	r29, 0x01	; 1
			if (state !='0'){
    1f7a:	80 33       	cpi	r24, 0x30	; 48
    1f7c:	41 f7       	brne	.-48     	; 0x1f4e <_ZN4Tone7melody2Ev+0x70>
				changing=1;
				break;
			}

			float noteDuration = 375 / noteDurations[currentNote];
    1f7e:	87 01       	movw	r16, r14
    1f80:	00 0f       	add	r16, r16
    1f82:	11 1f       	adc	r17, r17
    1f84:	e1 ea       	ldi	r30, 0xA1	; 161
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	ec 0f       	add	r30, r28
    1f8a:	fd 1f       	adc	r31, r29
    1f8c:	e0 0f       	add	r30, r16
    1f8e:	f1 1f       	adc	r31, r17
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	87 e7       	ldi	r24, 0x77	; 119
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    1f9c:	07 2e       	mov	r0, r23
    1f9e:	00 0c       	add	r0, r0
    1fa0:	88 0b       	sbc	r24, r24
    1fa2:	99 0b       	sbc	r25, r25
    1fa4:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    1fa8:	2b 01       	movw	r4, r22
    1faa:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    1fac:	e1 e0       	ldi	r30, 0x01	; 1
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	ec 0f       	add	r30, r28
    1fb2:	fd 1f       	adc	r31, r29
    1fb4:	e0 0f       	add	r30, r16
    1fb6:	f1 1f       	adc	r31, r17
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	07 2e       	mov	r0, r23
    1fbe:	00 0c       	add	r0, r0
    1fc0:	88 0b       	sbc	r24, r24
    1fc2:	99 0b       	sbc	r25, r25
    1fc4:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    1fc8:	ab 01       	movw	r20, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	93 01       	movw	r18, r6
    1fce:	82 01       	movw	r16, r4
    1fd0:	c6 01       	movw	r24, r12
    1fd2:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
    1fd6:	26 e6       	ldi	r18, 0x66	; 102
    1fd8:	36 e6       	ldi	r19, 0x66	; 102
    1fda:	46 ea       	ldi	r20, 0xA6	; 166
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	c3 01       	movw	r24, r6
    1fe0:	b2 01       	movw	r22, r4
    1fe2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1fe6:	4b 01       	movw	r8, r22
    1fe8:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4a e7       	ldi	r20, 0x7A	; 122
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    1ff6:	2b 01       	movw	r4, r22
    1ff8:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    2006:	88 23       	and	r24, r24
    2008:	1c f1       	brlt	.+70     	; 0x2050 <_ZN4Tone7melody2Ev+0x172>
		__ticks = 1;
	else if (__tmp > 65535)
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	c3 01       	movw	r24, r6
    2014:	b2 01       	movw	r22, r4
    2016:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    201a:	18 16       	cp	r1, r24
    201c:	a4 f4       	brge	.+40     	; 0x2046 <_ZN4Tone7melody2Ev+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	c5 01       	movw	r24, r10
    2028:	b4 01       	movw	r22, r8
    202a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    202e:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    2032:	61 15       	cp	r22, r1
    2034:	71 05       	cpc	r23, r1
    2036:	89 f0       	breq	.+34     	; 0x205a <_ZN4Tone7melody2Ev+0x17c>
    2038:	89 e1       	ldi	r24, 0x19	; 25
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <_ZN4Tone7melody2Ev+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	61 50       	subi	r22, 0x01	; 1
    2042:	71 09       	sbc	r23, r1
    2044:	f6 cf       	rjmp	.-20     	; 0x2032 <_ZN4Tone7melody2Ev+0x154>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	c3 01       	movw	r24, r6
    2048:	b2 01       	movw	r22, r4
    204a:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <_ZN4Tone7melody2Ev+0x176>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    2050:	61 e0       	ldi	r22, 0x01	; 1
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	cb 01       	movw	r24, r22
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <_ZN4Tone7melody2Ev+0x178>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    205a:	15 b8       	out	0x05, r1	; 5
		
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
	{	
		for (int currentNote=0; currentNote<length;currentNote++)
    205c:	8f ef       	ldi	r24, 0xFF	; 255
    205e:	e8 1a       	sub	r14, r24
    2060:	f8 0a       	sbc	r15, r24
    2062:	7e cf       	rjmp	.-260    	; 0x1f60 <_ZN4Tone7melody2Ev+0x82>
    2064:	80 ea       	ldi	r24, 0xA0	; 160
    2066:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	31 f0       	breq	.+12     	; 0x2078 <_ZN4Tone7melody2Ev+0x19a>
    206c:	e9 e1       	ldi	r30, 0x19	; 25
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <_ZN4Tone7melody2Ev+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f8 cf       	rjmp	.-16     	; 0x2068 <_ZN4Tone7melody2Ev+0x18a>
		
		
	}
	_delay_ms(400);
	return state;
}
    2078:	cf 5b       	subi	r28, 0xBF	; 191
    207a:	de 4f       	sbci	r29, 0xFE	; 254
    207c:	88 81       	ld	r24, Y
    207e:	c1 54       	subi	r28, 0x41	; 65
    2080:	d1 40       	sbci	r29, 0x01	; 1
    2082:	cf 5b       	subi	r28, 0xBF	; 191
    2084:	de 4f       	sbci	r29, 0xFE	; 254
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	df 90       	pop	r13
    209e:	cf 90       	pop	r12
    20a0:	bf 90       	pop	r11
    20a2:	af 90       	pop	r10
    20a4:	9f 90       	pop	r9
    20a6:	8f 90       	pop	r8
    20a8:	7f 90       	pop	r7
    20aa:	6f 90       	pop	r6
    20ac:	5f 90       	pop	r5
    20ae:	4f 90       	pop	r4
    20b0:	3f 90       	pop	r3
    20b2:	2f 90       	pop	r2
    20b4:	08 95       	ret

000020b6 <_ZN4Tone7melody3Ev>:

char Tone:: melody3()
{   char state='0';
    20b6:	2f 92       	push	r2
    20b8:	3f 92       	push	r3
    20ba:	4f 92       	push	r4
    20bc:	5f 92       	push	r5
    20be:	6f 92       	push	r6
    20c0:	7f 92       	push	r7
    20c2:	8f 92       	push	r8
    20c4:	9f 92       	push	r9
    20c6:	af 92       	push	r10
    20c8:	bf 92       	push	r11
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	c1 59       	subi	r28, 0x91	; 145
    20e0:	d1 09       	sbc	r29, r1
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	6c 01       	movw	r12, r24
		NOTE_E5, NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_B4, NOTE_C5, NOTE_C5, 0,
		NOTE_D5, NOTE_E5, NOTE_A4, 0,
		NOTE_A4, NOTE_C5, NOTE_B4, NOTE_B4, 0,
		NOTE_C5, NOTE_A4, NOTE_B4, */
	};
    20ee:	88 e4       	ldi	r24, 0x48	; 72
    20f0:	ec e2       	ldi	r30, 0x2C	; 44
    20f2:	f3 e0       	ldi	r31, 0x03	; 3
    20f4:	de 01       	movw	r26, r28
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	01 90       	ld	r0, Z+
    20fa:	0d 92       	st	X+, r0
    20fc:	8a 95       	dec	r24
    20fe:	e1 f7       	brne	.-8      	; 0x20f8 <_ZN4Tone7melody3Ev+0x42>
		8, 8, 8, 4, 8,
		8, 8, 4, 8, 8,
		4, 8, 4, 8,
		8, 8, 4, 8, 8,
		8, 8, 2 */
	};
    2100:	88 e4       	ldi	r24, 0x48	; 72
    2102:	e4 e7       	ldi	r30, 0x74	; 116
    2104:	f3 e0       	ldi	r31, 0x03	; 3
    2106:	de 01       	movw	r26, r28
    2108:	a7 5b       	subi	r26, 0xB7	; 183
    210a:	bf 4f       	sbci	r27, 0xFF	; 255
    210c:	01 90       	ld	r0, Z+
    210e:	0d 92       	st	X+, r0
    2110:	8a 95       	dec	r24
    2112:	e1 f7       	brne	.-8      	; 0x210c <_ZN4Tone7melody3Ev+0x56>
	return state;
}

char Tone:: melody3()
{   char state='0';
	int changing=0;
    2114:	21 2c       	mov	r2, r1
    2116:	31 2c       	mov	r3, r1
	_delay_ms(400);
	return state;
}

char Tone:: melody3()
{   char state='0';
    2118:	80 e3       	ldi	r24, 0x30	; 48
    211a:	cf 56       	subi	r28, 0x6F	; 111
    211c:	df 4f       	sbci	r29, 0xFF	; 255
    211e:	88 83       	st	Y, r24
    2120:	c1 59       	subi	r28, 0x91	; 145
    2122:	d0 40       	sbci	r29, 0x00	; 0
    2124:	03 c0       	rjmp	.+6      	; 0x212c <_ZN4Tone7melody3Ev+0x76>
	{ 
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    2126:	22 24       	eor	r2, r2
    2128:	23 94       	inc	r2
    212a:	31 2c       	mov	r3, r1
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	while (changing==0)
    212c:	21 14       	cp	r2, r1
    212e:	31 04       	cpc	r3, r1
    2130:	09 f0       	breq	.+2      	; 0x2134 <_ZN4Tone7melody3Ev+0x7e>
    2132:	84 c0       	rjmp	.+264    	; 0x223c <_ZN4Tone7melody3Ev+0x186>
    2134:	e1 2c       	mov	r14, r1
    2136:	f1 2c       	mov	r15, r1
	{ 
		for (int currentNote=0; currentNote<length;currentNote++)
    2138:	84 e2       	ldi	r24, 0x24	; 36
    213a:	e8 16       	cp	r14, r24
    213c:	f1 04       	cpc	r15, r1
    213e:	b4 f7       	brge	.-20     	; 0x212c <_ZN4Tone7melody3Ev+0x76>
		{
			state=sc3.pressedButton();
    2140:	8b e8       	ldi	r24, 0x8B	; 139
    2142:	95 e0       	ldi	r25, 0x05	; 5
    2144:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen13pressedButtonEv>
    2148:	cf 56       	subi	r28, 0x6F	; 111
    214a:	df 4f       	sbci	r29, 0xFF	; 255
    214c:	88 83       	st	Y, r24
    214e:	c1 59       	subi	r28, 0x91	; 145
    2150:	d0 40       	sbci	r29, 0x00	; 0
			if (state !='0'){
    2152:	80 33       	cpi	r24, 0x30	; 48
    2154:	41 f7       	brne	.-48     	; 0x2126 <_ZN4Tone7melody3Ev+0x70>
				changing=1;
				break;
			}
			
			float noteDuration = 375 / noteDurations[currentNote];
    2156:	87 01       	movw	r16, r14
    2158:	00 0f       	add	r16, r16
    215a:	11 1f       	adc	r17, r17
    215c:	e9 e4       	ldi	r30, 0x49	; 73
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	ec 0f       	add	r30, r28
    2162:	fd 1f       	adc	r31, r29
    2164:	e0 0f       	add	r30, r16
    2166:	f1 1f       	adc	r31, r17
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	87 e7       	ldi	r24, 0x77	; 119
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    2174:	07 2e       	mov	r0, r23
    2176:	00 0c       	add	r0, r0
    2178:	88 0b       	sbc	r24, r24
    217a:	99 0b       	sbc	r25, r25
    217c:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    2180:	2b 01       	movw	r4, r22
    2182:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    2184:	e1 e0       	ldi	r30, 0x01	; 1
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	ec 0f       	add	r30, r28
    218a:	fd 1f       	adc	r31, r29
    218c:	e0 0f       	add	r30, r16
    218e:	f1 1f       	adc	r31, r17
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	07 2e       	mov	r0, r23
    2196:	00 0c       	add	r0, r0
    2198:	88 0b       	sbc	r24, r24
    219a:	99 0b       	sbc	r25, r25
    219c:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    21a0:	ab 01       	movw	r20, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	93 01       	movw	r18, r6
    21a6:	82 01       	movw	r16, r4
    21a8:	c6 01       	movw	r24, r12
    21aa:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
    21ae:	26 e6       	ldi	r18, 0x66	; 102
    21b0:	36 e6       	ldi	r19, 0x66	; 102
    21b2:	46 ea       	ldi	r20, 0xA6	; 166
    21b4:	5f e3       	ldi	r21, 0x3F	; 63
    21b6:	c3 01       	movw	r24, r6
    21b8:	b2 01       	movw	r22, r4
    21ba:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    21be:	4b 01       	movw	r8, r22
    21c0:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a e7       	ldi	r20, 0x7A	; 122
    21c8:	53 e4       	ldi	r21, 0x43	; 67
    21ca:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    21ce:	2b 01       	movw	r4, r22
    21d0:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    21de:	88 23       	and	r24, r24
    21e0:	1c f1       	brlt	.+70     	; 0x2228 <_ZN4Tone7melody3Ev+0x172>
		__ticks = 1;
	else if (__tmp > 65535)
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	c3 01       	movw	r24, r6
    21ec:	b2 01       	movw	r22, r4
    21ee:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	a4 f4       	brge	.+40     	; 0x221e <_ZN4Tone7melody3Ev+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	c5 01       	movw	r24, r10
    2200:	b4 01       	movw	r22, r8
    2202:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    2206:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    220a:	61 15       	cp	r22, r1
    220c:	71 05       	cpc	r23, r1
    220e:	89 f0       	breq	.+34     	; 0x2232 <_ZN4Tone7melody3Ev+0x17c>
    2210:	89 e1       	ldi	r24, 0x19	; 25
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <_ZN4Tone7melody3Ev+0x15e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	61 50       	subi	r22, 0x01	; 1
    221a:	71 09       	sbc	r23, r1
    221c:	f6 cf       	rjmp	.-20     	; 0x220a <_ZN4Tone7melody3Ev+0x154>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	c3 01       	movw	r24, r6
    2220:	b2 01       	movw	r22, r4
    2222:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    2226:	02 c0       	rjmp	.+4      	; 0x222c <_ZN4Tone7melody3Ev+0x176>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    2228:	61 e0       	ldi	r22, 0x01	; 1
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	cb 01       	movw	r24, r22
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <_ZN4Tone7melody3Ev+0x178>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    2232:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	

	while (changing==0)
	{ 
		for (int currentNote=0; currentNote<length;currentNote++)
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	e8 1a       	sub	r14, r24
    2238:	f8 0a       	sbc	r15, r24
    223a:	7e cf       	rjmp	.-260    	; 0x2138 <_ZN4Tone7melody3Ev+0x82>
    223c:	80 ea       	ldi	r24, 0xA0	; 160
    223e:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	31 f0       	breq	.+12     	; 0x2250 <_ZN4Tone7melody3Ev+0x19a>
    2244:	e9 e1       	ldi	r30, 0x19	; 25
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	31 97       	sbiw	r30, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <_ZN4Tone7melody3Ev+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f8 cf       	rjmp	.-16     	; 0x2240 <_ZN4Tone7melody3Ev+0x18a>
		
	}
	
	_delay_ms(400);
	return state;
}
    2250:	cf 56       	subi	r28, 0x6F	; 111
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	88 81       	ld	r24, Y
    2256:	c1 59       	subi	r28, 0x91	; 145
    2258:	d0 40       	sbci	r29, 0x00	; 0
    225a:	cf 56       	subi	r28, 0x6F	; 111
    225c:	df 4f       	sbci	r29, 0xFF	; 255
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	bf 90       	pop	r11
    227a:	af 90       	pop	r10
    227c:	9f 90       	pop	r9
    227e:	8f 90       	pop	r8
    2280:	7f 90       	pop	r7
    2282:	6f 90       	pop	r6
    2284:	5f 90       	pop	r5
    2286:	4f 90       	pop	r4
    2288:	3f 90       	pop	r3
    228a:	2f 90       	pop	r2
    228c:	08 95       	ret

0000228e <_ZN4Tone7melody4Ev>:

char Tone:: melody4()
{   char state='0';
    228e:	2f 92       	push	r2
    2290:	3f 92       	push	r3
    2292:	4f 92       	push	r4
    2294:	5f 92       	push	r5
    2296:	6f 92       	push	r6
    2298:	7f 92       	push	r7
    229a:	8f 92       	push	r8
    229c:	9f 92       	push	r9
    229e:	af 92       	push	r10
    22a0:	bf 92       	push	r11
    22a2:	cf 92       	push	r12
    22a4:	df 92       	push	r13
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	c5 55       	subi	r28, 0x55	; 85
    22b8:	d1 09       	sbc	r29, r1
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	6c 01       	movw	r12, r24
		NOTE_F4,NOTE_AS3,NOTE_DS4,NOTE_D4,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_GS3,NOTE_F3,NOTE_GS3,NOTE_G3,
		NOTE_C4,NOTE_F3 */
	};
    22c6:	8a e2       	ldi	r24, 0x2A	; 42
    22c8:	ec eb       	ldi	r30, 0xBC	; 188
    22ca:	f3 e0       	ldi	r31, 0x03	; 3
    22cc:	de 01       	movw	r26, r28
    22ce:	11 96       	adiw	r26, 0x01	; 1
    22d0:	01 90       	ld	r0, Z+
    22d2:	0d 92       	st	X+, r0
    22d4:	8a 95       	dec	r24
    22d6:	e1 f7       	brne	.-8      	; 0x22d0 <_ZN4Tone7melody4Ev+0x42>
		6,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12,24,24,12,
		12*/
	};
    22d8:	8a e2       	ldi	r24, 0x2A	; 42
    22da:	e6 ee       	ldi	r30, 0xE6	; 230
    22dc:	f3 e0       	ldi	r31, 0x03	; 3
    22de:	de 01       	movw	r26, r28
    22e0:	9b 96       	adiw	r26, 0x2b	; 43
    22e2:	01 90       	ld	r0, Z+
    22e4:	0d 92       	st	X+, r0
    22e6:	8a 95       	dec	r24
    22e8:	e1 f7       	brne	.-8      	; 0x22e2 <_ZN4Tone7melody4Ev+0x54>
	return state;
}

char Tone:: melody4()
{   char state='0';
	int changing=0;
    22ea:	21 2c       	mov	r2, r1
    22ec:	31 2c       	mov	r3, r1
	_delay_ms(400);
	return state;
}

char Tone:: melody4()
{   char state='0';
    22ee:	80 e3       	ldi	r24, 0x30	; 48
    22f0:	66 96       	adiw	r28, 0x16	; 22
    22f2:	8f af       	std	Y+63, r24	; 0x3f
    22f4:	66 97       	sbiw	r28, 0x16	; 22
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <_ZN4Tone7melody4Ev+0x70>
		
		for (int currentNote=0; currentNote<length;currentNote++)
		{
			state=sc3.pressedButton();
			if (state !='0'){
				changing=1;
    22f8:	22 24       	eor	r2, r2
    22fa:	23 94       	inc	r2
    22fc:	31 2c       	mov	r3, r1
		12*/
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
    22fe:	21 14       	cp	r2, r1
    2300:	31 04       	cpc	r3, r1
    2302:	09 f0       	breq	.+2      	; 0x2306 <_ZN4Tone7melody4Ev+0x78>
    2304:	7e c0       	rjmp	.+252    	; 0x2402 <_ZN4Tone7melody4Ev+0x174>
    2306:	e1 2c       	mov	r14, r1
    2308:	f1 2c       	mov	r15, r1
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    230a:	95 e1       	ldi	r25, 0x15	; 21
    230c:	e9 16       	cp	r14, r25
    230e:	f1 04       	cpc	r15, r1
    2310:	b4 f7       	brge	.-20     	; 0x22fe <_ZN4Tone7melody4Ev+0x70>
		{
			state=sc3.pressedButton();
    2312:	8b e8       	ldi	r24, 0x8B	; 139
    2314:	95 e0       	ldi	r25, 0x05	; 5
    2316:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen13pressedButtonEv>
    231a:	66 96       	adiw	r28, 0x16	; 22
    231c:	8f af       	std	Y+63, r24	; 0x3f
    231e:	66 97       	sbiw	r28, 0x16	; 22
			if (state !='0'){
    2320:	80 33       	cpi	r24, 0x30	; 48
    2322:	51 f7       	brne	.-44     	; 0x22f8 <_ZN4Tone7melody4Ev+0x6a>
				changing=1;
				break;
			}
			
			float noteDuration = 1375 / noteDurations[currentNote];
    2324:	87 01       	movw	r16, r14
    2326:	00 0f       	add	r16, r16
    2328:	11 1f       	adc	r17, r17
    232a:	e1 e0       	ldi	r30, 0x01	; 1
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	ec 0f       	add	r30, r28
    2330:	fd 1f       	adc	r31, r29
    2332:	0e 0f       	add	r16, r30
    2334:	1f 1f       	adc	r17, r31
    2336:	f8 01       	movw	r30, r16
    2338:	62 a5       	ldd	r22, Z+42	; 0x2a
    233a:	73 a5       	ldd	r23, Z+43	; 0x2b
    233c:	8f e5       	ldi	r24, 0x5F	; 95
    233e:	95 e0       	ldi	r25, 0x05	; 5
    2340:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    2344:	07 2e       	mov	r0, r23
    2346:	00 0c       	add	r0, r0
    2348:	88 0b       	sbc	r24, r24
    234a:	99 0b       	sbc	r25, r25
    234c:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    2350:	2b 01       	movw	r4, r22
    2352:	3c 01       	movw	r6, r24
			playNote(melody[currentNote],noteDuration);
    2354:	f8 01       	movw	r30, r16
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	07 2e       	mov	r0, r23
    235c:	00 0c       	add	r0, r0
    235e:	88 0b       	sbc	r24, r24
    2360:	99 0b       	sbc	r25, r25
    2362:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    2366:	ab 01       	movw	r20, r22
    2368:	bc 01       	movw	r22, r24
    236a:	93 01       	movw	r18, r6
    236c:	82 01       	movw	r16, r4
    236e:	c6 01       	movw	r24, r12
    2370:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN4Tone8playNoteEff>
			float pauseBetweenNotes= noteDuration*1.30;
    2374:	26 e6       	ldi	r18, 0x66	; 102
    2376:	36 e6       	ldi	r19, 0x66	; 102
    2378:	46 ea       	ldi	r20, 0xA6	; 166
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	c3 01       	movw	r24, r6
    237e:	b2 01       	movw	r22, r4
    2380:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    2384:	4b 01       	movw	r8, r22
    2386:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	53 e4       	ldi	r21, 0x43	; 67
    2390:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    2394:	2b 01       	movw	r4, r22
    2396:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	1c f1       	brlt	.+70     	; 0x23ee <_ZN4Tone7melody4Ev+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	c3 01       	movw	r24, r6
    23b2:	b2 01       	movw	r22, r4
    23b4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	a4 f4       	brge	.+40     	; 0x23e4 <_ZN4Tone7melody4Ev+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	c5 01       	movw	r24, r10
    23c6:	b4 01       	movw	r22, r8
    23c8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    23cc:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    23d0:	61 15       	cp	r22, r1
    23d2:	71 05       	cpc	r23, r1
    23d4:	89 f0       	breq	.+34     	; 0x23f8 <_ZN4Tone7melody4Ev+0x16a>
    23d6:	89 e1       	ldi	r24, 0x19	; 25
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <_ZN4Tone7melody4Ev+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	61 50       	subi	r22, 0x01	; 1
    23e0:	71 09       	sbc	r23, r1
    23e2:	f6 cf       	rjmp	.-20     	; 0x23d0 <_ZN4Tone7melody4Ev+0x142>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e4:	c3 01       	movw	r24, r6
    23e6:	b2 01       	movw	r22, r4
    23e8:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <_ZN4Tone7melody4Ev+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	cb 01       	movw	r24, r22
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <_ZN4Tone7melody4Ev+0x166>
			_delay_ms (pauseBetweenNotes);
			SPEAKER_PORT=0;
    23f8:	15 b8       	out	0x05, r1	; 5
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);
	
	while (changing==0)
	{
		
		for (int currentNote=0; currentNote<length;currentNote++)
    23fa:	ff ef       	ldi	r31, 0xFF	; 255
    23fc:	ef 1a       	sub	r14, r31
    23fe:	ff 0a       	sbc	r15, r31
    2400:	84 cf       	rjmp	.-248    	; 0x230a <_ZN4Tone7melody4Ev+0x7c>
		}
		
	}
	
	return state;
}
    2402:	66 96       	adiw	r28, 0x16	; 22
    2404:	8f ad       	ldd	r24, Y+63	; 0x3f
    2406:	66 97       	sbiw	r28, 0x16	; 22
    2408:	cb 5a       	subi	r28, 0xAB	; 171
    240a:	df 4f       	sbci	r29, 0xFF	; 255
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	bf 90       	pop	r11
    2428:	af 90       	pop	r10
    242a:	9f 90       	pop	r9
    242c:	8f 90       	pop	r8
    242e:	7f 90       	pop	r7
    2430:	6f 90       	pop	r6
    2432:	5f 90       	pop	r5
    2434:	4f 90       	pop	r4
    2436:	3f 90       	pop	r3
    2438:	2f 90       	pop	r2
    243a:	08 95       	ret

0000243c <_ZN4Tone7melody5Ev>:


char Tone:: melody5()
{  char state='0';
    243c:	2f 92       	push	r2
    243e:	3f 92       	push	r3
    2440:	4f 92       	push	r4
    2442:	5f 92       	push	r5
    2444:	6f 92       	push	r6
    2446:	7f 92       	push	r7
    2448:	8f 92       	push	r8
    244a:	9f 92       	push	r9
    244c:	af 92       	push	r10
    244e:	bf 92       	push	r11
    2450:	cf 92       	push	r12
    2452:	df 92       	push	r13
    2454:	ef 92       	push	r14
    2456:	ff 92       	push	r15
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	c9 57       	subi	r28, 0x79	; 121
    2466:	d1 09       	sbc	r29, r1
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	6c 01       	movw	r12, r24
		0,NOTE_C5,NOTE_D5,NOTE_DS5,
		NOTE_DS5,NOTE_F5,NOTE_D5,NOTE_D5,
		NOTE_DS5,NOTE_C5,NOTE_C5,NOTE_D5,
		NOTE_B4,NOTE_GS4,NOTE_G4,NOTE_C5 */
		
	};
    2474:	8c e3       	ldi	r24, 0x3C	; 60
    2476:	e0 e1       	ldi	r30, 0x10	; 16
    2478:	f4 e0       	ldi	r31, 0x04	; 4
    247a:	de 01       	movw	r26, r28
    247c:	11 96       	adiw	r26, 0x01	; 1
    247e:	01 90       	ld	r0, Z+
    2480:	0d 92       	st	X+, r0
    2482:	8a 95       	dec	r24
    2484:	e1 f7       	brne	.-8      	; 0x247e <_ZN4Tone7melody5Ev+0x42>
		12,12,6,6,
		12,24,24,12,
		24,24,12,24,
		24,12,24,24,
		12,24,24,3*/
	};
    2486:	8c e3       	ldi	r24, 0x3C	; 60
    2488:	ec e4       	ldi	r30, 0x4C	; 76
    248a:	f4 e0       	ldi	r31, 0x04	; 4
    248c:	de 01       	movw	r26, r28
    248e:	dd 96       	adiw	r26, 0x3d	; 61
    2490:	01 90       	ld	r0, Z+
    2492:	0d 92       	st	X+, r0
    2494:	8a 95       	dec	r24
    2496:	e1 f7       	brne	.-8      	; 0x2490 <_ZN4Tone7melody5Ev+0x54>
}


char Tone:: melody5()
{  char state='0';
	int changing=0;
    2498:	21 2c       	mov	r2, r1
    249a:	31 2c       	mov	r3, r1
	return state;
}


char Tone:: melody5()
{  char state='0';
    249c:	80 e3       	ldi	r24, 0x30	; 48
    249e:	ea 96       	adiw	r28, 0x3a	; 58
    24a0:	8f af       	std	Y+63, r24	; 0x3f
    24a2:	ea 97       	sbiw	r28, 0x3a	; 58
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <_ZN4Tone7melody5Ev+0x70>
	{
			for (int currentNote=0; currentNote<length;currentNote++)
			{
				state=sc3.pressedButton();
				if (state !='0'){
					changing=1;
    24a6:	22 24       	eor	r2, r2
    24a8:	23 94       	inc	r2
    24aa:	31 2c       	mov	r3, r1
		12,24,24,3*/
	};
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
    24ac:	21 14       	cp	r2, r1
    24ae:	31 04       	cpc	r3, r1
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <_ZN4Tone7melody5Ev+0x78>
    24b2:	7e c0       	rjmp	.+252    	; 0x25b0 <_ZN4Tone7melody5Ev+0x174>
    24b4:	e1 2c       	mov	r14, r1
    24b6:	f1 2c       	mov	r15, r1
	{
			for (int currentNote=0; currentNote<length;currentNote++)
    24b8:	9e e1       	ldi	r25, 0x1E	; 30
    24ba:	e9 16       	cp	r14, r25
    24bc:	f1 04       	cpc	r15, r1
    24be:	b4 f7       	brge	.-20     	; 0x24ac <_ZN4Tone7melody5Ev+0x70>
			{
				state=sc3.pressedButton();
    24c0:	8b e8       	ldi	r24, 0x8B	; 139
    24c2:	95 e0       	ldi	r25, 0x05	; 5
    24c4:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN6Screen13pressedButtonEv>
    24c8:	ea 96       	adiw	r28, 0x3a	; 58
    24ca:	8f af       	std	Y+63, r24	; 0x3f
    24cc:	ea 97       	sbiw	r28, 0x3a	; 58
				if (state !='0'){
    24ce:	80 33       	cpi	r24, 0x30	; 48
    24d0:	51 f7       	brne	.-44     	; 0x24a6 <_ZN4Tone7melody5Ev+0x6a>
					changing=1;
					break;
				}
				
				float noteDuration = 375*3 / noteDurations[currentNote];
    24d2:	87 01       	movw	r16, r14
    24d4:	00 0f       	add	r16, r16
    24d6:	11 1f       	adc	r17, r17
    24d8:	e1 e0       	ldi	r30, 0x01	; 1
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	ec 0f       	add	r30, r28
    24de:	fd 1f       	adc	r31, r29
    24e0:	0e 0f       	add	r16, r30
    24e2:	1f 1f       	adc	r17, r31
    24e4:	f8 01       	movw	r30, r16
    24e6:	64 ad       	ldd	r22, Z+60	; 0x3c
    24e8:	75 ad       	ldd	r23, Z+61	; 0x3d
    24ea:	85 e6       	ldi	r24, 0x65	; 101
    24ec:	94 e0       	ldi	r25, 0x04	; 4
    24ee:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <__divmodhi4>
    24f2:	07 2e       	mov	r0, r23
    24f4:	00 0c       	add	r0, r0
    24f6:	88 0b       	sbc	r24, r24
    24f8:	99 0b       	sbc	r25, r25
    24fa:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    24fe:	2b 01       	movw	r4, r22
    2500:	3c 01       	movw	r6, r24
				playNote(melody[currentNote],noteDuration);
    2502:	f8 01       	movw	r30, r16
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	07 2e       	mov	r0, r23
    250a:	00 0c       	add	r0, r0
    250c:	88 0b       	sbc	r24, r24
    250e:	99 0b       	sbc	r25, r25
    2510:	0e 94 3e 14 	call	0x287c	; 0x287c <__floatsisf>
    2514:	ab 01       	movw	r20, r22
    2516:	bc 01       	movw	r22, r24
    2518:	93 01       	movw	r18, r6
    251a:	82 01       	movw	r16, r4
    251c:	c6 01       	movw	r24, r12
    251e:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN4Tone8playNoteEff>
				float pauseBetweenNotes= noteDuration*1.30;
    2522:	26 e6       	ldi	r18, 0x66	; 102
    2524:	36 e6       	ldi	r19, 0x66	; 102
    2526:	46 ea       	ldi	r20, 0xA6	; 166
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	c3 01       	movw	r24, r6
    252c:	b2 01       	movw	r22, r4
    252e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    2532:	4b 01       	movw	r8, r22
    2534:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a e7       	ldi	r20, 0x7A	; 122
    253c:	53 e4       	ldi	r21, 0x43	; 67
    253e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    2542:	2b 01       	movw	r4, r22
    2544:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 8f 13 	call	0x271e	; 0x271e <__cmpsf2>
    2552:	88 23       	and	r24, r24
    2554:	1c f1       	brlt	.+70     	; 0x259c <_ZN4Tone7melody5Ev+0x160>
		__ticks = 1;
	else if (__tmp > 65535)
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	c3 01       	movw	r24, r6
    2560:	b2 01       	movw	r22, r4
    2562:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__gesf2>
    2566:	18 16       	cp	r1, r24
    2568:	a4 f4       	brge	.+40     	; 0x2592 <_ZN4Tone7melody5Ev+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	c5 01       	movw	r24, r10
    2574:	b4 01       	movw	r22, r8
    2576:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__mulsf3>
    257a:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
		while(__ticks)
    257e:	61 15       	cp	r22, r1
    2580:	71 05       	cpc	r23, r1
    2582:	89 f0       	breq	.+34     	; 0x25a6 <_ZN4Tone7melody5Ev+0x16a>
    2584:	89 e1       	ldi	r24, 0x19	; 25
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <_ZN4Tone7melody5Ev+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	61 50       	subi	r22, 0x01	; 1
    258e:	71 09       	sbc	r23, r1
    2590:	f6 cf       	rjmp	.-20     	; 0x257e <_ZN4Tone7melody5Ev+0x142>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	c3 01       	movw	r24, r6
    2594:	b2 01       	movw	r22, r4
    2596:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <_ZN4Tone7melody5Ev+0x164>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	cb 01       	movw	r24, r22
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <_ZN4Tone7melody5Ev+0x166>
				_delay_ms (pauseBetweenNotes);
				SPEAKER_PORT=0;
    25a6:	15 b8       	out	0x05, r1	; 5
	
	int length = sizeof(noteDurations)/sizeof(noteDurations[0]);

	while (changing==0)
	{
			for (int currentNote=0; currentNote<length;currentNote++)
    25a8:	ff ef       	ldi	r31, 0xFF	; 255
    25aa:	ef 1a       	sub	r14, r31
    25ac:	ff 0a       	sbc	r15, r31
    25ae:	84 cf       	rjmp	.-248    	; 0x24b8 <_ZN4Tone7melody5Ev+0x7c>
    25b0:	80 ea       	ldi	r24, 0xA0	; 160
    25b2:	9f e0       	ldi	r25, 0x0F	; 15
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	31 f0       	breq	.+12     	; 0x25c4 <_ZN4Tone7melody5Ev+0x188>
    25b8:	e9 e1       	ldi	r30, 0x19	; 25
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	31 97       	sbiw	r30, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <_ZN4Tone7melody5Ev+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f8 cf       	rjmp	.-16     	; 0x25b4 <_ZN4Tone7melody5Ev+0x178>
			
		
	}
	_delay_ms(400);
	return state;
}
    25c4:	ea 96       	adiw	r28, 0x3a	; 58
    25c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    25c8:	ea 97       	sbiw	r28, 0x3a	; 58
    25ca:	c7 58       	subi	r28, 0x87	; 135
    25cc:	df 4f       	sbci	r29, 0xFF	; 255
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ff 90       	pop	r15
    25e2:	ef 90       	pop	r14
    25e4:	df 90       	pop	r13
    25e6:	cf 90       	pop	r12
    25e8:	bf 90       	pop	r11
    25ea:	af 90       	pop	r10
    25ec:	9f 90       	pop	r9
    25ee:	8f 90       	pop	r8
    25f0:	7f 90       	pop	r7
    25f2:	6f 90       	pop	r6
    25f4:	5f 90       	pop	r5
    25f6:	4f 90       	pop	r4
    25f8:	3f 90       	pop	r3
    25fa:	2f 90       	pop	r2
    25fc:	08 95       	ret

000025fe <_ZN4Tone10playMelodyEi>:

char Tone:: playMelody(int number){
char _btn ='0';
	switch (number) {
    25fe:	62 30       	cpi	r22, 0x02	; 2
    2600:	71 05       	cpc	r23, r1
    2602:	a9 f0       	breq	.+42     	; 0x262e <_ZN4Tone10playMelodyEi+0x30>
    2604:	3c f4       	brge	.+14     	; 0x2614 <_ZN4Tone10playMelodyEi+0x16>
    2606:	61 15       	cp	r22, r1
    2608:	71 05       	cpc	r23, r1
    260a:	59 f0       	breq	.+22     	; 0x2622 <_ZN4Tone10playMelodyEi+0x24>
    260c:	61 30       	cpi	r22, 0x01	; 1
    260e:	71 05       	cpc	r23, r1
    2610:	59 f0       	breq	.+22     	; 0x2628 <_ZN4Tone10playMelodyEi+0x2a>
    2612:	16 c0       	rjmp	.+44     	; 0x2640 <_ZN4Tone10playMelodyEi+0x42>
    2614:	63 30       	cpi	r22, 0x03	; 3
    2616:	71 05       	cpc	r23, r1
    2618:	69 f0       	breq	.+26     	; 0x2634 <_ZN4Tone10playMelodyEi+0x36>
    261a:	64 30       	cpi	r22, 0x04	; 4
    261c:	71 05       	cpc	r23, r1
    261e:	69 f0       	breq	.+26     	; 0x263a <_ZN4Tone10playMelodyEi+0x3c>
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <_ZN4Tone10playMelodyEi+0x42>
		case 0:
		_btn = melody1();
    2622:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN4Tone7melody1Ev>
		break;
    2626:	08 95       	ret
		case 1:
		_btn = melody2();
    2628:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <_ZN4Tone7melody2Ev>
		break;
    262c:	08 95       	ret
		case 2:
		_btn = melody3();
    262e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN4Tone7melody3Ev>
		break;
    2632:	08 95       	ret
		case 3:
		_btn = melody4();
    2634:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN4Tone7melody4Ev>
		break;
    2638:	08 95       	ret
		case 4:
		_btn = melody5();
    263a:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN4Tone7melody5Ev>
		break;
    263e:	08 95       	ret
	_delay_ms(400);
	return state;
}

char Tone:: playMelody(int number){
char _btn ='0';
    2640:	80 e3       	ldi	r24, 0x30	; 48
		case 4:
		_btn = melody5();
		break;
	}
	return _btn;
    2642:	08 95       	ret

00002644 <__subsf3>:
    2644:	50 58       	subi	r21, 0x80	; 128

00002646 <__addsf3>:
    2646:	bb 27       	eor	r27, r27
    2648:	aa 27       	eor	r26, r26
    264a:	0e 94 3a 13 	call	0x2674	; 0x2674 <__addsf3x>
    264e:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__fp_round>
    2652:	0e 94 a6 14 	call	0x294c	; 0x294c <__fp_pscA>
    2656:	38 f0       	brcs	.+14     	; 0x2666 <__addsf3+0x20>
    2658:	0e 94 ad 14 	call	0x295a	; 0x295a <__fp_pscB>
    265c:	20 f0       	brcs	.+8      	; 0x2666 <__addsf3+0x20>
    265e:	39 f4       	brne	.+14     	; 0x266e <__addsf3+0x28>
    2660:	9f 3f       	cpi	r25, 0xFF	; 255
    2662:	19 f4       	brne	.+6      	; 0x266a <__addsf3+0x24>
    2664:	26 f4       	brtc	.+8      	; 0x266e <__addsf3+0x28>
    2666:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_nan>
    266a:	0e f4       	brtc	.+2      	; 0x266e <__addsf3+0x28>
    266c:	e0 95       	com	r30
    266e:	e7 fb       	bst	r30, 7
    2670:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>

00002674 <__addsf3x>:
    2674:	e9 2f       	mov	r30, r25
    2676:	0e 94 c5 14 	call	0x298a	; 0x298a <__fp_split3>
    267a:	58 f3       	brcs	.-42     	; 0x2652 <__addsf3+0xc>
    267c:	ba 17       	cp	r27, r26
    267e:	62 07       	cpc	r22, r18
    2680:	73 07       	cpc	r23, r19
    2682:	84 07       	cpc	r24, r20
    2684:	95 07       	cpc	r25, r21
    2686:	20 f0       	brcs	.+8      	; 0x2690 <__addsf3x+0x1c>
    2688:	79 f4       	brne	.+30     	; 0x26a8 <__addsf3x+0x34>
    268a:	a6 f5       	brtc	.+104    	; 0x26f4 <__addsf3x+0x80>
    268c:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__fp_zero>
    2690:	0e f4       	brtc	.+2      	; 0x2694 <__addsf3x+0x20>
    2692:	e0 95       	com	r30
    2694:	0b 2e       	mov	r0, r27
    2696:	ba 2f       	mov	r27, r26
    2698:	a0 2d       	mov	r26, r0
    269a:	0b 01       	movw	r0, r22
    269c:	b9 01       	movw	r22, r18
    269e:	90 01       	movw	r18, r0
    26a0:	0c 01       	movw	r0, r24
    26a2:	ca 01       	movw	r24, r20
    26a4:	a0 01       	movw	r20, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	ff 27       	eor	r31, r31
    26aa:	59 1b       	sub	r21, r25
    26ac:	99 f0       	breq	.+38     	; 0x26d4 <__addsf3x+0x60>
    26ae:	59 3f       	cpi	r21, 0xF9	; 249
    26b0:	50 f4       	brcc	.+20     	; 0x26c6 <__addsf3x+0x52>
    26b2:	50 3e       	cpi	r21, 0xE0	; 224
    26b4:	68 f1       	brcs	.+90     	; 0x2710 <__addsf3x+0x9c>
    26b6:	1a 16       	cp	r1, r26
    26b8:	f0 40       	sbci	r31, 0x00	; 0
    26ba:	a2 2f       	mov	r26, r18
    26bc:	23 2f       	mov	r18, r19
    26be:	34 2f       	mov	r19, r20
    26c0:	44 27       	eor	r20, r20
    26c2:	58 5f       	subi	r21, 0xF8	; 248
    26c4:	f3 cf       	rjmp	.-26     	; 0x26ac <__addsf3x+0x38>
    26c6:	46 95       	lsr	r20
    26c8:	37 95       	ror	r19
    26ca:	27 95       	ror	r18
    26cc:	a7 95       	ror	r26
    26ce:	f0 40       	sbci	r31, 0x00	; 0
    26d0:	53 95       	inc	r21
    26d2:	c9 f7       	brne	.-14     	; 0x26c6 <__addsf3x+0x52>
    26d4:	7e f4       	brtc	.+30     	; 0x26f4 <__addsf3x+0x80>
    26d6:	1f 16       	cp	r1, r31
    26d8:	ba 0b       	sbc	r27, r26
    26da:	62 0b       	sbc	r22, r18
    26dc:	73 0b       	sbc	r23, r19
    26de:	84 0b       	sbc	r24, r20
    26e0:	ba f0       	brmi	.+46     	; 0x2710 <__addsf3x+0x9c>
    26e2:	91 50       	subi	r25, 0x01	; 1
    26e4:	a1 f0       	breq	.+40     	; 0x270e <__addsf3x+0x9a>
    26e6:	ff 0f       	add	r31, r31
    26e8:	bb 1f       	adc	r27, r27
    26ea:	66 1f       	adc	r22, r22
    26ec:	77 1f       	adc	r23, r23
    26ee:	88 1f       	adc	r24, r24
    26f0:	c2 f7       	brpl	.-16     	; 0x26e2 <__addsf3x+0x6e>
    26f2:	0e c0       	rjmp	.+28     	; 0x2710 <__addsf3x+0x9c>
    26f4:	ba 0f       	add	r27, r26
    26f6:	62 1f       	adc	r22, r18
    26f8:	73 1f       	adc	r23, r19
    26fa:	84 1f       	adc	r24, r20
    26fc:	48 f4       	brcc	.+18     	; 0x2710 <__addsf3x+0x9c>
    26fe:	87 95       	ror	r24
    2700:	77 95       	ror	r23
    2702:	67 95       	ror	r22
    2704:	b7 95       	ror	r27
    2706:	f7 95       	ror	r31
    2708:	9e 3f       	cpi	r25, 0xFE	; 254
    270a:	08 f0       	brcs	.+2      	; 0x270e <__addsf3x+0x9a>
    270c:	b0 cf       	rjmp	.-160    	; 0x266e <__addsf3+0x28>
    270e:	93 95       	inc	r25
    2710:	88 0f       	add	r24, r24
    2712:	08 f0       	brcs	.+2      	; 0x2716 <__addsf3x+0xa2>
    2714:	99 27       	eor	r25, r25
    2716:	ee 0f       	add	r30, r30
    2718:	97 95       	ror	r25
    271a:	87 95       	ror	r24
    271c:	08 95       	ret

0000271e <__cmpsf2>:
    271e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__fp_cmp>
    2722:	08 f4       	brcc	.+2      	; 0x2726 <__cmpsf2+0x8>
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	08 95       	ret

00002728 <__divsf3>:
    2728:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divsf3x>
    272c:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__fp_round>
    2730:	0e 94 ad 14 	call	0x295a	; 0x295a <__fp_pscB>
    2734:	58 f0       	brcs	.+22     	; 0x274c <__divsf3+0x24>
    2736:	0e 94 a6 14 	call	0x294c	; 0x294c <__fp_pscA>
    273a:	40 f0       	brcs	.+16     	; 0x274c <__divsf3+0x24>
    273c:	29 f4       	brne	.+10     	; 0x2748 <__divsf3+0x20>
    273e:	5f 3f       	cpi	r21, 0xFF	; 255
    2740:	29 f0       	breq	.+10     	; 0x274c <__divsf3+0x24>
    2742:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    2746:	51 11       	cpse	r21, r1
    2748:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_szero>
    274c:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_nan>

00002750 <__divsf3x>:
    2750:	0e 94 c5 14 	call	0x298a	; 0x298a <__fp_split3>
    2754:	68 f3       	brcs	.-38     	; 0x2730 <__divsf3+0x8>

00002756 <__divsf3_pse>:
    2756:	99 23       	and	r25, r25
    2758:	b1 f3       	breq	.-20     	; 0x2746 <__divsf3+0x1e>
    275a:	55 23       	and	r21, r21
    275c:	91 f3       	breq	.-28     	; 0x2742 <__divsf3+0x1a>
    275e:	95 1b       	sub	r25, r21
    2760:	55 0b       	sbc	r21, r21
    2762:	bb 27       	eor	r27, r27
    2764:	aa 27       	eor	r26, r26
    2766:	62 17       	cp	r22, r18
    2768:	73 07       	cpc	r23, r19
    276a:	84 07       	cpc	r24, r20
    276c:	38 f0       	brcs	.+14     	; 0x277c <__divsf3_pse+0x26>
    276e:	9f 5f       	subi	r25, 0xFF	; 255
    2770:	5f 4f       	sbci	r21, 0xFF	; 255
    2772:	22 0f       	add	r18, r18
    2774:	33 1f       	adc	r19, r19
    2776:	44 1f       	adc	r20, r20
    2778:	aa 1f       	adc	r26, r26
    277a:	a9 f3       	breq	.-22     	; 0x2766 <__divsf3_pse+0x10>
    277c:	35 d0       	rcall	.+106    	; 0x27e8 <__divsf3_pse+0x92>
    277e:	0e 2e       	mov	r0, r30
    2780:	3a f0       	brmi	.+14     	; 0x2790 <__divsf3_pse+0x3a>
    2782:	e0 e8       	ldi	r30, 0x80	; 128
    2784:	32 d0       	rcall	.+100    	; 0x27ea <__divsf3_pse+0x94>
    2786:	91 50       	subi	r25, 0x01	; 1
    2788:	50 40       	sbci	r21, 0x00	; 0
    278a:	e6 95       	lsr	r30
    278c:	00 1c       	adc	r0, r0
    278e:	ca f7       	brpl	.-14     	; 0x2782 <__divsf3_pse+0x2c>
    2790:	2b d0       	rcall	.+86     	; 0x27e8 <__divsf3_pse+0x92>
    2792:	fe 2f       	mov	r31, r30
    2794:	29 d0       	rcall	.+82     	; 0x27e8 <__divsf3_pse+0x92>
    2796:	66 0f       	add	r22, r22
    2798:	77 1f       	adc	r23, r23
    279a:	88 1f       	adc	r24, r24
    279c:	bb 1f       	adc	r27, r27
    279e:	26 17       	cp	r18, r22
    27a0:	37 07       	cpc	r19, r23
    27a2:	48 07       	cpc	r20, r24
    27a4:	ab 07       	cpc	r26, r27
    27a6:	b0 e8       	ldi	r27, 0x80	; 128
    27a8:	09 f0       	breq	.+2      	; 0x27ac <__divsf3_pse+0x56>
    27aa:	bb 0b       	sbc	r27, r27
    27ac:	80 2d       	mov	r24, r0
    27ae:	bf 01       	movw	r22, r30
    27b0:	ff 27       	eor	r31, r31
    27b2:	93 58       	subi	r25, 0x83	; 131
    27b4:	5f 4f       	sbci	r21, 0xFF	; 255
    27b6:	3a f0       	brmi	.+14     	; 0x27c6 <__divsf3_pse+0x70>
    27b8:	9e 3f       	cpi	r25, 0xFE	; 254
    27ba:	51 05       	cpc	r21, r1
    27bc:	78 f0       	brcs	.+30     	; 0x27dc <__divsf3_pse+0x86>
    27be:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    27c2:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_szero>
    27c6:	5f 3f       	cpi	r21, 0xFF	; 255
    27c8:	e4 f3       	brlt	.-8      	; 0x27c2 <__divsf3_pse+0x6c>
    27ca:	98 3e       	cpi	r25, 0xE8	; 232
    27cc:	d4 f3       	brlt	.-12     	; 0x27c2 <__divsf3_pse+0x6c>
    27ce:	86 95       	lsr	r24
    27d0:	77 95       	ror	r23
    27d2:	67 95       	ror	r22
    27d4:	b7 95       	ror	r27
    27d6:	f7 95       	ror	r31
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	c9 f7       	brne	.-14     	; 0x27ce <__divsf3_pse+0x78>
    27dc:	88 0f       	add	r24, r24
    27de:	91 1d       	adc	r25, r1
    27e0:	96 95       	lsr	r25
    27e2:	87 95       	ror	r24
    27e4:	97 f9       	bld	r25, 7
    27e6:	08 95       	ret
    27e8:	e1 e0       	ldi	r30, 0x01	; 1
    27ea:	66 0f       	add	r22, r22
    27ec:	77 1f       	adc	r23, r23
    27ee:	88 1f       	adc	r24, r24
    27f0:	bb 1f       	adc	r27, r27
    27f2:	62 17       	cp	r22, r18
    27f4:	73 07       	cpc	r23, r19
    27f6:	84 07       	cpc	r24, r20
    27f8:	ba 07       	cpc	r27, r26
    27fa:	20 f0       	brcs	.+8      	; 0x2804 <__divsf3_pse+0xae>
    27fc:	62 1b       	sub	r22, r18
    27fe:	73 0b       	sbc	r23, r19
    2800:	84 0b       	sbc	r24, r20
    2802:	ba 0b       	sbc	r27, r26
    2804:	ee 1f       	adc	r30, r30
    2806:	88 f7       	brcc	.-30     	; 0x27ea <__divsf3_pse+0x94>
    2808:	e0 95       	com	r30
    280a:	08 95       	ret

0000280c <__fixsfsi>:
    280c:	0e 94 0d 14 	call	0x281a	; 0x281a <__fixunssfsi>
    2810:	68 94       	set
    2812:	b1 11       	cpse	r27, r1
    2814:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_szero>
    2818:	08 95       	ret

0000281a <__fixunssfsi>:
    281a:	0e 94 cd 14 	call	0x299a	; 0x299a <__fp_splitA>
    281e:	88 f0       	brcs	.+34     	; 0x2842 <__fixunssfsi+0x28>
    2820:	9f 57       	subi	r25, 0x7F	; 127
    2822:	98 f0       	brcs	.+38     	; 0x284a <__fixunssfsi+0x30>
    2824:	b9 2f       	mov	r27, r25
    2826:	99 27       	eor	r25, r25
    2828:	b7 51       	subi	r27, 0x17	; 23
    282a:	b0 f0       	brcs	.+44     	; 0x2858 <__fixunssfsi+0x3e>
    282c:	e1 f0       	breq	.+56     	; 0x2866 <__fixunssfsi+0x4c>
    282e:	66 0f       	add	r22, r22
    2830:	77 1f       	adc	r23, r23
    2832:	88 1f       	adc	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	1a f0       	brmi	.+6      	; 0x283e <__fixunssfsi+0x24>
    2838:	ba 95       	dec	r27
    283a:	c9 f7       	brne	.-14     	; 0x282e <__fixunssfsi+0x14>
    283c:	14 c0       	rjmp	.+40     	; 0x2866 <__fixunssfsi+0x4c>
    283e:	b1 30       	cpi	r27, 0x01	; 1
    2840:	91 f0       	breq	.+36     	; 0x2866 <__fixunssfsi+0x4c>
    2842:	0e 94 e7 14 	call	0x29ce	; 0x29ce <__fp_zero>
    2846:	b1 e0       	ldi	r27, 0x01	; 1
    2848:	08 95       	ret
    284a:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <__fp_zero>
    284e:	67 2f       	mov	r22, r23
    2850:	78 2f       	mov	r23, r24
    2852:	88 27       	eor	r24, r24
    2854:	b8 5f       	subi	r27, 0xF8	; 248
    2856:	39 f0       	breq	.+14     	; 0x2866 <__fixunssfsi+0x4c>
    2858:	b9 3f       	cpi	r27, 0xF9	; 249
    285a:	cc f3       	brlt	.-14     	; 0x284e <__fixunssfsi+0x34>
    285c:	86 95       	lsr	r24
    285e:	77 95       	ror	r23
    2860:	67 95       	ror	r22
    2862:	b3 95       	inc	r27
    2864:	d9 f7       	brne	.-10     	; 0x285c <__fixunssfsi+0x42>
    2866:	3e f4       	brtc	.+14     	; 0x2876 <__fixunssfsi+0x5c>
    2868:	90 95       	com	r25
    286a:	80 95       	com	r24
    286c:	70 95       	com	r23
    286e:	61 95       	neg	r22
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	8f 4f       	sbci	r24, 0xFF	; 255
    2874:	9f 4f       	sbci	r25, 0xFF	; 255
    2876:	08 95       	ret

00002878 <__floatunsisf>:
    2878:	e8 94       	clt
    287a:	09 c0       	rjmp	.+18     	; 0x288e <__floatsisf+0x12>

0000287c <__floatsisf>:
    287c:	97 fb       	bst	r25, 7
    287e:	3e f4       	brtc	.+14     	; 0x288e <__floatsisf+0x12>
    2880:	90 95       	com	r25
    2882:	80 95       	com	r24
    2884:	70 95       	com	r23
    2886:	61 95       	neg	r22
    2888:	7f 4f       	sbci	r23, 0xFF	; 255
    288a:	8f 4f       	sbci	r24, 0xFF	; 255
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	99 23       	and	r25, r25
    2890:	a9 f0       	breq	.+42     	; 0x28bc <__floatsisf+0x40>
    2892:	f9 2f       	mov	r31, r25
    2894:	96 e9       	ldi	r25, 0x96	; 150
    2896:	bb 27       	eor	r27, r27
    2898:	93 95       	inc	r25
    289a:	f6 95       	lsr	r31
    289c:	87 95       	ror	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	b7 95       	ror	r27
    28a4:	f1 11       	cpse	r31, r1
    28a6:	f8 cf       	rjmp	.-16     	; 0x2898 <__floatsisf+0x1c>
    28a8:	fa f4       	brpl	.+62     	; 0x28e8 <__floatsisf+0x6c>
    28aa:	bb 0f       	add	r27, r27
    28ac:	11 f4       	brne	.+4      	; 0x28b2 <__floatsisf+0x36>
    28ae:	60 ff       	sbrs	r22, 0
    28b0:	1b c0       	rjmp	.+54     	; 0x28e8 <__floatsisf+0x6c>
    28b2:	6f 5f       	subi	r22, 0xFF	; 255
    28b4:	7f 4f       	sbci	r23, 0xFF	; 255
    28b6:	8f 4f       	sbci	r24, 0xFF	; 255
    28b8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ba:	16 c0       	rjmp	.+44     	; 0x28e8 <__floatsisf+0x6c>
    28bc:	88 23       	and	r24, r24
    28be:	11 f0       	breq	.+4      	; 0x28c4 <__floatsisf+0x48>
    28c0:	96 e9       	ldi	r25, 0x96	; 150
    28c2:	11 c0       	rjmp	.+34     	; 0x28e6 <__floatsisf+0x6a>
    28c4:	77 23       	and	r23, r23
    28c6:	21 f0       	breq	.+8      	; 0x28d0 <__floatsisf+0x54>
    28c8:	9e e8       	ldi	r25, 0x8E	; 142
    28ca:	87 2f       	mov	r24, r23
    28cc:	76 2f       	mov	r23, r22
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <__floatsisf+0x5e>
    28d0:	66 23       	and	r22, r22
    28d2:	71 f0       	breq	.+28     	; 0x28f0 <__floatsisf+0x74>
    28d4:	96 e8       	ldi	r25, 0x86	; 134
    28d6:	86 2f       	mov	r24, r22
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	2a f0       	brmi	.+10     	; 0x28e8 <__floatsisf+0x6c>
    28de:	9a 95       	dec	r25
    28e0:	66 0f       	add	r22, r22
    28e2:	77 1f       	adc	r23, r23
    28e4:	88 1f       	adc	r24, r24
    28e6:	da f7       	brpl	.-10     	; 0x28de <__floatsisf+0x62>
    28e8:	88 0f       	add	r24, r24
    28ea:	96 95       	lsr	r25
    28ec:	87 95       	ror	r24
    28ee:	97 f9       	bld	r25, 7
    28f0:	08 95       	ret

000028f2 <__fp_cmp>:
    28f2:	99 0f       	add	r25, r25
    28f4:	00 08       	sbc	r0, r0
    28f6:	55 0f       	add	r21, r21
    28f8:	aa 0b       	sbc	r26, r26
    28fa:	e0 e8       	ldi	r30, 0x80	; 128
    28fc:	fe ef       	ldi	r31, 0xFE	; 254
    28fe:	16 16       	cp	r1, r22
    2900:	17 06       	cpc	r1, r23
    2902:	e8 07       	cpc	r30, r24
    2904:	f9 07       	cpc	r31, r25
    2906:	c0 f0       	brcs	.+48     	; 0x2938 <__fp_cmp+0x46>
    2908:	12 16       	cp	r1, r18
    290a:	13 06       	cpc	r1, r19
    290c:	e4 07       	cpc	r30, r20
    290e:	f5 07       	cpc	r31, r21
    2910:	98 f0       	brcs	.+38     	; 0x2938 <__fp_cmp+0x46>
    2912:	62 1b       	sub	r22, r18
    2914:	73 0b       	sbc	r23, r19
    2916:	84 0b       	sbc	r24, r20
    2918:	95 0b       	sbc	r25, r21
    291a:	39 f4       	brne	.+14     	; 0x292a <__fp_cmp+0x38>
    291c:	0a 26       	eor	r0, r26
    291e:	61 f0       	breq	.+24     	; 0x2938 <__fp_cmp+0x46>
    2920:	23 2b       	or	r18, r19
    2922:	24 2b       	or	r18, r20
    2924:	25 2b       	or	r18, r21
    2926:	21 f4       	brne	.+8      	; 0x2930 <__fp_cmp+0x3e>
    2928:	08 95       	ret
    292a:	0a 26       	eor	r0, r26
    292c:	09 f4       	brne	.+2      	; 0x2930 <__fp_cmp+0x3e>
    292e:	a1 40       	sbci	r26, 0x01	; 1
    2930:	a6 95       	lsr	r26
    2932:	8f ef       	ldi	r24, 0xFF	; 255
    2934:	81 1d       	adc	r24, r1
    2936:	81 1d       	adc	r24, r1
    2938:	08 95       	ret

0000293a <__fp_inf>:
    293a:	97 f9       	bld	r25, 7
    293c:	9f 67       	ori	r25, 0x7F	; 127
    293e:	80 e8       	ldi	r24, 0x80	; 128
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	08 95       	ret

00002946 <__fp_nan>:
    2946:	9f ef       	ldi	r25, 0xFF	; 255
    2948:	80 ec       	ldi	r24, 0xC0	; 192
    294a:	08 95       	ret

0000294c <__fp_pscA>:
    294c:	00 24       	eor	r0, r0
    294e:	0a 94       	dec	r0
    2950:	16 16       	cp	r1, r22
    2952:	17 06       	cpc	r1, r23
    2954:	18 06       	cpc	r1, r24
    2956:	09 06       	cpc	r0, r25
    2958:	08 95       	ret

0000295a <__fp_pscB>:
    295a:	00 24       	eor	r0, r0
    295c:	0a 94       	dec	r0
    295e:	12 16       	cp	r1, r18
    2960:	13 06       	cpc	r1, r19
    2962:	14 06       	cpc	r1, r20
    2964:	05 06       	cpc	r0, r21
    2966:	08 95       	ret

00002968 <__fp_round>:
    2968:	09 2e       	mov	r0, r25
    296a:	03 94       	inc	r0
    296c:	00 0c       	add	r0, r0
    296e:	11 f4       	brne	.+4      	; 0x2974 <__fp_round+0xc>
    2970:	88 23       	and	r24, r24
    2972:	52 f0       	brmi	.+20     	; 0x2988 <__fp_round+0x20>
    2974:	bb 0f       	add	r27, r27
    2976:	40 f4       	brcc	.+16     	; 0x2988 <__fp_round+0x20>
    2978:	bf 2b       	or	r27, r31
    297a:	11 f4       	brne	.+4      	; 0x2980 <__fp_round+0x18>
    297c:	60 ff       	sbrs	r22, 0
    297e:	04 c0       	rjmp	.+8      	; 0x2988 <__fp_round+0x20>
    2980:	6f 5f       	subi	r22, 0xFF	; 255
    2982:	7f 4f       	sbci	r23, 0xFF	; 255
    2984:	8f 4f       	sbci	r24, 0xFF	; 255
    2986:	9f 4f       	sbci	r25, 0xFF	; 255
    2988:	08 95       	ret

0000298a <__fp_split3>:
    298a:	57 fd       	sbrc	r21, 7
    298c:	90 58       	subi	r25, 0x80	; 128
    298e:	44 0f       	add	r20, r20
    2990:	55 1f       	adc	r21, r21
    2992:	59 f0       	breq	.+22     	; 0x29aa <__fp_splitA+0x10>
    2994:	5f 3f       	cpi	r21, 0xFF	; 255
    2996:	71 f0       	breq	.+28     	; 0x29b4 <__fp_splitA+0x1a>
    2998:	47 95       	ror	r20

0000299a <__fp_splitA>:
    299a:	88 0f       	add	r24, r24
    299c:	97 fb       	bst	r25, 7
    299e:	99 1f       	adc	r25, r25
    29a0:	61 f0       	breq	.+24     	; 0x29ba <__fp_splitA+0x20>
    29a2:	9f 3f       	cpi	r25, 0xFF	; 255
    29a4:	79 f0       	breq	.+30     	; 0x29c4 <__fp_splitA+0x2a>
    29a6:	87 95       	ror	r24
    29a8:	08 95       	ret
    29aa:	12 16       	cp	r1, r18
    29ac:	13 06       	cpc	r1, r19
    29ae:	14 06       	cpc	r1, r20
    29b0:	55 1f       	adc	r21, r21
    29b2:	f2 cf       	rjmp	.-28     	; 0x2998 <__fp_split3+0xe>
    29b4:	46 95       	lsr	r20
    29b6:	f1 df       	rcall	.-30     	; 0x299a <__fp_splitA>
    29b8:	08 c0       	rjmp	.+16     	; 0x29ca <__fp_splitA+0x30>
    29ba:	16 16       	cp	r1, r22
    29bc:	17 06       	cpc	r1, r23
    29be:	18 06       	cpc	r1, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	f1 cf       	rjmp	.-30     	; 0x29a6 <__fp_splitA+0xc>
    29c4:	86 95       	lsr	r24
    29c6:	71 05       	cpc	r23, r1
    29c8:	61 05       	cpc	r22, r1
    29ca:	08 94       	sec
    29cc:	08 95       	ret

000029ce <__fp_zero>:
    29ce:	e8 94       	clt

000029d0 <__fp_szero>:
    29d0:	bb 27       	eor	r27, r27
    29d2:	66 27       	eor	r22, r22
    29d4:	77 27       	eor	r23, r23
    29d6:	cb 01       	movw	r24, r22
    29d8:	97 f9       	bld	r25, 7
    29da:	08 95       	ret

000029dc <__gesf2>:
    29dc:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__fp_cmp>
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <__gesf2+0x8>
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	08 95       	ret

000029e6 <__mulsf3>:
    29e6:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <__mulsf3x>
    29ea:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__fp_round>
    29ee:	0e 94 a6 14 	call	0x294c	; 0x294c <__fp_pscA>
    29f2:	38 f0       	brcs	.+14     	; 0x2a02 <__mulsf3+0x1c>
    29f4:	0e 94 ad 14 	call	0x295a	; 0x295a <__fp_pscB>
    29f8:	20 f0       	brcs	.+8      	; 0x2a02 <__mulsf3+0x1c>
    29fa:	95 23       	and	r25, r21
    29fc:	11 f0       	breq	.+4      	; 0x2a02 <__mulsf3+0x1c>
    29fe:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    2a02:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_nan>
    2a06:	11 24       	eor	r1, r1
    2a08:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_szero>

00002a0c <__mulsf3x>:
    2a0c:	0e 94 c5 14 	call	0x298a	; 0x298a <__fp_split3>
    2a10:	70 f3       	brcs	.-36     	; 0x29ee <__mulsf3+0x8>

00002a12 <__mulsf3_pse>:
    2a12:	95 9f       	mul	r25, r21
    2a14:	c1 f3       	breq	.-16     	; 0x2a06 <__mulsf3+0x20>
    2a16:	95 0f       	add	r25, r21
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	55 1f       	adc	r21, r21
    2a1c:	62 9f       	mul	r22, r18
    2a1e:	f0 01       	movw	r30, r0
    2a20:	72 9f       	mul	r23, r18
    2a22:	bb 27       	eor	r27, r27
    2a24:	f0 0d       	add	r31, r0
    2a26:	b1 1d       	adc	r27, r1
    2a28:	63 9f       	mul	r22, r19
    2a2a:	aa 27       	eor	r26, r26
    2a2c:	f0 0d       	add	r31, r0
    2a2e:	b1 1d       	adc	r27, r1
    2a30:	aa 1f       	adc	r26, r26
    2a32:	64 9f       	mul	r22, r20
    2a34:	66 27       	eor	r22, r22
    2a36:	b0 0d       	add	r27, r0
    2a38:	a1 1d       	adc	r26, r1
    2a3a:	66 1f       	adc	r22, r22
    2a3c:	82 9f       	mul	r24, r18
    2a3e:	22 27       	eor	r18, r18
    2a40:	b0 0d       	add	r27, r0
    2a42:	a1 1d       	adc	r26, r1
    2a44:	62 1f       	adc	r22, r18
    2a46:	73 9f       	mul	r23, r19
    2a48:	b0 0d       	add	r27, r0
    2a4a:	a1 1d       	adc	r26, r1
    2a4c:	62 1f       	adc	r22, r18
    2a4e:	83 9f       	mul	r24, r19
    2a50:	a0 0d       	add	r26, r0
    2a52:	61 1d       	adc	r22, r1
    2a54:	22 1f       	adc	r18, r18
    2a56:	74 9f       	mul	r23, r20
    2a58:	33 27       	eor	r19, r19
    2a5a:	a0 0d       	add	r26, r0
    2a5c:	61 1d       	adc	r22, r1
    2a5e:	23 1f       	adc	r18, r19
    2a60:	84 9f       	mul	r24, r20
    2a62:	60 0d       	add	r22, r0
    2a64:	21 1d       	adc	r18, r1
    2a66:	82 2f       	mov	r24, r18
    2a68:	76 2f       	mov	r23, r22
    2a6a:	6a 2f       	mov	r22, r26
    2a6c:	11 24       	eor	r1, r1
    2a6e:	9f 57       	subi	r25, 0x7F	; 127
    2a70:	50 40       	sbci	r21, 0x00	; 0
    2a72:	9a f0       	brmi	.+38     	; 0x2a9a <__mulsf3_pse+0x88>
    2a74:	f1 f0       	breq	.+60     	; 0x2ab2 <__mulsf3_pse+0xa0>
    2a76:	88 23       	and	r24, r24
    2a78:	4a f0       	brmi	.+18     	; 0x2a8c <__mulsf3_pse+0x7a>
    2a7a:	ee 0f       	add	r30, r30
    2a7c:	ff 1f       	adc	r31, r31
    2a7e:	bb 1f       	adc	r27, r27
    2a80:	66 1f       	adc	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	91 50       	subi	r25, 0x01	; 1
    2a88:	50 40       	sbci	r21, 0x00	; 0
    2a8a:	a9 f7       	brne	.-22     	; 0x2a76 <__mulsf3_pse+0x64>
    2a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a8e:	51 05       	cpc	r21, r1
    2a90:	80 f0       	brcs	.+32     	; 0x2ab2 <__mulsf3_pse+0xa0>
    2a92:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__fp_inf>
    2a96:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__fp_szero>
    2a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a9c:	e4 f3       	brlt	.-8      	; 0x2a96 <__mulsf3_pse+0x84>
    2a9e:	98 3e       	cpi	r25, 0xE8	; 232
    2aa0:	d4 f3       	brlt	.-12     	; 0x2a96 <__mulsf3_pse+0x84>
    2aa2:	86 95       	lsr	r24
    2aa4:	77 95       	ror	r23
    2aa6:	67 95       	ror	r22
    2aa8:	b7 95       	ror	r27
    2aaa:	f7 95       	ror	r31
    2aac:	e7 95       	ror	r30
    2aae:	9f 5f       	subi	r25, 0xFF	; 255
    2ab0:	c1 f7       	brne	.-16     	; 0x2aa2 <__mulsf3_pse+0x90>
    2ab2:	fe 2b       	or	r31, r30
    2ab4:	88 0f       	add	r24, r24
    2ab6:	91 1d       	adc	r25, r1
    2ab8:	96 95       	lsr	r25
    2aba:	87 95       	ror	r24
    2abc:	97 f9       	bld	r25, 7
    2abe:	08 95       	ret

00002ac0 <__divmodhi4>:
    2ac0:	97 fb       	bst	r25, 7
    2ac2:	07 2e       	mov	r0, r23
    2ac4:	16 f4       	brtc	.+4      	; 0x2aca <__divmodhi4+0xa>
    2ac6:	00 94       	com	r0
    2ac8:	07 d0       	rcall	.+14     	; 0x2ad8 <__divmodhi4_neg1>
    2aca:	77 fd       	sbrc	r23, 7
    2acc:	09 d0       	rcall	.+18     	; 0x2ae0 <__divmodhi4_neg2>
    2ace:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodhi4>
    2ad2:	07 fc       	sbrc	r0, 7
    2ad4:	05 d0       	rcall	.+10     	; 0x2ae0 <__divmodhi4_neg2>
    2ad6:	3e f4       	brtc	.+14     	; 0x2ae6 <__divmodhi4_exit>

00002ad8 <__divmodhi4_neg1>:
    2ad8:	90 95       	com	r25
    2ada:	81 95       	neg	r24
    2adc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ade:	08 95       	ret

00002ae0 <__divmodhi4_neg2>:
    2ae0:	70 95       	com	r23
    2ae2:	61 95       	neg	r22
    2ae4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ae6 <__divmodhi4_exit>:
    2ae6:	08 95       	ret

00002ae8 <__udivmodhi4>:
    2ae8:	aa 1b       	sub	r26, r26
    2aea:	bb 1b       	sub	r27, r27
    2aec:	51 e1       	ldi	r21, 0x11	; 17
    2aee:	07 c0       	rjmp	.+14     	; 0x2afe <__udivmodhi4_ep>

00002af0 <__udivmodhi4_loop>:
    2af0:	aa 1f       	adc	r26, r26
    2af2:	bb 1f       	adc	r27, r27
    2af4:	a6 17       	cp	r26, r22
    2af6:	b7 07       	cpc	r27, r23
    2af8:	10 f0       	brcs	.+4      	; 0x2afe <__udivmodhi4_ep>
    2afa:	a6 1b       	sub	r26, r22
    2afc:	b7 0b       	sbc	r27, r23

00002afe <__udivmodhi4_ep>:
    2afe:	88 1f       	adc	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	5a 95       	dec	r21
    2b04:	a9 f7       	brne	.-22     	; 0x2af0 <__udivmodhi4_loop>
    2b06:	80 95       	com	r24
    2b08:	90 95       	com	r25
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	08 95       	ret

00002b10 <__tablejump2__>:
    2b10:	ee 0f       	add	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	05 90       	lpm	r0, Z+
    2b16:	f4 91       	lpm	r31, Z
    2b18:	e0 2d       	mov	r30, r0
    2b1a:	09 94       	ijmp

00002b1c <_exit>:
    2b1c:	f8 94       	cli

00002b1e <__stop_program>:
    2b1e:	ff cf       	rjmp	.-2      	; 0x2b1e <__stop_program>
