
AlarmTiming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00000c82  00000d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  008001a8  008001a8  00000dbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ea6  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f80  00000000  00000000  00004ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001567  00000000  00000000  00005e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000520  00000000  00000000  000073c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a87  00000000  00000000  000078e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fe8  00000000  00000000  00008367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000a34f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3a       	cpi	r26, 0xA8	; 168
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 ea       	ldi	r26, 0xA8	; 168
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3e       	cpi	r26, 0xEB	; 235
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 02 	call	0x554	; 0x554 <main>
  9e:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z14ds1307_dec2bcdh>:
#define F_CPU 1000000UL
#endif


uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
  a6:	9d ec       	ldi	r25, 0xCD	; 205
  a8:	89 9f       	mul	r24, r25
  aa:	91 2d       	mov	r25, r1
  ac:	11 24       	eor	r1, r1
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	96 95       	lsr	r25
  b4:	29 2f       	mov	r18, r25
  b6:	22 0f       	add	r18, r18
  b8:	92 0f       	add	r25, r18
  ba:	29 2f       	mov	r18, r25
  bc:	22 0f       	add	r18, r18
}
  be:	82 0f       	add	r24, r18
  c0:	08 95       	ret

000000c2 <_Z14ds1307_bcd2dech>:
uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	35 95       	asr	r19
  cc:	27 95       	ror	r18
  ce:	35 95       	asr	r19
  d0:	27 95       	ror	r18
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	92 2f       	mov	r25, r18
  d8:	99 0f       	add	r25, r25
  da:	29 0f       	add	r18, r25
  dc:	92 2f       	mov	r25, r18
  de:	99 0f       	add	r25, r25
}
  e0:	89 1b       	sub	r24, r25
  e2:	08 95       	ret

000000e4 <_Z11ds1307_initv>:
void ds1307_init() {
	i2c_init();
  e4:	0e 94 12 01 	call	0x224	; 0x224 <_Z8i2c_initv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z11ds1307_initv+0x6>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <_Z14ds1307_setdatehhhhhhh>:
	_delay_us(10);
}
void ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t dayofweek, uint8_t hour, uint8_t minute, uint8_t second) {
  f2:	cf 92       	push	r12
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	c8 2f       	mov	r28, r24
 102:	d6 2f       	mov	r29, r22
 104:	14 2f       	mov	r17, r20
 106:	f2 2e       	mov	r15, r18
	

	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
 108:	80 ed       	ldi	r24, 0xD0	; 208
 10a:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14i2c_start_waith>
	i2c_write(0x00);
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(second));
 114:	8c 2d       	mov	r24, r12
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 11a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(minute));
 11e:	8e 2d       	mov	r24, r14
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 124:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(hour));
 128:	80 2f       	mov	r24, r16
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 12e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(dayofweek));
 132:	8f 2d       	mov	r24, r15
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 138:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(day));
 13c:	81 2f       	mov	r24, r17
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 142:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(month));
 146:	8d 2f       	mov	r24, r29
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 14c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(ds1307_dec2bcd(year));
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z14ds1307_dec2bcdh>
 156:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_write(0x00);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_stop();
 160:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z8i2c_stopv>
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	cf 90       	pop	r12
 172:	08 95       	ret

00000174 <_Z14ds1307_getdatePhS_S_S_S_S_S_>:
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day,uint8_t *dayofweek, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 174:	6f 92       	push	r6
 176:	7f 92       	push	r7
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
 192:	3b 01       	movw	r6, r22
 194:	5a 01       	movw	r10, r20
 196:	49 01       	movw	r8, r18
	i2c_start_wait(DS1307_ADDRESS | I2C_WRITE);
 198:	80 ed       	ldi	r24, 0xD0	; 208
 19a:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z14i2c_start_waith>
	i2c_write(0x00);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z9i2c_writeh>
	i2c_stop();
 1a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z8i2c_stopv>

	i2c_rep_start(DS1307_ADDRESS | I2C_READ);
 1a8:	81 ed       	ldi	r24, 0xD1	; 209
 1aa:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z13i2c_rep_starth>
	*second = ds1307_bcd2dec(i2c_readAck() & 0x7F);
 1ae:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1b2:	8f 77       	andi	r24, 0x7F	; 127
 1b4:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1b8:	f6 01       	movw	r30, r12
 1ba:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c_readAck());
 1bc:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1c0:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1c4:	f7 01       	movw	r30, r14
 1c6:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c_readAck());
 1c8:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 83       	st	Z, r24
	*dayofweek = ds1307_bcd2dec(i2c_readAck());
 1d4:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1d8:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1dc:	f4 01       	movw	r30, r8
 1de:	80 83       	st	Z, r24
	*day = ds1307_bcd2dec(i2c_readAck());
 1e0:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1e4:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1e8:	f5 01       	movw	r30, r10
 1ea:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c_readAck());
 1ec:	0e 94 82 01 	call	0x304	; 0x304 <_Z11i2c_readAckv>
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 1f4:	f3 01       	movw	r30, r6
 1f6:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c_readNak());
 1f8:	0e 94 8c 01 	call	0x318	; 0x318 <_Z11i2c_readNakv>
 1fc:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14ds1307_bcd2dech>
 200:	88 83       	st	Y, r24
	i2c_stop();
 202:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z8i2c_stopv>
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	af 90       	pop	r10
 21a:	9f 90       	pop	r9
 21c:	8f 90       	pop	r8
 21e:	7f 90       	pop	r7
 220:	6f 90       	pop	r6
 222:	08 95       	ret

00000224 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 224:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 228:	8d ef       	ldi	r24, 0xFD	; 253
 22a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 22e:	08 95       	ret

00000230 <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 230:	94 ea       	ldi	r25, 0xA4	; 164
 232:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 236:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	99 23       	and	r25, r25
 23c:	e4 f7       	brge	.-8      	; 0x236 <_Z9i2c_starth+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 23e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 242:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 244:	98 30       	cpi	r25, 0x08	; 8
 246:	11 f0       	breq	.+4      	; 0x24c <_Z9i2c_starth+0x1c>
 248:	90 31       	cpi	r25, 0x10	; 16
 24a:	91 f4       	brne	.+36     	; 0x270 <_Z9i2c_starth+0x40>

	// send device address
	TWDR = address;
 24c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 256:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25a:	88 23       	and	r24, r24
 25c:	e4 f7       	brge	.-8      	; 0x256 <_Z9i2c_starth+0x26>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 25e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 262:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 264:	88 31       	cpi	r24, 0x18	; 24
 266:	31 f0       	breq	.+12     	; 0x274 <_Z9i2c_starth+0x44>
 268:	80 34       	cpi	r24, 0x40	; 64
 26a:	31 f4       	brne	.+12     	; 0x278 <_Z9i2c_starth+0x48>

	return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 278:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
 27a:	08 95       	ret

0000027c <_Z14i2c_start_waith>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 27c:	94 ea       	ldi	r25, 0xA4	; 164
 27e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 282:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 286:	99 23       	and	r25, r25
 288:	e4 f7       	brge	.-8      	; 0x282 <_Z14i2c_start_waith+0x6>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 28a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 28e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 290:	98 30       	cpi	r25, 0x08	; 8
 292:	11 f0       	breq	.+4      	; 0x298 <_Z14i2c_start_waith+0x1c>
 294:	90 31       	cpi	r25, 0x10	; 16
 296:	91 f7       	brne	.-28     	; 0x27c <_Z14i2c_start_waith>
    
    	// send device address
    	TWDR = address;
 298:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
 29c:	94 e8       	ldi	r25, 0x84	; 132
 29e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 2a2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a6:	99 23       	and	r25, r25
 2a8:	e4 f7       	brge	.-8      	; 0x2a2 <_Z14i2c_start_waith+0x26>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 2aa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ae:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 2b0:	90 32       	cpi	r25, 0x20	; 32
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <_Z14i2c_start_waith+0x3c>
 2b4:	98 35       	cpi	r25, 0x58	; 88
 2b6:	41 f4       	brne	.+16     	; 0x2c8 <_Z14i2c_start_waith+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2b8:	94 e9       	ldi	r25, 0x94	; 148
 2ba:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 2be:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c2:	94 fd       	sbrc	r25, 4
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <_Z14i2c_start_waith+0x42>
 2c6:	da cf       	rjmp	.-76     	; 0x27c <_Z14i2c_start_waith>
 2c8:	08 95       	ret

000002ca <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 2ca:	0e 94 18 01 	call	0x230	; 0x230 <_Z9i2c_starth>

}/* i2c_rep_start */
 2ce:	08 95       	ret

000002d0 <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2d0:	84 e9       	ldi	r24, 0x94	; 148
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 2d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2da:	84 fd       	sbrc	r24, 4
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <_Z8i2c_stopv+0x6>

}/* i2c_stop */
 2de:	08 95       	ret

000002e0 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 2e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 2ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ee:	88 23       	and	r24, r24
 2f0:	e4 f7       	brge	.-8      	; 0x2ea <_Z9i2c_writeh+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 2f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2f6:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 2f8:	88 32       	cpi	r24, 0x28	; 40
 2fa:	11 f0       	breq	.+4      	; 0x300 <_Z9i2c_writeh+0x20>
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	08 95       	ret
	return 0;
 300:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 302:	08 95       	ret

00000304 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 304:	84 ec       	ldi	r24, 0xC4	; 196
 306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 30a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 30e:	88 23       	and	r24, r24
 310:	e4 f7       	brge	.-8      	; 0x30a <_Z11i2c_readAckv+0x6>

    return TWDR;
 312:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 316:	08 95       	ret

00000318 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 31e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 322:	88 23       	and	r24, r24
 324:	e4 f7       	brge	.-8      	; 0x31e <_Z11i2c_readNakv+0x6>
	
    return TWDR;
 326:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 32a:	08 95       	ret

0000032c <_Z12getAlarmTimev>:

Screen scrn;


void getAlarmTime(){
	if (btnPress(PIND1)){
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z8btnPressh>
 332:	88 23       	and	r24, r24
 334:	19 f1       	breq	.+70     	; 0x37c <_Z12getAlarmTimev+0x50>
		if(data==9){
 336:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <data>
 33a:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <data+0x1>
 33e:	89 30       	cpi	r24, 0x09	; 9
 340:	91 05       	cpc	r25, r1
 342:	71 f4       	brne	.+28     	; 0x360 <_Z12getAlarmTimev+0x34>
			data=0;
 344:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <data+0x1>
 348:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	2f e9       	ldi	r18, 0x9F	; 159
 34e:	46 e8       	ldi	r20, 0x86	; 134
 350:	51 e0       	ldi	r21, 0x01	; 1
 352:	21 50       	subi	r18, 0x01	; 1
 354:	40 40       	sbci	r20, 0x00	; 0
 356:	50 40       	sbci	r21, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <_Z12getAlarmTimev+0x26>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <_Z12getAlarmTimev+0x30>
 35c:	00 00       	nop
 35e:	0e c0       	rjmp	.+28     	; 0x37c <_Z12getAlarmTimev+0x50>
			_delay_ms(500);
		}else{
			//LED(PORTB1);
			data++;
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <data+0x1>
 366:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <data>
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	96 e8       	ldi	r25, 0x86	; 134
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	81 50       	subi	r24, 0x01	; 1
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <_Z12getAlarmTimev+0x44>
 378:	00 c0       	rjmp	.+0      	; 0x37a <_Z12getAlarmTimev+0x4e>
 37a:	00 00       	nop
			_delay_ms(500);	
		}
		
	}
	if (btnPress(PIND3)){
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z8btnPressh>
 382:	88 23       	and	r24, r24
 384:	a1 f1       	breq	.+104    	; 0x3ee <_Z12getAlarmTimev+0xc2>
		//LED(PORTB2);
		alarmTime += data*powerOf(10,AlarmState);
 386:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 38a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z7powerOfii>
 396:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <data>
 39a:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <data+0x1>
 39e:	ac 01       	movw	r20, r24
 3a0:	42 9f       	mul	r20, r18
 3a2:	c0 01       	movw	r24, r0
 3a4:	43 9f       	mul	r20, r19
 3a6:	90 0d       	add	r25, r0
 3a8:	52 9f       	mul	r21, r18
 3aa:	90 0d       	add	r25, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <alarmTime>
 3b2:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <alarmTime+0x1>
 3b6:	82 0f       	add	r24, r18
 3b8:	93 1f       	adc	r25, r19
 3ba:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <alarmTime+0x1>
 3be:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <alarmTime>
		AlarmState--;
 3c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		data=0;
 3d4:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <data+0x1>
 3d8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <data>
 3dc:	5f e9       	ldi	r21, 0x9F	; 159
 3de:	86 e8       	ldi	r24, 0x86	; 134
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	51 50       	subi	r21, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <_Z12getAlarmTimev+0xb6>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <_Z12getAlarmTimev+0xc0>
 3ec:	00 00       	nop
		_delay_ms(500);
	}
	if (AlarmState == -1){
 3ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	e9 f4       	brne	.+58     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		setAlarm(alarmTime);
 3fa:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <alarmTime>
 3fe:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <alarmTime+0x1>
 402:	0e 94 14 05 	call	0xa28	; 0xa28 <_Z8setAlarmi>
		AlarmState = 3;
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		alarmTime = 0;
 412:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <alarmTime+0x1>
 416:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <alarmTime>
		mode = 0;
 41a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <mode+0x1>
 41e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <mode>
 422:	4f e9       	ldi	r20, 0x9F	; 159
 424:	56 e8       	ldi	r21, 0x86	; 134
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	41 50       	subi	r20, 0x01	; 1
 42a:	50 40       	sbci	r21, 0x00	; 0
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	08 95       	ret

00000436 <_Z12getClockTimev>:
		_delay_ms(500);
	}
}
void getClockTime(){
	if (btnPress(PIND1)){
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z8btnPressh>
 43c:	88 23       	and	r24, r24
 43e:	19 f1       	breq	.+70     	; 0x486 <_Z12getClockTimev+0x50>
		if(data==9){
 440:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <data>
 444:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <data+0x1>
 448:	89 30       	cpi	r24, 0x09	; 9
 44a:	91 05       	cpc	r25, r1
 44c:	71 f4       	brne	.+28     	; 0x46a <_Z12getClockTimev+0x34>
			data=0;
 44e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <data+0x1>
 452:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <data>
 456:	2f e9       	ldi	r18, 0x9F	; 159
 458:	86 e8       	ldi	r24, 0x86	; 134
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <_Z12getClockTimev+0x26>
 464:	00 c0       	rjmp	.+0      	; 0x466 <_Z12getClockTimev+0x30>
 466:	00 00       	nop
 468:	0e c0       	rjmp	.+28     	; 0x486 <_Z12getClockTimev+0x50>
			_delay_ms(500);
			}else{
			//LED(PORTB1);
			data++;
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <data+0x1>
 470:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <data>
 474:	2f e9       	ldi	r18, 0x9F	; 159
 476:	86 e8       	ldi	r24, 0x86	; 134
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <_Z12getClockTimev+0x44>
 482:	00 c0       	rjmp	.+0      	; 0x484 <_Z12getClockTimev+0x4e>
 484:	00 00       	nop
			_delay_ms(500);
		}
		
	}
	if (btnPress(PIND3)){
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z8btnPressh>
 48c:	88 23       	and	r24, r24
 48e:	09 f4       	brne	.+2      	; 0x492 <_Z12getClockTimev+0x5c>
 490:	45 c0       	rjmp	.+138    	; 0x51c <_Z12getClockTimev+0xe6>
		//LED(PORTB2);
		if (temp == 0){
 492:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <temp>
 496:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <temp+0x1>
 49a:	89 2b       	or	r24, r25
 49c:	d1 f4       	brne	.+52     	; 0x4d2 <_Z12getClockTimev+0x9c>
			data*=10;
 49e:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <data>
 4a2:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <data+0x1>
 4a6:	9c 01       	movw	r18, r24
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	82 0f       	add	r24, r18
 4ba:	93 1f       	adc	r25, r19
 4bc:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <data+0x1>
 4c0:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <data>
			temp = 1;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <temp+0x1>
 4cc:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <temp>
 4d0:	1c c0       	rjmp	.+56     	; 0x50a <_Z12getClockTimev+0xd4>
		}
		else{
			clockTime[ClockState] = data;
 4d2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <ClockState>
 4d6:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <ClockState+0x1>
 4da:	fc 01       	movw	r30, r24
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	e0 55       	subi	r30, 0x50	; 80
 4e2:	fe 4f       	sbci	r31, 0xFE	; 254
 4e4:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <data>
 4e8:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <data+0x1>
 4ec:	31 83       	std	Z+1, r19	; 0x01
 4ee:	20 83       	st	Z, r18
			ClockState++;
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <ClockState+0x1>
 4f6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <ClockState>
			data=0;
 4fa:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <data+0x1>
 4fe:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <data>
			temp = 0;
 502:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <temp+0x1>
 506:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <temp>
 50a:	2f e9       	ldi	r18, 0x9F	; 159
 50c:	86 e8       	ldi	r24, 0x86	; 134
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	21 50       	subi	r18, 0x01	; 1
 512:	80 40       	sbci	r24, 0x00	; 0
 514:	90 40       	sbci	r25, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <_Z12getClockTimev+0xda>
 518:	00 c0       	rjmp	.+0      	; 0x51a <_Z12getClockTimev+0xe4>
 51a:	00 00       	nop
		}
		_delay_ms(500);
	}
	if (ClockState == 6){
 51c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <ClockState>
 520:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <ClockState+0x1>
 524:	06 97       	sbiw	r24, 0x06	; 6
 526:	a9 f4       	brne	.+42     	; 0x552 <_Z12getClockTimev+0x11c>
		setClockTime(clockTime);
 528:	80 eb       	ldi	r24, 0xB0	; 176
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z12setClockTimePi>
		ClockState = 0;
 530:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ClockState+0x1>
 534:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <ClockState>
		mode = 0;
 538:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <mode+0x1>
 53c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <mode>
 540:	2f e9       	ldi	r18, 0x9F	; 159
 542:	86 e8       	ldi	r24, 0x86	; 134
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <_Z12getClockTimev+0x110>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <_Z12getClockTimev+0x11a>
 550:	00 00       	nop
 552:	08 95       	ret

00000554 <main>:
		_delay_ms(500);
	}
}
int main(void)
{
	ds1307_init();
 554:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z11ds1307_initv>
	scrn.LCD_Init();
 558:	88 ea       	ldi	r24, 0xA8	; 168
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN6Screen8LCD_InitEv>
	scrn.LCD_String("start");
 560:	6a e1       	ldi	r22, 0x1A	; 26
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	88 ea       	ldi	r24, 0xA8	; 168
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
 56c:	2f e3       	ldi	r18, 0x3F	; 63
 56e:	8d e0       	ldi	r24, 0x0D	; 13
 570:	93 e0       	ldi	r25, 0x03	; 3
 572:	21 50       	subi	r18, 0x01	; 1
 574:	80 40       	sbci	r24, 0x00	; 0
 576:	90 40       	sbci	r25, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <main+0x1e>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x28>
 57c:	00 00       	nop
	_delay_ms(1000);
	//LED(PORTC2);
		
	while (1)
	{
		checkAlarm();
 57e:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z10checkAlarmv>
		if (btnPress(PIND7)){
 582:	87 e0       	ldi	r24, 0x07	; 7
 584:	0e 94 00 05 	call	0xa00	; 0xa00 <_Z8btnPressh>
 588:	88 23       	and	r24, r24
 58a:	19 f1       	breq	.+70     	; 0x5d2 <main+0x7e>
			if(mode==2){
 58c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <mode>
 590:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <mode+0x1>
 594:	82 30       	cpi	r24, 0x02	; 2
 596:	91 05       	cpc	r25, r1
 598:	71 f4       	brne	.+28     	; 0x5b6 <main+0x62>
				mode=0;
 59a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <mode+0x1>
 59e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <mode>
 5a2:	2f e9       	ldi	r18, 0x9F	; 159
 5a4:	86 e8       	ldi	r24, 0x86	; 134
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x54>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x5e>
 5b2:	00 00       	nop
 5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <main+0x7e>
				_delay_ms(500);
			}else{
				mode++;
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <mode+0x1>
 5bc:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <mode>
 5c0:	2f e9       	ldi	r18, 0x9F	; 159
 5c2:	86 e8       	ldi	r24, 0x86	; 134
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	80 40       	sbci	r24, 0x00	; 0
 5ca:	90 40       	sbci	r25, 0x00	; 0
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <main+0x72>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <main+0x7c>
 5d0:	00 00       	nop
				//LED(PORTB3);
				_delay_ms(500);
			}
		}
		if (mode == 1){
 5d2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <mode>
 5d6:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <mode+0x1>
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <main+0x8e>
			getAlarmTime();
 5de:	0e 94 96 01 	call	0x32c	; 0x32c <_Z12getAlarmTimev>
		}
		if (mode == 2){
 5e2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <mode>
 5e6:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <mode+0x1>
 5ea:	02 97       	sbiw	r24, 0x02	; 2
 5ec:	41 f6       	brne	.-112    	; 0x57e <main+0x2a>
			getClockTime();
 5ee:	0e 94 1b 02 	call	0x436	; 0x436 <_Z12getClockTimev>
 5f2:	c5 cf       	rjmp	.-118    	; 0x57e <main+0x2a>

000005f4 <_ZN6Screen11LCD_CommandEh>:
int _a=0 , _b=0 , _c=0 , _d=0;   //assume that the Time is in ab:cd format

//this command is use to send a command to the LCD as an unsigned char
void Screen::LCD_Command(unsigned char cmnd)      
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 5f4:	8b b1       	in	r24, 0x0b	; 11
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	96 2f       	mov	r25, r22
 5fa:	90 7f       	andi	r25, 0xF0	; 240
 5fc:	89 2b       	or	r24, r25
 5fe:	8b b9       	out	0x0b, r24	; 11
	LCD_Port &= ~ (1<<RS);
 600:	8b b1       	in	r24, 0x0b	; 11
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
 606:	8b b1       	in	r24, 0x0b	; 11
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60c:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 60e:	8b b1       	in	r24, 0x0b	; 11
 610:	8d 7f       	andi	r24, 0xFD	; 253
 612:	8b b9       	out	0x0b, r24	; 11
 614:	82 e4       	ldi	r24, 0x42	; 66
 616:	8a 95       	dec	r24
 618:	f1 f7       	brne	.-4      	; 0x616 <_ZN6Screen11LCD_CommandEh+0x22>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <_ZN6Screen11LCD_CommandEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 61c:	8b b1       	in	r24, 0x0b	; 11
 61e:	90 e1       	ldi	r25, 0x10	; 16
 620:	69 9f       	mul	r22, r25
 622:	b0 01       	movw	r22, r0
 624:	11 24       	eor	r1, r1
 626:	8f 70       	andi	r24, 0x0F	; 15
 628:	68 2b       	or	r22, r24
 62a:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
 62c:	8b b1       	in	r24, 0x0b	; 11
 62e:	82 60       	ori	r24, 0x02	; 2
 630:	8b b9       	out	0x0b, r24	; 11
 632:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	8d 7f       	andi	r24, 0xFD	; 253
 638:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63a:	83 ef       	ldi	r24, 0xF3	; 243
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <_ZN6Screen11LCD_CommandEh+0x4a>
 642:	00 c0       	rjmp	.+0      	; 0x644 <_ZN6Screen11LCD_CommandEh+0x50>
 644:	00 00       	nop
 646:	08 95       	ret

00000648 <_ZN6Screen8LCD_CharEh>:
	_delay_ms(2);
}

void Screen::LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 648:	8b b1       	in	r24, 0x0b	; 11
 64a:	8f 70       	andi	r24, 0x0F	; 15
 64c:	96 2f       	mov	r25, r22
 64e:	90 7f       	andi	r25, 0xF0	; 240
 650:	89 2b       	or	r24, r25
 652:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<RS);		//RS = 1
 654:	8b b1       	in	r24, 0x0b	; 11
 656:	81 60       	ori	r24, 0x01	; 1
 658:	8b b9       	out	0x0b, r24	; 11
	LCD_Port|= (1<<EN);
 65a:	8b b1       	in	r24, 0x0b	; 11
 65c:	82 60       	ori	r24, 0x02	; 2
 65e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 660:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 662:	8b b1       	in	r24, 0x0b	; 11
 664:	8d 7f       	andi	r24, 0xFD	; 253
 666:	8b b9       	out	0x0b, r24	; 11
 668:	82 e4       	ldi	r24, 0x42	; 66
 66a:	8a 95       	dec	r24
 66c:	f1 f7       	brne	.-4      	; 0x66a <_ZN6Screen8LCD_CharEh+0x22>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <_ZN6Screen8LCD_CharEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 670:	8b b1       	in	r24, 0x0b	; 11
 672:	90 e1       	ldi	r25, 0x10	; 16
 674:	69 9f       	mul	r22, r25
 676:	b0 01       	movw	r22, r0
 678:	11 24       	eor	r1, r1
 67a:	8f 70       	andi	r24, 0x0F	; 15
 67c:	68 2b       	or	r22, r24
 67e:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
 680:	8b b1       	in	r24, 0x0b	; 11
 682:	82 60       	ori	r24, 0x02	; 2
 684:	8b b9       	out	0x0b, r24	; 11
 686:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 688:	8b b1       	in	r24, 0x0b	; 11
 68a:	8d 7f       	andi	r24, 0xFD	; 253
 68c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68e:	83 ef       	ldi	r24, 0xF3	; 243
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <_ZN6Screen8LCD_CharEh+0x4a>
 696:	00 c0       	rjmp	.+0      	; 0x698 <_ZN6Screen8LCD_CharEh+0x50>
 698:	00 00       	nop
 69a:	08 95       	ret

0000069c <_ZN6Screen10LCD_StringEPc>:
}


//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	7c 01       	movw	r14, r24
 6aa:	8b 01       	movw	r16, r22
	int i;
	for(i=0;str[i]!=0;i++)
 6ac:	c0 e0       	ldi	r28, 0x00	; 0
 6ae:	d0 e0       	ldi	r29, 0x00	; 0
 6b0:	f8 01       	movw	r30, r16
 6b2:	ec 0f       	add	r30, r28
 6b4:	fd 1f       	adc	r31, r29
 6b6:	60 81       	ld	r22, Z
 6b8:	66 23       	and	r22, r22
 6ba:	29 f0       	breq	.+10     	; 0x6c6 <_ZN6Screen10LCD_StringEPc+0x2a>
	{
		LCD_Char (str[i]);
 6bc:	c7 01       	movw	r24, r14
 6be:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>

//this is the function use to write a string on the LCD screen
void Screen::LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 6c2:	21 96       	adiw	r28, 0x01	; 1
 6c4:	f5 cf       	rjmp	.-22     	; 0x6b0 <_ZN6Screen10LCD_StringEPc+0x14>
	{
		LCD_Char (str[i]);
	}
}
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	08 95       	ret

000006d4 <_ZN6Screen8LCD_InitEv>:
}


//function to initialize the LCD dispay
void Screen::LCD_Init(void)
{
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;			//LCD data direction is output
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	8a b9       	out	0x0a, r24	; 10
 6de:	87 e8       	ldi	r24, 0x87	; 135
 6e0:	93 e1       	ldi	r25, 0x13	; 19
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <_ZN6Screen8LCD_InitEv+0xe>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <_ZN6Screen8LCD_InitEv+0x14>
 6e8:	00 00       	nop
	_delay_ms(20);
	
	LCD_Command(0x02);
 6ea:	62 e0       	ldi	r22, 0x02	; 2
 6ec:	ce 01       	movw	r24, r28
 6ee:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x28);
 6f2:	68 e2       	ldi	r22, 0x28	; 40
 6f4:	ce 01       	movw	r24, r28
 6f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
 6fa:	6c e0       	ldi	r22, 0x0C	; 12
 6fc:	ce 01       	movw	r24, r28
 6fe:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x06);              //Command - shift cursor to right
 702:	66 e0       	ldi	r22, 0x06	; 6
 704:	ce 01       	movw	r24, r28
 706:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
	LCD_Command(0x01);              //Command - Clear display
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	ce 01       	movw	r24, r28
 70e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
	
	LCD_String("Welcome");
 712:	60 e2       	ldi	r22, 0x20	; 32
 714:	71 e0       	ldi	r23, 0x01	; 1
 716:	ce 01       	movw	r24, r28
 718:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
 71c:	9f e3       	ldi	r25, 0x3F	; 63
 71e:	2d e0       	ldi	r18, 0x0D	; 13
 720:	83 e0       	ldi	r24, 0x03	; 3
 722:	91 50       	subi	r25, 0x01	; 1
 724:	20 40       	sbci	r18, 0x00	; 0
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <_ZN6Screen8LCD_InitEv+0x4e>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <_ZN6Screen8LCD_InitEv+0x58>
 72c:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
 72e:	68 e2       	ldi	r22, 0x28	; 40
 730:	71 e0       	ldi	r23, 0x01	; 1
 732:	ce 01       	movw	r24, r28
 734:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
 738:	9f e3       	ldi	r25, 0x3F	; 63
 73a:	2d e0       	ldi	r18, 0x0D	; 13
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	91 50       	subi	r25, 0x01	; 1
 740:	20 40       	sbci	r18, 0x00	; 0
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	e1 f7       	brne	.-8      	; 0x73e <_ZN6Screen8LCD_InitEv+0x6a>
 746:	00 c0       	rjmp	.+0      	; 0x748 <_ZN6Screen8LCD_InitEv+0x74>
 748:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
 74a:	68 e2       	ldi	r22, 0x28	; 40
 74c:	71 e0       	ldi	r23, 0x01	; 1
 74e:	ce 01       	movw	r24, r28
 750:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
 754:	9f e3       	ldi	r25, 0x3F	; 63
 756:	2d e0       	ldi	r18, 0x0D	; 13
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	91 50       	subi	r25, 0x01	; 1
 75c:	20 40       	sbci	r18, 0x00	; 0
 75e:	80 40       	sbci	r24, 0x00	; 0
 760:	e1 f7       	brne	.-8      	; 0x75a <_ZN6Screen8LCD_InitEv+0x86>
 762:	00 c0       	rjmp	.+0      	; 0x764 <_ZN6Screen8LCD_InitEv+0x90>
 764:	00 00       	nop
	_delay_ms(1000);
	LCD_String(".");
 766:	68 e2       	ldi	r22, 0x28	; 40
 768:	71 e0       	ldi	r23, 0x01	; 1
 76a:	ce 01       	movw	r24, r28
 76c:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
 770:	9f e3       	ldi	r25, 0x3F	; 63
 772:	2d e0       	ldi	r18, 0x0D	; 13
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	91 50       	subi	r25, 0x01	; 1
 778:	20 40       	sbci	r18, 0x00	; 0
 77a:	80 40       	sbci	r24, 0x00	; 0
 77c:	e1 f7       	brne	.-8      	; 0x776 <_ZN6Screen8LCD_InitEv+0xa2>
 77e:	00 c0       	rjmp	.+0      	; 0x780 <_ZN6Screen8LCD_InitEv+0xac>
 780:	00 00       	nop
	_delay_ms(1000);
}
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <_ZN6Screen9LCD_clearEv>:
}


//function to clear the display
void Screen::LCD_clear()
{
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	ec 01       	movw	r28, r24
	LCD_Command (0x01);
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
 794:	83 ef       	ldi	r24, 0xF3	; 243
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	f1 f7       	brne	.-4      	; 0x798 <_ZN6Screen9LCD_clearEv+0x10>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <_ZN6Screen9LCD_clearEv+0x16>
 79e:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);
 7a0:	60 e8       	ldi	r22, 0x80	; 128
 7a2:	ce 01       	movw	r24, r28
 7a4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
}
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <_Z7powerOfii>:
uint8_t day = 0;
uint8_t dayofweek = 0;
uint8_t hour = 0;
uint8_t minute = 0;
uint8_t second = 0;
int powerOf(int base, int power){
 7ae:	9c 01       	movw	r18, r24
	int result = 1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
	while(power!=0){
 7b4:	61 15       	cp	r22, r1
 7b6:	71 05       	cpc	r23, r1
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <_Z7powerOfii+0x22>
		result*=base;
 7ba:	ac 01       	movw	r20, r24
 7bc:	42 9f       	mul	r20, r18
 7be:	c0 01       	movw	r24, r0
 7c0:	43 9f       	mul	r20, r19
 7c2:	90 0d       	add	r25, r0
 7c4:	52 9f       	mul	r21, r18
 7c6:	90 0d       	add	r25, r0
 7c8:	11 24       	eor	r1, r1
		power--;
 7ca:	61 50       	subi	r22, 0x01	; 1
 7cc:	71 09       	sbc	r23, r1
uint8_t hour = 0;
uint8_t minute = 0;
uint8_t second = 0;
int powerOf(int base, int power){
	int result = 1;
	while(power!=0){
 7ce:	f2 cf       	rjmp	.-28     	; 0x7b4 <_Z7powerOfii+0x6>
		result*=base;
		power--;
	}
	return result;
	
}
 7d0:	08 95       	ret

000007d2 <_Z3LEDc>:

void LED(char P){
	PORTC|=1<<P;
 7d2:	48 b1       	in	r20, 0x08	; 8
 7d4:	21 e0       	ldi	r18, 0x01	; 1
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	b9 01       	movw	r22, r18
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <_Z3LEDc+0xe>
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	8a 95       	dec	r24
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <_Z3LEDc+0xa>
 7e4:	cb 01       	movw	r24, r22
 7e6:	46 2b       	or	r20, r22
 7e8:	48 b9       	out	0x08, r20	; 8
 7ea:	7f e9       	ldi	r23, 0x9F	; 159
 7ec:	26 e8       	ldi	r18, 0x86	; 134
 7ee:	31 e0       	ldi	r19, 0x01	; 1
 7f0:	71 50       	subi	r23, 0x01	; 1
 7f2:	20 40       	sbci	r18, 0x00	; 0
 7f4:	30 40       	sbci	r19, 0x00	; 0
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <_Z3LEDc+0x1e>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <_Z3LEDc+0x28>
 7fa:	00 00       	nop
	_delay_ms(500);
	PORTC&=~(1<<P);
 7fc:	98 b1       	in	r25, 0x08	; 8
 7fe:	80 95       	com	r24
 800:	89 23       	and	r24, r25
 802:	88 b9       	out	0x08, r24	; 8
 804:	4f e9       	ldi	r20, 0x9F	; 159
 806:	66 e8       	ldi	r22, 0x86	; 134
 808:	71 e0       	ldi	r23, 0x01	; 1
 80a:	41 50       	subi	r20, 0x01	; 1
 80c:	60 40       	sbci	r22, 0x00	; 0
 80e:	70 40       	sbci	r23, 0x00	; 0
 810:	e1 f7       	brne	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	00 c0       	rjmp	.+0      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 814:	00 00       	nop
 816:	08 95       	ret

00000818 <_Z8showTimev>:
	_delay_ms(500);
}

void showTime()
{
 818:	cf 93       	push	r28

	sc.LCD_clear();
 81a:	83 ee       	ldi	r24, 0xE3	; 227
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN6Screen9LCD_clearEv>
	sc.LCD_Char((char) (hour/10)+48);
 822:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <hour>
 826:	cd ec       	ldi	r28, 0xCD	; 205
 828:	6c 9f       	mul	r22, r28
 82a:	61 2d       	mov	r22, r1
 82c:	11 24       	eor	r1, r1
 82e:	66 95       	lsr	r22
 830:	66 95       	lsr	r22
 832:	66 95       	lsr	r22
 834:	60 5d       	subi	r22, 0xD0	; 208
 836:	83 ee       	ldi	r24, 0xE3	; 227
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Char((char) (hour%10)+48);
 83e:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <hour>
 842:	6c 9f       	mul	r22, r28
 844:	81 2d       	mov	r24, r1
 846:	11 24       	eor	r1, r1
 848:	86 95       	lsr	r24
 84a:	86 95       	lsr	r24
 84c:	86 95       	lsr	r24
 84e:	88 0f       	add	r24, r24
 850:	98 2f       	mov	r25, r24
 852:	99 0f       	add	r25, r25
 854:	99 0f       	add	r25, r25
 856:	89 0f       	add	r24, r25
 858:	68 1b       	sub	r22, r24
 85a:	60 5d       	subi	r22, 0xD0	; 208
 85c:	83 ee       	ldi	r24, 0xE3	; 227
 85e:	91 e0       	ldi	r25, 0x01	; 1
 860:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_String(":");
 864:	68 e7       	ldi	r22, 0x78	; 120
 866:	71 e0       	ldi	r23, 0x01	; 1
 868:	83 ee       	ldi	r24, 0xE3	; 227
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Char((char) (minute/10)+48);
 870:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <minute>
 874:	6c 9f       	mul	r22, r28
 876:	61 2d       	mov	r22, r1
 878:	11 24       	eor	r1, r1
 87a:	66 95       	lsr	r22
 87c:	66 95       	lsr	r22
 87e:	66 95       	lsr	r22
 880:	60 5d       	subi	r22, 0xD0	; 208
 882:	83 ee       	ldi	r24, 0xE3	; 227
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Char((char) (minute%10)+48);
 88a:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <minute>
 88e:	6c 9f       	mul	r22, r28
 890:	81 2d       	mov	r24, r1
 892:	11 24       	eor	r1, r1
 894:	86 95       	lsr	r24
 896:	86 95       	lsr	r24
 898:	86 95       	lsr	r24
 89a:	88 0f       	add	r24, r24
 89c:	98 2f       	mov	r25, r24
 89e:	99 0f       	add	r25, r25
 8a0:	99 0f       	add	r25, r25
 8a2:	89 0f       	add	r24, r25
 8a4:	68 1b       	sub	r22, r24
 8a6:	60 5d       	subi	r22, 0xD0	; 208
 8a8:	83 ee       	ldi	r24, 0xE3	; 227
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_String(":");
 8b0:	68 e7       	ldi	r22, 0x78	; 120
 8b2:	71 e0       	ldi	r23, 0x01	; 1
 8b4:	83 ee       	ldi	r24, 0xE3	; 227
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Char((char) (second/10)+48);
 8bc:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <second>
 8c0:	6c 9f       	mul	r22, r28
 8c2:	61 2d       	mov	r22, r1
 8c4:	11 24       	eor	r1, r1
 8c6:	66 95       	lsr	r22
 8c8:	66 95       	lsr	r22
 8ca:	66 95       	lsr	r22
 8cc:	60 5d       	subi	r22, 0xD0	; 208
 8ce:	83 ee       	ldi	r24, 0xE3	; 227
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Char((char) (second%10)+48);
 8d6:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <second>
 8da:	6c 9f       	mul	r22, r28
 8dc:	81 2d       	mov	r24, r1
 8de:	11 24       	eor	r1, r1
 8e0:	86 95       	lsr	r24
 8e2:	86 95       	lsr	r24
 8e4:	86 95       	lsr	r24
 8e6:	88 0f       	add	r24, r24
 8e8:	98 2f       	mov	r25, r24
 8ea:	99 0f       	add	r25, r25
 8ec:	99 0f       	add	r25, r25
 8ee:	89 0f       	add	r24, r25
 8f0:	68 1b       	sub	r22, r24
 8f2:	60 5d       	subi	r22, 0xD0	; 208
 8f4:	83 ee       	ldi	r24, 0xE3	; 227
 8f6:	91 e0       	ldi	r25, 0x01	; 1
 8f8:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Command(0XC0);
 8fc:	60 ec       	ldi	r22, 0xC0	; 192
 8fe:	83 ee       	ldi	r24, 0xE3	; 227
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN6Screen11LCD_CommandEh>
	sc.LCD_String("20");
 906:	6c e9       	ldi	r22, 0x9C	; 156
 908:	71 e0       	ldi	r23, 0x01	; 1
 90a:	83 ee       	ldi	r24, 0xE3	; 227
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Char((char) (year/10)+48);
 912:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <year>
 916:	6c 9f       	mul	r22, r28
 918:	61 2d       	mov	r22, r1
 91a:	11 24       	eor	r1, r1
 91c:	66 95       	lsr	r22
 91e:	66 95       	lsr	r22
 920:	66 95       	lsr	r22
 922:	60 5d       	subi	r22, 0xD0	; 208
 924:	83 ee       	ldi	r24, 0xE3	; 227
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Char((char) (year%10)+48);
 92c:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <year>
 930:	6c 9f       	mul	r22, r28
 932:	81 2d       	mov	r24, r1
 934:	11 24       	eor	r1, r1
 936:	86 95       	lsr	r24
 938:	86 95       	lsr	r24
 93a:	86 95       	lsr	r24
 93c:	88 0f       	add	r24, r24
 93e:	98 2f       	mov	r25, r24
 940:	99 0f       	add	r25, r25
 942:	99 0f       	add	r25, r25
 944:	89 0f       	add	r24, r25
 946:	68 1b       	sub	r22, r24
 948:	60 5d       	subi	r22, 0xD0	; 208
 94a:	83 ee       	ldi	r24, 0xE3	; 227
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_String("-");
 952:	6f e9       	ldi	r22, 0x9F	; 159
 954:	71 e0       	ldi	r23, 0x01	; 1
 956:	83 ee       	ldi	r24, 0xE3	; 227
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Char((char) (month/10)+48);
 95e:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <month>
 962:	6c 9f       	mul	r22, r28
 964:	61 2d       	mov	r22, r1
 966:	11 24       	eor	r1, r1
 968:	66 95       	lsr	r22
 96a:	66 95       	lsr	r22
 96c:	66 95       	lsr	r22
 96e:	60 5d       	subi	r22, 0xD0	; 208
 970:	83 ee       	ldi	r24, 0xE3	; 227
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Char((char) (month%10)+48);
 978:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <month>
 97c:	6c 9f       	mul	r22, r28
 97e:	81 2d       	mov	r24, r1
 980:	11 24       	eor	r1, r1
 982:	86 95       	lsr	r24
 984:	86 95       	lsr	r24
 986:	86 95       	lsr	r24
 988:	88 0f       	add	r24, r24
 98a:	98 2f       	mov	r25, r24
 98c:	99 0f       	add	r25, r25
 98e:	99 0f       	add	r25, r25
 990:	89 0f       	add	r24, r25
 992:	68 1b       	sub	r22, r24
 994:	60 5d       	subi	r22, 0xD0	; 208
 996:	83 ee       	ldi	r24, 0xE3	; 227
 998:	91 e0       	ldi	r25, 0x01	; 1
 99a:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_String("-");
 99e:	6f e9       	ldi	r22, 0x9F	; 159
 9a0:	71 e0       	ldi	r23, 0x01	; 1
 9a2:	83 ee       	ldi	r24, 0xE3	; 227
 9a4:	91 e0       	ldi	r25, 0x01	; 1
 9a6:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
	sc.LCD_Char((char) (day/10)+48);
 9aa:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <day>
 9ae:	6c 9f       	mul	r22, r28
 9b0:	61 2d       	mov	r22, r1
 9b2:	11 24       	eor	r1, r1
 9b4:	66 95       	lsr	r22
 9b6:	66 95       	lsr	r22
 9b8:	66 95       	lsr	r22
 9ba:	60 5d       	subi	r22, 0xD0	; 208
 9bc:	83 ee       	ldi	r24, 0xE3	; 227
 9be:	91 e0       	ldi	r25, 0x01	; 1
 9c0:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
	sc.LCD_Char((char) (day%10)+48);
 9c4:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <day>
 9c8:	6c 9f       	mul	r22, r28
 9ca:	c1 2d       	mov	r28, r1
 9cc:	11 24       	eor	r1, r1
 9ce:	c6 95       	lsr	r28
 9d0:	c6 95       	lsr	r28
 9d2:	c6 95       	lsr	r28
 9d4:	cc 0f       	add	r28, r28
 9d6:	8c 2f       	mov	r24, r28
 9d8:	88 0f       	add	r24, r24
 9da:	88 0f       	add	r24, r24
 9dc:	c8 0f       	add	r28, r24
 9de:	6c 1b       	sub	r22, r28
 9e0:	60 5d       	subi	r22, 0xD0	; 208
 9e2:	83 ee       	ldi	r24, 0xE3	; 227
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	0e 94 24 03 	call	0x648	; 0x648 <_ZN6Screen8LCD_CharEh>
 9ea:	2f e3       	ldi	r18, 0x3F	; 63
 9ec:	8d e0       	ldi	r24, 0x0D	; 13
 9ee:	93 e0       	ldi	r25, 0x03	; 3
 9f0:	21 50       	subi	r18, 0x01	; 1
 9f2:	80 40       	sbci	r24, 0x00	; 0
 9f4:	90 40       	sbci	r25, 0x00	; 0
 9f6:	e1 f7       	brne	.-8      	; 0x9f0 <__stack+0xf1>
 9f8:	00 c0       	rjmp	.+0      	; 0x9fa <__stack+0xfb>
 9fa:	00 00       	nop
	_delay_ms(1000);
}
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <_Z8btnPressh>:

bool btnPress(uint8_t p){
	if (PIND == 1<< p){
 a00:	49 b1       	in	r20, 0x09	; 9
 a02:	50 e0       	ldi	r21, 0x00	; 0
 a04:	21 e0       	ldi	r18, 0x01	; 1
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <_Z8btnPressh+0xe>
 a0a:	22 0f       	add	r18, r18
 a0c:	33 1f       	adc	r19, r19
 a0e:	8a 95       	dec	r24
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <_Z8btnPressh+0xa>
 a12:	42 17       	cp	r20, r18
 a14:	53 07       	cpc	r21, r19
 a16:	11 f4       	brne	.+4      	; 0xa1c <_Z8btnPressh+0x1c>
		return true;
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	08 95       	ret
	}
	else{
		return false;
 a1c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 a1e:	08 95       	ret

00000a20 <_Z9ringAlarmv>:
void ringAlarm(){
	LED(PORTC2);
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z3LEDc>
 a26:	08 95       	ret

00000a28 <_Z8setAlarmi>:
}
void setAlarm(int alarm_time){
	alarmArray[numberOfAlarms] = alarm_time;
 a28:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <numberOfAlarms>
 a2c:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <numberOfAlarms+0x1>
 a30:	f9 01       	movw	r30, r18
 a32:	ee 0f       	add	r30, r30
 a34:	ff 1f       	adc	r31, r31
 a36:	e3 53       	subi	r30, 0x33	; 51
 a38:	fe 4f       	sbci	r31, 0xFE	; 254
 a3a:	91 83       	std	Z+1, r25	; 0x01
 a3c:	80 83       	st	Z, r24
	numberOfAlarms++;
 a3e:	2f 5f       	subi	r18, 0xFF	; 255
 a40:	3f 4f       	sbci	r19, 0xFF	; 255
 a42:	30 93 e2 01 	sts	0x01E2, r19	; 0x8001e2 <numberOfAlarms+0x1>
 a46:	20 93 e1 01 	sts	0x01E1, r18	; 0x8001e1 <numberOfAlarms>
 a4a:	08 95       	ret

00000a4c <_Z16updateAlarmArrayi>:
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
 a4c:	20 e0       	ldi	r18, 0x00	; 0
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	40 91 e1 01 	lds	r20, 0x01E1	; 0x8001e1 <numberOfAlarms>
 a54:	50 91 e2 01 	lds	r21, 0x01E2	; 0x8001e2 <numberOfAlarms+0x1>
 a58:	24 17       	cp	r18, r20
 a5a:	35 07       	cpc	r19, r21
 a5c:	ac f4       	brge	.+42     	; 0xa88 <_Z16updateAlarmArrayi+0x3c>
		if (i<removeAlarm){
 a5e:	28 17       	cp	r18, r24
 a60:	39 07       	cpc	r19, r25
 a62:	7c f0       	brlt	.+30     	; 0xa82 <_Z16updateAlarmArrayi+0x36>
			alarmArray[i] = alarmArray[i];
		}
		else{
			alarmArray[i] = alarmArray[i+1];
 a64:	f9 01       	movw	r30, r18
 a66:	31 96       	adiw	r30, 0x01	; 1
 a68:	ee 0f       	add	r30, r30
 a6a:	ff 1f       	adc	r31, r31
 a6c:	e3 53       	subi	r30, 0x33	; 51
 a6e:	fe 4f       	sbci	r31, 0xFE	; 254
 a70:	40 81       	ld	r20, Z
 a72:	51 81       	ldd	r21, Z+1	; 0x01
 a74:	f9 01       	movw	r30, r18
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	e3 53       	subi	r30, 0x33	; 51
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	51 83       	std	Z+1, r21	; 0x01
 a80:	40 83       	st	Z, r20
void setAlarm(int alarm_time){
	alarmArray[numberOfAlarms] = alarm_time;
	numberOfAlarms++;
}
void updateAlarmArray(int removeAlarm){
	for (int i=0;i<numberOfAlarms;i++){
 a82:	2f 5f       	subi	r18, 0xFF	; 255
 a84:	3f 4f       	sbci	r19, 0xFF	; 255
 a86:	e4 cf       	rjmp	.-56     	; 0xa50 <_Z16updateAlarmArrayi+0x4>
 a88:	08 95       	ret

00000a8a <_Z10checkAlarmv>:
		else{
			alarmArray[i] = alarmArray[i+1];
		}
	}
}
void checkAlarm(){
 a8a:	cf 92       	push	r12
 a8c:	df 92       	push	r13
 a8e:	ef 92       	push	r14
 a90:	ff 92       	push	r15
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
 a9a:	0f 2e       	mov	r0, r31
 a9c:	f6 ec       	ldi	r31, 0xC6	; 198
 a9e:	cf 2e       	mov	r12, r31
 aa0:	f1 e0       	ldi	r31, 0x01	; 1
 aa2:	df 2e       	mov	r13, r31
 aa4:	f0 2d       	mov	r31, r0
 aa6:	0f 2e       	mov	r0, r31
 aa8:	f7 ec       	ldi	r31, 0xC7	; 199
 aaa:	ef 2e       	mov	r14, r31
 aac:	f1 e0       	ldi	r31, 0x01	; 1
 aae:	ff 2e       	mov	r15, r31
 ab0:	f0 2d       	mov	r31, r0
 ab2:	08 ec       	ldi	r16, 0xC8	; 200
 ab4:	11 e0       	ldi	r17, 0x01	; 1
 ab6:	29 ec       	ldi	r18, 0xC9	; 201
 ab8:	31 e0       	ldi	r19, 0x01	; 1
 aba:	4a ec       	ldi	r20, 0xCA	; 202
 abc:	51 e0       	ldi	r21, 0x01	; 1
 abe:	6b ec       	ldi	r22, 0xCB	; 203
 ac0:	71 e0       	ldi	r23, 0x01	; 1
 ac2:	8c ec       	ldi	r24, 0xCC	; 204
 ac4:	91 e0       	ldi	r25, 0x01	; 1
 ac6:	0e 94 ba 00 	call	0x174	; 0x174 <_Z14ds1307_getdatePhS_S_S_S_S_S_>
	showTime();	
 aca:	0e 94 0c 04 	call	0x818	; 0x818 <_Z8showTimev>
	if (numberOfAlarms == 0){
 ace:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <numberOfAlarms>
 ad2:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <numberOfAlarms+0x1>
 ad6:	89 2b       	or	r24, r25
 ad8:	59 f5       	brne	.+86     	; 0xb30 <_Z10checkAlarmv+0xa6>
 ada:	c0 e0       	ldi	r28, 0x00	; 0
 adc:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i <= numberOfAlarms;i++){
 ade:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <numberOfAlarms>
 ae2:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <numberOfAlarms+0x1>
 ae6:	8c 17       	cp	r24, r28
 ae8:	9d 07       	cpc	r25, r29
 aea:	14 f1       	brlt	.+68     	; 0xb30 <_Z10checkAlarmv+0xa6>
			if (hour ==17 && 14== minute){
 aec:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <hour>
 af0:	81 31       	cpi	r24, 0x11	; 17
 af2:	e1 f4       	brne	.+56     	; 0xb2c <_Z10checkAlarmv+0xa2>
 af4:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <minute>
 af8:	8e 30       	cpi	r24, 0x0E	; 14
 afa:	c1 f4       	brne	.+48     	; 0xb2c <_Z10checkAlarmv+0xa2>
				sc.LCD_Init();
 afc:	83 ee       	ldi	r24, 0xE3	; 227
 afe:	91 e0       	ldi	r25, 0x01	; 1
 b00:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN6Screen8LCD_InitEv>
				sc.LCD_String("Gammak");
 b04:	61 ea       	ldi	r22, 0xA1	; 161
 b06:	71 e0       	ldi	r23, 0x01	; 1
 b08:	83 ee       	ldi	r24, 0xE3	; 227
 b0a:	91 e0       	ldi	r25, 0x01	; 1
 b0c:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN6Screen10LCD_StringEPc>
				ringAlarm();
 b10:	0e 94 10 05 	call	0xa20	; 0xa20 <_Z9ringAlarmv>
				updateAlarmArray(i);
 b14:	ce 01       	movw	r24, r28
 b16:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z16updateAlarmArrayi>
				numberOfAlarms--;
 b1a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <numberOfAlarms>
 b1e:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <numberOfAlarms+0x1>
 b22:	01 97       	sbiw	r24, 0x01	; 1
 b24:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <numberOfAlarms+0x1>
 b28:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <numberOfAlarms>
}
void checkAlarm(){
	ds1307_getdate(&year, &month, &day, &dayofweek, &hour, &minute, &second);
	showTime();	
	if (numberOfAlarms == 0){
		for (int i = 0; i <= numberOfAlarms;i++){
 b2c:	21 96       	adiw	r28, 0x01	; 1
 b2e:	d7 cf       	rjmp	.-82     	; 0xade <_Z10checkAlarmv+0x54>
				numberOfAlarms--;
			}
		}
		
	}
}
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	1f 91       	pop	r17
 b36:	0f 91       	pop	r16
 b38:	ff 90       	pop	r15
 b3a:	ef 90       	pop	r14
 b3c:	df 90       	pop	r13
 b3e:	cf 90       	pop	r12
 b40:	08 95       	ret

00000b42 <_Z6getDayiii>:
	int h = clockTime[3];
	int M = clockTime[4];
	int s = clockTime[5];
	ds1307_setdate(y, m, d, D, h, M, s);
}
int getDay(int y, int m, int d){
 b42:	cf 93       	push	r28
 b44:	df 93       	push	r29
 b46:	ec 01       	movw	r28, r24
	int days = 0;
	for (int i = 1;i<=y;i++){
 b48:	21 e0       	ldi	r18, 0x01	; 1
 b4a:	30 e0       	ldi	r19, 0x00	; 0
	int M = clockTime[4];
	int s = clockTime[5];
	ds1307_setdate(y, m, d, D, h, M, s);
}
int getDay(int y, int m, int d){
	int days = 0;
 b4c:	e0 e0       	ldi	r30, 0x00	; 0
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i = 1;i<=y;i++){
 b50:	c2 17       	cp	r28, r18
 b52:	d3 07       	cpc	r29, r19
 b54:	6c f0       	brlt	.+26     	; 0xb70 <_Z6getDayiii+0x2e>
		if (i%4 == 0){
 b56:	c9 01       	movw	r24, r18
 b58:	83 70       	andi	r24, 0x03	; 3
 b5a:	99 27       	eor	r25, r25
 b5c:	89 2b       	or	r24, r25
 b5e:	19 f4       	brne	.+6      	; 0xb66 <_Z6getDayiii+0x24>
			days+= 366;
 b60:	e2 59       	subi	r30, 0x92	; 146
 b62:	fe 4f       	sbci	r31, 0xFE	; 254
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <_Z6getDayiii+0x28>
		}
		else{
			days+= 365;
 b66:	e3 59       	subi	r30, 0x93	; 147
 b68:	fe 4f       	sbci	r31, 0xFE	; 254
	int s = clockTime[5];
	ds1307_setdate(y, m, d, D, h, M, s);
}
int getDay(int y, int m, int d){
	int days = 0;
	for (int i = 1;i<=y;i++){
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	3f 4f       	sbci	r19, 0xFF	; 255
 b6e:	f0 cf       	rjmp	.-32     	; 0xb50 <_Z6getDayiii+0xe>
 b70:	20 e0       	ldi	r18, 0x00	; 0
 b72:	30 e0       	ldi	r19, 0x00	; 0
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
 b74:	db 01       	movw	r26, r22
 b76:	11 97       	sbiw	r26, 0x01	; 1
 b78:	2a 17       	cp	r18, r26
 b7a:	3b 07       	cpc	r19, r27
 b7c:	3c f5       	brge	.+78     	; 0xbcc <_Z6getDayiii+0x8a>
		if ((y%4==0) & (j == 1)){
 b7e:	91 e0       	ldi	r25, 0x01	; 1
 b80:	de 01       	movw	r26, r28
 b82:	a3 70       	andi	r26, 0x03	; 3
 b84:	bb 27       	eor	r27, r27
 b86:	ab 2b       	or	r26, r27
 b88:	09 f0       	breq	.+2      	; 0xb8c <_Z6getDayiii+0x4a>
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	99 23       	and	r25, r25
 b8e:	91 f0       	breq	.+36     	; 0xbb4 <_Z6getDayiii+0x72>
 b90:	91 e0       	ldi	r25, 0x01	; 1
 b92:	21 30       	cpi	r18, 0x01	; 1
 b94:	31 05       	cpc	r19, r1
 b96:	09 f0       	breq	.+2      	; 0xb9a <_Z6getDayiii+0x58>
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	99 23       	and	r25, r25
 b9c:	59 f0       	breq	.+22     	; 0xbb4 <_Z6getDayiii+0x72>
			days+=monthsDays[j];
 b9e:	d9 01       	movw	r26, r18
 ba0:	aa 0f       	add	r26, r26
 ba2:	bb 1f       	adc	r27, r27
 ba4:	ae 5f       	subi	r26, 0xFE	; 254
 ba6:	be 4f       	sbci	r27, 0xFE	; 254
 ba8:	8d 91       	ld	r24, X+
 baa:	9c 91       	ld	r25, X
 bac:	e8 0f       	add	r30, r24
 bae:	f9 1f       	adc	r31, r25
			days+=1;
 bb0:	31 96       	adiw	r30, 0x01	; 1
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <_Z6getDayiii+0x84>
		}
		else{
			days +=monthsDays[j];
 bb4:	d9 01       	movw	r26, r18
 bb6:	aa 0f       	add	r26, r26
 bb8:	bb 1f       	adc	r27, r27
 bba:	ae 5f       	subi	r26, 0xFE	; 254
 bbc:	be 4f       	sbci	r27, 0xFE	; 254
 bbe:	8d 91       	ld	r24, X+
 bc0:	9c 91       	ld	r25, X
 bc2:	e8 0f       	add	r30, r24
 bc4:	f9 1f       	adc	r31, r25
		else{
			days+= 365;
		}
		
	}
	for (int j = 0;j<m-1;j++){
 bc6:	2f 5f       	subi	r18, 0xFF	; 255
 bc8:	3f 4f       	sbci	r19, 0xFF	; 255
 bca:	d4 cf       	rjmp	.-88     	; 0xb74 <_Z6getDayiii+0x32>
		}
		else{
			days +=monthsDays[j];
		}
	}
	return (days+d+5)%7;
 bcc:	4e 0f       	add	r20, r30
 bce:	5f 1f       	adc	r21, r31
 bd0:	ca 01       	movw	r24, r20
 bd2:	05 96       	adiw	r24, 0x05	; 5
 bd4:	67 e0       	ldi	r22, 0x07	; 7
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__divmodhi4>
 bdc:	df 91       	pop	r29
 bde:	cf 91       	pop	r28
 be0:	08 95       	ret

00000be2 <_Z12setClockTimePi>:
			}
		}
		
	}
}
void setClockTime(int clockTime[6]){
 be2:	cf 92       	push	r12
 be4:	df 92       	push	r13
 be6:	ef 92       	push	r14
 be8:	ff 92       	push	r15
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	ec 01       	movw	r28, r24
	int y = clockTime[0];
 bf4:	18 81       	ld	r17, Y
	int m = clockTime[1];
 bf6:	fa 80       	ldd	r15, Y+2	; 0x02
 bf8:	7b 81       	ldd	r23, Y+3	; 0x03
	int d = clockTime[2];
 bfa:	dc 80       	ldd	r13, Y+4	; 0x04
 bfc:	5d 81       	ldd	r21, Y+5	; 0x05
	int D = getDay(y,m,d);
 bfe:	4d 2d       	mov	r20, r13
 c00:	6f 2d       	mov	r22, r15
 c02:	81 2f       	mov	r24, r17
 c04:	99 81       	ldd	r25, Y+1	; 0x01
 c06:	0e 94 a1 05 	call	0xb42	; 0xb42 <_Z6getDayiii>
	int h = clockTime[3];
 c0a:	0e 81       	ldd	r16, Y+6	; 0x06
	int M = clockTime[4];
 c0c:	e8 84       	ldd	r14, Y+8	; 0x08
	int s = clockTime[5];
 c0e:	ca 84       	ldd	r12, Y+10	; 0x0a
	ds1307_setdate(y, m, d, D, h, M, s);
 c10:	28 2f       	mov	r18, r24
 c12:	4d 2d       	mov	r20, r13
 c14:	6f 2d       	mov	r22, r15
 c16:	81 2f       	mov	r24, r17
 c18:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z14ds1307_setdatehhhhhhh>
}
 c1c:	df 91       	pop	r29
 c1e:	cf 91       	pop	r28
 c20:	1f 91       	pop	r17
 c22:	0f 91       	pop	r16
 c24:	ff 90       	pop	r15
 c26:	ef 90       	pop	r14
 c28:	df 90       	pop	r13
 c2a:	cf 90       	pop	r12
 c2c:	08 95       	ret

00000c2e <__divmodhi4>:
 c2e:	97 fb       	bst	r25, 7
 c30:	07 2e       	mov	r0, r23
 c32:	16 f4       	brtc	.+4      	; 0xc38 <__divmodhi4+0xa>
 c34:	00 94       	com	r0
 c36:	07 d0       	rcall	.+14     	; 0xc46 <__divmodhi4_neg1>
 c38:	77 fd       	sbrc	r23, 7
 c3a:	09 d0       	rcall	.+18     	; 0xc4e <__divmodhi4_neg2>
 c3c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__udivmodhi4>
 c40:	07 fc       	sbrc	r0, 7
 c42:	05 d0       	rcall	.+10     	; 0xc4e <__divmodhi4_neg2>
 c44:	3e f4       	brtc	.+14     	; 0xc54 <__divmodhi4_exit>

00000c46 <__divmodhi4_neg1>:
 c46:	90 95       	com	r25
 c48:	81 95       	neg	r24
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	08 95       	ret

00000c4e <__divmodhi4_neg2>:
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255

00000c54 <__divmodhi4_exit>:
 c54:	08 95       	ret

00000c56 <__udivmodhi4>:
 c56:	aa 1b       	sub	r26, r26
 c58:	bb 1b       	sub	r27, r27
 c5a:	51 e1       	ldi	r21, 0x11	; 17
 c5c:	07 c0       	rjmp	.+14     	; 0xc6c <__udivmodhi4_ep>

00000c5e <__udivmodhi4_loop>:
 c5e:	aa 1f       	adc	r26, r26
 c60:	bb 1f       	adc	r27, r27
 c62:	a6 17       	cp	r26, r22
 c64:	b7 07       	cpc	r27, r23
 c66:	10 f0       	brcs	.+4      	; 0xc6c <__udivmodhi4_ep>
 c68:	a6 1b       	sub	r26, r22
 c6a:	b7 0b       	sbc	r27, r23

00000c6c <__udivmodhi4_ep>:
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	5a 95       	dec	r21
 c72:	a9 f7       	brne	.-22     	; 0xc5e <__udivmodhi4_loop>
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	bc 01       	movw	r22, r24
 c7a:	cd 01       	movw	r24, r26
 c7c:	08 95       	ret

00000c7e <_exit>:
 c7e:	f8 94       	cli

00000c80 <__stop_program>:
 c80:	ff cf       	rjmp	.-2      	; 0xc80 <__stop_program>
