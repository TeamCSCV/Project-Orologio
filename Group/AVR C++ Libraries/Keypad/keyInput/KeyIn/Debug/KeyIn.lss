
KeyIn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b4  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079b  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000275  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000102  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN7Key_Pad8keyInputEv>:
char keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	while (1){
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	88 b9       	out	0x08, r24	; 8
		for (int r=0; r<=3; r++){
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	44 30       	cpi	r20, 0x04	; 4
  b2:	51 05       	cpc	r21, r1
  b4:	0c f0       	brlt	.+2      	; 0xb8 <_ZN7Key_Pad8keyInputEv+0x12>
  b6:	4f c0       	rjmp	.+158    	; 0x156 <_ZN7Key_Pad8keyInputEv+0xb0>
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	87 b9       	out	0x07, r24	; 7
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	88 7f       	andi	r24, 0xF8	; 248
  c2:	84 b9       	out	0x04, r24	; 4
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
  c4:	27 b1       	in	r18, 0x07	; 7
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	04 2e       	mov	r0, r20
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <_ZN7Key_Pad8keyInputEv+0x2c>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <_ZN7Key_Pad8keyInputEv+0x28>
  d6:	92 2f       	mov	r25, r18
  d8:	98 2b       	or	r25, r24
  da:	97 b9       	out	0x07, r25	; 7
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
  dc:	98 b1       	in	r25, 0x08	; 8
  de:	80 95       	com	r24
  e0:	89 23       	and	r24, r25
  e2:	88 b9       	out	0x08, r24	; 8
			for (int c=0; c<=2; c++){
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	23 30       	cpi	r18, 0x03	; 3
  ea:	31 05       	cpc	r19, r1
  ec:	8c f5       	brge	.+98     	; 0x150 <_ZN7Key_Pad8keyInputEv+0xaa>
				KEYCOL_PORT |= (0b00000001 << c);
  ee:	65 b1       	in	r22, 0x05	; 5
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 2e       	mov	r0, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <_ZN7Key_Pad8keyInputEv+0x56>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <_ZN7Key_Pad8keyInputEv+0x52>
 100:	86 2b       	or	r24, r22
 102:	85 b9       	out	0x05, r24	; 5
				if (!(KEYCOL_PIN & (0b00000001 << c))){ // check each column in the respective row for a pressed key
 104:	83 b1       	in	r24, 0x03	; 3
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <_ZN7Key_Pad8keyInputEv+0x6a>
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <_ZN7Key_Pad8keyInputEv+0x66>
 114:	80 fd       	sbrc	r24, 0
 116:	19 c0       	rjmp	.+50     	; 0x14a <_ZN7Key_Pad8keyInputEv+0xa4>
					char pressed = keys[r][c]; // obtain the pressed key
 118:	ca 01       	movw	r24, r20
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	48 0f       	add	r20, r24
 120:	59 1f       	adc	r21, r25
 122:	40 50       	subi	r20, 0x00	; 0
 124:	5f 4f       	sbci	r21, 0xFF	; 255
 126:	fa 01       	movw	r30, r20
 128:	e2 0f       	add	r30, r18
 12a:	f3 1f       	adc	r31, r19
 12c:	80 81       	ld	r24, Z
					if ((pressed!='*') & (pressed!='#')){
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	8a 32       	cpi	r24, 0x2A	; 42
 132:	09 f4       	brne	.+2      	; 0x136 <_ZN7Key_Pad8keyInputEv+0x90>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	99 23       	and	r25, r25
 138:	31 f0       	breq	.+12     	; 0x146 <_ZN7Key_Pad8keyInputEv+0xa0>
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	83 32       	cpi	r24, 0x23	; 35
 13e:	09 f4       	brne	.+2      	; 0x142 <_ZN7Key_Pad8keyInputEv+0x9c>
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	91 11       	cpse	r25, r1
 144:	09 c0       	rjmp	.+18     	; 0x158 <_ZN7Key_Pad8keyInputEv+0xb2>
						return pressed;
					}
					return 'X';
 146:	88 e5       	ldi	r24, 0x58	; 88
 148:	08 95       	ret
		for (int r=0; r<=3; r++){
			KEYROW_DDR &= ~0b00001111; //clearing previous bits
			KEYCOL_DDR &= ~0b00000111; //clearing previous bits
			KEYROW_DDR |= 0b00000001 << r ; //set the current pin to output
			KEYROW_PORT &= ~(0b00000001 << r); // set the current row pin to LOW
			for (int c=0; c<=2; c++){
 14a:	2f 5f       	subi	r18, 0xFF	; 255
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	cc cf       	rjmp	.-104    	; 0xe8 <_ZN7Key_Pad8keyInputEv+0x42>

//Scanning the keypad repeatedly to check whether a key is pressed
char Key_Pad :: keyInput(){
	while (1){
		KEYROW_PORT |= 0b00001111; //set all row pins to HIGH
		for (int r=0; r<=3; r++){
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	ad cf       	rjmp	.-166    	; 0xb0 <_ZN7Key_Pad8keyInputEv+0xa>
					}
					return 'X';
				}
			}
		}
	return 'X';}
 156:	88 e5       	ldi	r24, 0x58	; 88
}
 158:	08 95       	ret

0000015a <_ZN7Key_Pad10pressedKeyEv>:

char Key_Pad :: pressedKey(){
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
	while (1){
	char key = keyInput();
 160:	ce 01       	movw	r24, r28
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Key_Pad8keyInputEv>
	if (key != 'X'){
 166:	88 35       	cpi	r24, 0x58	; 88
 168:	d9 f3       	breq	.-10     	; 0x160 <_ZN7Key_Pad10pressedKeyEv+0x6>
		return key; // if a number is pressed return the pressed key
	 }
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:
#include "Key_Pad.h"

Key_Pad keyin;
 
 int main(void){
  char key = keyin.pressedKey();
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN7Key_Pad10pressedKeyEv>
		   _delay_ms(500);
		   PORTD= 0x00;
		   _delay_ms(500);
   }*/
 
 }
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
