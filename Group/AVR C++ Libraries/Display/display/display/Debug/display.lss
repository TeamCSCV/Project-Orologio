
display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800150  00800150  000003c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140f  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000901  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00002694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e9  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060b  00000000  00000000  00002e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  9e:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN7Display11LCD_CommandEh>:
char menu[4][16] = {"Set Alarm", "Set Time", "Change Alarms", "Factory Reset"};

//this command is use to send a command to the LCD as an unsigned char
void Display::LCD_Command(unsigned char cmnd)      
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	96 2f       	mov	r25, r22
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	89 2b       	or	r24, r25
  b0:	8b b9       	out	0x0b, r24	; 11
	LCD_Port &= ~ (1<<RS);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<EN);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	8a 95       	dec	r24
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_ZN7Display11LCD_CommandEh+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN7Display11LCD_CommandEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	90 e1       	ldi	r25, 0x10	; 16
  d2:	69 9f       	mul	r22, r25
  d4:	b0 01       	movw	r22, r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	68 2b       	or	r22, r24
  dc:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 ef       	ldi	r24, 0xF3	; 243
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_ZN7Display11LCD_CommandEh+0x4a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN7Display11LCD_CommandEh+0x50>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <_ZN7Display8LCD_CharEh>:
	_delay_ms(2);
}

void Display::LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	96 2f       	mov	r25, r22
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	89 2b       	or	r24, r25
 104:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1<<RS);		//RS = 1
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8b b9       	out	0x0b, r24	; 11
	LCD_Port|= (1<<EN);
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	8b b9       	out	0x0b, r24	; 11
 11a:	82 e4       	ldi	r24, 0x42	; 66
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <_ZN7Display8LCD_CharEh+0x22>
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZN7Display8LCD_CharEh+0x28>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	90 e1       	ldi	r25, 0x10	; 16
 126:	69 9f       	mul	r22, r25
 128:	b0 01       	movw	r22, r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	68 2b       	or	r22, r24
 130:	6b b9       	out	0x0b, r22	; 11
	LCD_Port |= (1<<EN);
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	82 60       	ori	r24, 0x02	; 2
 136:	8b b9       	out	0x0b, r24	; 11
 138:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	83 ef       	ldi	r24, 0xF3	; 243
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <_ZN7Display8LCD_CharEh+0x4a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN7Display8LCD_CharEh+0x50>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <_ZN7Display8LCD_InitEv>:
}


//function to initialize the LCD display
void Display::LCD_Init(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;			//LCD data direction is output
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	8a b9       	out	0x0a, r24	; 10
 158:	87 e8       	ldi	r24, 0x87	; 135
 15a:	93 e1       	ldi	r25, 0x13	; 19
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <_ZN7Display8LCD_InitEv+0xe>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZN7Display8LCD_InitEv+0x14>
 162:	00 00       	nop
	_delay_ms(20);
	
	LCD_Command(0x02);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	ce 01       	movw	r24, r28
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
	LCD_Command(0x28);
 16c:	68 e2       	ldi	r22, 0x28	; 40
 16e:	ce 01       	movw	r24, r28
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
	LCD_Command(0x0c);              //Command - Display on Cursor off
 174:	6c e0       	ldi	r22, 0x0C	; 12
 176:	ce 01       	movw	r24, r28
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
	LCD_Command(0x06);              //Command - shift cursor to right
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
	LCD_Command(0x01);              //Command - Clear display
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	ce 01       	movw	r24, r28
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);
	LCD_String(".");
	_delay_ms(1000);*/
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <_ZN7Display10LCD_StringEPc>:


//this is the function use to write a string on the LCD Display
void Display::LCD_String(char *str)
{
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	7c 01       	movw	r14, r24
 1a0:	8b 01       	movw	r16, r22
	int i;
	for(i=0;str[i]!=0;i++)
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	f8 01       	movw	r30, r16
 1a8:	ec 0f       	add	r30, r28
 1aa:	fd 1f       	adc	r31, r29
 1ac:	60 81       	ld	r22, Z
 1ae:	66 23       	and	r22, r22
 1b0:	29 f0       	breq	.+10     	; 0x1bc <_ZN7Display10LCD_StringEPc+0x2a>
	{
		LCD_Char (str[i]);
 1b2:	c7 01       	movw	r24, r14
 1b4:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZN7Display8LCD_CharEh>

//this is the function use to write a string on the LCD Display
void Display::LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	f5 cf       	rjmp	.-22     	; 0x1a6 <_ZN7Display10LCD_StringEPc+0x14>
	{
		LCD_Char (str[i]);
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <_ZN7Display9LCD_clearEv>:


//function to clear the display
void Display::LCD_clear()
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
	LCD_Command (0x01);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
 1d6:	83 ef       	ldi	r24, 0xF3	; 243
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <_ZN7Display9LCD_clearEv+0x10>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <_ZN7Display9LCD_clearEv+0x16>
 1e0:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);
 1e2:	60 e8       	ldi	r22, 0x80	; 128
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7Display11LCD_CommandEh>
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <_ZN7Display4TimeEv>:


/*demo function to display the Time. Here I used only the string "Time"
But in the alarm clock we can use the Time output comes from the RTC sub system. */
void Display::Time()
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
	LCD_clear();
 1f6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_ZN7Display9LCD_clearEv>
	LCD_String("~~~~ TIME ~~~~");
 1fa:	60 e4       	ldi	r22, 0x40	; 64
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN7Display10LCD_StringEPc>
 204:	2f e9       	ldi	r18, 0x9F	; 159
 206:	86 e8       	ldi	r24, 0x86	; 134
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <_ZN7Display4TimeEv+0x1a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <_ZN7Display4TimeEv+0x24>
 214:	00 00       	nop
	_delay_ms(500);
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <_ZN7Display15Control_buttonsEv>:
	 LCD_clear();
	 LCD_String(menu[menu_i]);
	 _delay_ms(500);
}
char Display::Control_buttons(){
	DDRB = 0xCF;
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011;
 220:	8a b1       	in	r24, 0x0a	; 10
 222:	83 7f       	andi	r24, 0xF3	; 243
 224:	8a b9       	out	0x0a, r24	; 10
	while (1)
	{
		if (PINB == 1<<4){
 226:	83 b1       	in	r24, 0x03	; 3
 228:	80 31       	cpi	r24, 0x10	; 16
 22a:	49 f0       	breq	.+18     	; 0x23e <_ZN7Display15Control_buttonsEv+0x22>
			return 'u' ;
			break;      
		}
		else if (PINB == 1<<5){
 22c:	83 b1       	in	r24, 0x03	; 3
 22e:	80 32       	cpi	r24, 0x20	; 32
 230:	41 f0       	breq	.+16     	; 0x242 <_ZN7Display15Control_buttonsEv+0x26>
			return 'd';
			break;  
		}
		else if (PIND & 0b00000100){
 232:	4a 99       	sbic	0x09, 2	; 9
 234:	08 c0       	rjmp	.+16     	; 0x246 <_ZN7Display15Control_buttonsEv+0x2a>
			return 'u';
			break;
		}
		else if (PIND & 0b00001000){
 236:	4b 9b       	sbis	0x09, 3	; 9
 238:	f6 cf       	rjmp	.-20     	; 0x226 <_ZN7Display15Control_buttonsEv+0xa>
			return 'd';
 23a:	84 e6       	ldi	r24, 0x64	; 100
 23c:	08 95       	ret
	DDRB = 0xCF;
	DDRD &= 0b11110011;
	while (1)
	{
		if (PINB == 1<<4){
			return 'u' ;
 23e:	85 e7       	ldi	r24, 0x75	; 117
 240:	08 95       	ret
			break;      
		}
		else if (PINB == 1<<5){
			return 'd';
 242:	84 e6       	ldi	r24, 0x64	; 100
 244:	08 95       	ret
			break;  
		}
		else if (PIND & 0b00000100){
			return 'u';
 246:	85 e7       	ldi	r24, 0x75	; 117
			return 'd';
			break;
		}
		
	}
 248:	08 95       	ret

0000024a <_ZN7Display15Execute_buttonsEv>:
	LCD_String("~~~~ TIME ~~~~");
	_delay_ms(500);
}

void Display::Execute_buttons()
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
	 char x;
	 x = Control_buttons();
 250:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN7Display15Control_buttonsEv>
	 if (x=='u'){ 
 254:	85 37       	cpi	r24, 0x75	; 117
 256:	61 f4       	brne	.+24     	; 0x270 <_ZN7Display15Execute_buttonsEv+0x26>
		 switch(menu_i)
 258:	8c 81       	ldd	r24, Y+4	; 0x04
 25a:	9d 81       	ldd	r25, Y+5	; 0x05
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	91 05       	cpc	r25, r1
 260:	19 f4       	brne	.+6      	; 0x268 <_ZN7Display15Execute_buttonsEv+0x1e>
		 {
			 case 3: menu_i = 0; break;
 262:	1d 82       	std	Y+5, r1	; 0x05
 264:	1c 82       	std	Y+4, r1	; 0x04
 266:	12 c0       	rjmp	.+36     	; 0x28c <_ZN7Display15Execute_buttonsEv+0x42>
			 default: menu_i ++; break;
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	9d 83       	std	Y+5, r25	; 0x05
 26c:	8c 83       	std	Y+4, r24	; 0x04
 26e:	0e c0       	rjmp	.+28     	; 0x28c <_ZN7Display15Execute_buttonsEv+0x42>
		 }
	 }
	 else if (x=='d'){
 270:	84 36       	cpi	r24, 0x64	; 100
 272:	61 f4       	brne	.+24     	; 0x28c <_ZN7Display15Execute_buttonsEv+0x42>
		 switch (menu_i)
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	9d 81       	ldd	r25, Y+5	; 0x05
 278:	00 97       	sbiw	r24, 0x00	; 0
 27a:	29 f4       	brne	.+10     	; 0x286 <_ZN7Display15Execute_buttonsEv+0x3c>
		 {
			 case 0: menu_i = 3; break;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	9d 83       	std	Y+5, r25	; 0x05
 282:	8c 83       	std	Y+4, r24	; 0x04
 284:	03 c0       	rjmp	.+6      	; 0x28c <_ZN7Display15Execute_buttonsEv+0x42>
			 default: menu_i --; break; 
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	9d 83       	std	Y+5, r25	; 0x05
 28a:	8c 83       	std	Y+4, r24	; 0x04
		 }
	 }
		 
	 LCD_clear();
 28c:	ce 01       	movw	r24, r28
 28e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_ZN7Display9LCD_clearEv>
	 LCD_String(menu[menu_i]);
 292:	6c 81       	ldd	r22, Y+4	; 0x04
 294:	7d 81       	ldd	r23, Y+5	; 0x05
 296:	62 95       	swap	r22
 298:	72 95       	swap	r23
 29a:	70 7f       	andi	r23, 0xF0	; 240
 29c:	76 27       	eor	r23, r22
 29e:	60 7f       	andi	r22, 0xF0	; 240
 2a0:	76 27       	eor	r23, r22
 2a2:	60 50       	subi	r22, 0x00	; 0
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN7Display10LCD_StringEPc>
 2ac:	2f e9       	ldi	r18, 0x9F	; 159
 2ae:	86 e8       	ldi	r24, 0x86	; 134
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <_ZN7Display15Execute_buttonsEv+0x68>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_ZN7Display15Execute_buttonsEv+0x72>
 2bc:	00 00       	nop
	 _delay_ms(500);
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <main>:
Display disp;                 

int main(void)
{
			
    disp.LCD_Init();         //initialize the LCD Display
 2c4:	80 e5       	ldi	r24, 0x50	; 80
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN7Display8LCD_InitEv>
	disp.Time();            //at the beginning the time will be shown
 2cc:	80 e5       	ldi	r24, 0x50	; 80
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_ZN7Display4TimeEv>
	while (1)
	{
		disp.Execute_buttons();
 2d4:	80 e5       	ldi	r24, 0x50	; 80
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN7Display15Execute_buttonsEv>
 2dc:	fb cf       	rjmp	.-10     	; 0x2d4 <main+0x10>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
